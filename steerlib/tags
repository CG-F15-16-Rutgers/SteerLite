!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANGULAR_PRIORITY	include/benchmarking/AgentMetricsCollector.h	27;"	d
AR	build/Makefile	/^AR := ar$/;"	m
AccelerationEfficiencyBenchmarkTechnique	include/benchmarking/AccelerationEfficiencyTechnique.h	/^	class STEERLIB_API AccelerationEfficiencyBenchmarkTechnique : public SteerLib::BenchmarkTechniqueInterface$/;"	c	namespace:SteerLib
AgentGoalInfo	include/testcaseio/AgentInitialConditions.h	/^	struct AgentGoalInfo {$/;"	s	namespace:SteerLib
AgentGoalTypeEnum	include/testcaseio/AgentInitialConditions.h	/^	enum AgentGoalTypeEnum {$/;"	g	namespace:SteerLib
AgentInitialConditions	include/testcaseio/AgentInitialConditions.h	/^	struct AgentInitialConditions {$/;"	s	namespace:SteerLib
AgentInterface	include/interfaces/AgentInterface.h	/^	class STEERLIB_API AgentInterface : public SteerLib::SpatialDatabaseItem$/;"	c	namespace:SteerLib
AgentMetrics	include/benchmarking/MetricsData.h	/^	class STEERLIB_API AgentMetrics$/;"	c	namespace:SteerLib
AgentMetricsCollector	include/benchmarking/AgentMetricsCollector.h	/^	class STEERLIB_API AgentMetricsCollector$/;"	c	namespace:SteerLib
AgentMetricsCollector	src/AgentMetricsCollector.cpp	/^AgentMetricsCollector::AgentMetricsCollector(SteerLib::AgentInterface * agent)$/;"	f	class:AgentMetricsCollector
AutomaticFunctionProfiler	include/util/PerformanceProfiler.h	/^		AutomaticFunctionProfiler(PerformanceProfiler * pp) { _pp = pp; _pp->start(); }$/;"	f	class:Util::AutomaticFunctionProfiler
AutomaticFunctionProfiler	include/util/PerformanceProfiler.h	/^	class UTIL_API AutomaticFunctionProfiler$/;"	c	namespace:Util
AxisAlignedBox	include/util/Geometry.h	/^		AxisAlignedBox() : xmin(FLT_MAX), xmax(-FLT_MAX), ymin(FLT_MAX), ymax(-FLT_MAX), zmin(FLT_MAX), zmax(-FLT_MAX) { }$/;"	f	class:Util::AxisAlignedBox
AxisAlignedBox	include/util/Geometry.h	/^		AxisAlignedBox(float newxmin, float newxmax, float newymin, float newymax, float newzmin, float newzmax) : xmin(newxmin), xmax(newxmax), ymin(newymin), ymax(newymax), zmin(newzmin), zmax(newzmax) { }$/;"	f	class:Util::AxisAlignedBox
AxisAlignedBox	include/util/Geometry.h	/^	class UTIL_API AxisAlignedBox {$/;"	c	namespace:Util
BEHAVIOUR_H_	include/testcaseio/Behaviour.h	13;"	d
BEHAVIOUR_PARAMETER_H_	include/testcaseio/BehaviourParameter.h	7;"	d
Behaviour	include/testcaseio/Behaviour.h	/^	class STEERLIB_API Behaviour$/;"	c	namespace:SteerLib
Behaviour	src/Behaviour.cpp	/^Behaviour::Behaviour() $/;"	f	class:Behaviour
Behaviour	src/Behaviour.cpp	/^Behaviour::Behaviour(std::string steeringAlg, std::vector<BehaviourParameter > parameters)$/;"	f	class:Behaviour
BehaviourParameter	include/testcaseio/BehaviourParameter.h	/^	class STEERLIB_API BehaviourParameter$/;"	c	namespace:SteerLib
BehaviourParameter	src/BehaviorParameter.cpp	/^BehaviourParameter::BehaviourParameter() $/;"	f	class:BehaviourParameter
BehaviourParameter	src/BehaviorParameter.cpp	/^BehaviourParameter::BehaviourParameter(std::string key, std::string value) : key(key), value(value)$/;"	f	class:BehaviourParameter
BenchmarkAgent	include/benchmarking/BenchmarkEnginePrivate.h	/^	class STEERLIB_API BenchmarkAgent : public SteerLib::AgentInterface$/;"	c	namespace:SteerLib
BenchmarkEngine	include/benchmarking/BenchmarkEngine.h	/^	class STEERLIB_API BenchmarkEngine : public SteerLib::BenchmarkEnginePrivate$/;"	c	namespace:SteerLib
BenchmarkEngine	src/BenchmarkEngine.cpp	/^BenchmarkEngine::BenchmarkEngine(const std::string & recordingFilename, BenchmarkTechniqueInterface * benchmarkTechnique)$/;"	f	class:BenchmarkEngine
BenchmarkEnginePrivate	include/benchmarking/BenchmarkEnginePrivate.h	/^	class STEERLIB_API BenchmarkEnginePrivate$/;"	c	namespace:SteerLib
BenchmarkTechniqueInterface	include/interfaces/BenchmarkTechniqueInterface.h	/^	class STEERLIB_API BenchmarkTechniqueInterface$/;"	c	namespace:SteerLib
BestFirstSearchNode	include/planning/BestFirstSearchPlanner.h	/^		BestFirstSearchNode() { }$/;"	f	class:SteerLib::BestFirstSearchNode
BestFirstSearchNode	include/planning/BestFirstSearchPlanner.h	/^		BestFirstSearchNode(float _g, float _f, const PlanningState & _previousState, const PlanningAction & _nextAction) $/;"	f	class:SteerLib::BestFirstSearchNode
BestFirstSearchNode	include/planning/BestFirstSearchPlanner.h	/^		BestFirstSearchNode(float _g, float _f, const PlanningState & _previousState, const PlanningState & _nextState) $/;"	f	class:SteerLib::BestFirstSearchNode
BestFirstSearchNode	include/planning/BestFirstSearchPlanner.h	/^	class BestFirstSearchNode {$/;"	c	namespace:SteerLib
BestFirstSearchPlanner	include/planning/BestFirstSearchPlanner.h	/^	class BestFirstSearchPlanner {$/;"	c	namespace:SteerLib
BoxObstacle	include/obstacles/BoxObstacle.h	/^		BoxObstacle(const Util::AxisAlignedBox & newBounds, float traversalCost=1001.0f ) : _bounds(newBounds), _traversalCost(traversalCost) { _blocksLineOfSight = (newBounds.ymax > 0.7) ? true : false; }$/;"	f	class:SteerLib::BoxObstacle
BoxObstacle	include/obstacles/BoxObstacle.h	/^		BoxObstacle(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax, float traversalCost=1001.0f) : _bounds(xmin, xmax, ymin, ymax, zmin, zmax), _traversalCost(traversalCost) { _blocksLineOfSight = (ymax > 0.7) ? true : false; }$/;"	f	class:SteerLib::BoxObstacle
BoxObstacle	include/obstacles/BoxObstacle.h	/^	class STEERLIB_API BoxObstacle : public SteerLib::ObstacleInterface$/;"	c	namespace:SteerLib
BoxObstacleInitialConditions	include/testcaseio/ObstacleInitialConditions.h	/^		BoxObstacleInitialConditions() {};$/;"	f	struct:SteerLib::BoxObstacleInitialConditions
BoxObstacleInitialConditions	include/testcaseio/ObstacleInitialConditions.h	/^		BoxObstacleInitialConditions(float xmin_, float xmax_, float ymin, float ymax, float zmin, float zmax)$/;"	f	struct:SteerLib::BoxObstacleInitialConditions
BoxObstacleInitialConditions	include/testcaseio/ObstacleInitialConditions.h	/^	struct BoxObstacleInitialConditions : public ObstacleInitialConditions$/;"	s	namespace:SteerLib
CC	build/Makefile	/^CC := clang++$/;"	m
CC	build/Makefile	/^CC := g++$/;"	m
CFLAGS	build/Makefile	/^CFLAGS := $(BASIC_CFLAGS)$/;"	m
CHECK_BOUNDS	src/RecFileReader.cpp	35;"	d	file:
CHECK_MAX_INDEX	src/RecFileReader.cpp	27;"	d	file:
CLOCK_MODE_FIXED_AS_FAST_AS_POSSIBLE	include/simulation/Clock.h	/^		enum ClockModeEnum { CLOCK_MODE_FIXED_AS_FAST_AS_POSSIBLE,  CLOCK_MODE_FIXED_REAL_TIME,  CLOCK_MODE_VARIABLE_REAL_TIME };$/;"	e	enum:SteerLib::Clock::ClockModeEnum
CLOCK_MODE_FIXED_REAL_TIME	include/simulation/Clock.h	/^		enum ClockModeEnum { CLOCK_MODE_FIXED_AS_FAST_AS_POSSIBLE,  CLOCK_MODE_FIXED_REAL_TIME,  CLOCK_MODE_VARIABLE_REAL_TIME };$/;"	e	enum:SteerLib::Clock::ClockModeEnum
CLOCK_MODE_VARIABLE_REAL_TIME	include/simulation/Clock.h	/^		enum ClockModeEnum { CLOCK_MODE_FIXED_AS_FAST_AS_POSSIBLE,  CLOCK_MODE_FIXED_REAL_TIME,  CLOCK_MODE_VARIABLE_REAL_TIME };$/;"	e	enum:SteerLib::Clock::ClockModeEnum
COLLISION_EPSILON	include/benchmarking/AgentMetricsCollector.h	33;"	d
COMPOSITETECHNIQUEGRAPH_H_	include/benchmarking/CompositeTechniqueGraph.h	15;"	d
Camera	include/simulation/Camera.h	/^	class STEERLIB_API Camera$/;"	c	namespace:SteerLib
Camera	src/Camera.cpp	/^Camera::Camera()$/;"	f	class:Camera
CameraView	include/simulation/Camera.h	/^			CameraView() {$/;"	f	class:SteerLib::CameraView
CameraView	include/simulation/Camera.h	/^			CameraView(const Util::Point & newPos, const Util::Point & newLookat, const Util::Vector & newUp, const float newFovy) {$/;"	f	class:SteerLib::CameraView
CameraView	include/simulation/Camera.h	/^	class STEERLIB_API CameraView {$/;"	c	namespace:SteerLib
Circle	include/util/Geometry.h	/^		Circle() : x(0.0f), z(0.0f), r(0.0f) { }$/;"	f	class:Util::Circle
Circle	include/util/Geometry.h	/^		Circle(float newx, float newz, float newRadius) : x(newx), z(newz), r(newRadius) { }$/;"	f	class:Util::Circle
Circle	include/util/Geometry.h	/^	class UTIL_API Circle$/;"	c	namespace:Util
CircleObstacle	include/obstacles/CircleObstacle.h	/^	class STEERLIB_API CircleObstacle : public SteerLib::ObstacleInterface$/;"	c	namespace:SteerLib
CircleObstacle	src/CircleObstacle.cpp	/^CircleObstacle::CircleObstacle ( Point centerPosition, float radius, float ymin, float ymax, float traversalCost )$/;"	f	class:CircleObstacle
CircleObstacleInitialConditions	include/testcaseio/ObstacleInitialConditions.h	/^	struct CircleObstacleInitialConditions : public ObstacleInitialConditions {$/;"	s	namespace:SteerLib
Clock	include/simulation/Clock.h	/^	class STEERLIB_API Clock$/;"	c	namespace:SteerLib
Clock	src/Clock.cpp	/^Clock::Clock()$/;"	f	class:Clock
Clock	src/Clock.cpp	/^Clock::Clock(ClockModeEnum clockMode, float fixedFps, float minSimulationDt, float maxSimulationDt)$/;"	f	class:Clock
ClockModeEnum	include/simulation/Clock.h	/^		enum ClockModeEnum { CLOCK_MODE_FIXED_AS_FAST_AS_POSSIBLE,  CLOCK_MODE_FIXED_REAL_TIME,  CLOCK_MODE_VARIABLE_REAL_TIME };$/;"	g	class:SteerLib::Clock
CollisionInfo	include/benchmarking/MetricsData.h	/^	struct STEERLIB_API CollisionInfo$/;"	s	namespace:SteerLib
Color	include/util/Color.h	/^		Color( float newr, float newg, float newb ) : r(newr), g(newg), b(newb) { }$/;"	f	class:Util::Color
Color	include/util/Color.h	/^		Color() : r(1.0f), g(1.0f), b(1.0f) { }$/;"	f	class:Util::Color
Color	include/util/Color.h	/^	class UTIL_API Color {$/;"	c	namespace:Util
CommandFunctionPtr	include/interfaces/EngineInterface.h	/^	typedef void (*CommandFunctionPtr)(const std::string & commandString);$/;"	t	namespace:SteerLib
CommandLineEngineDriverOptions	include/simulation/SimulationOptions.h	/^		struct CommandLineEngineDriverOptions {$/;"	s	class:SteerLib::SimulationOptions
CommandLineOptionTypeEnum	include/util/CommandLineParser.h	/^	enum CommandLineOptionTypeEnum {$/;"	g	namespace:Util
CommandLineParser	include/util/CommandLineParser.h	/^	class UTIL_API CommandLineParser {$/;"	c	namespace:Util
CommandLineParser	src/CommandLineParser.cpp	/^CommandLineParser::CommandLineParser()$/;"	f	class:CommandLineParser
CompareCosts	include/planning/BestFirstSearchPlanner.h	/^	class CompareCosts {$/;"	c	namespace:SteerLib
CompositeBenchmarkTechnique01	include/benchmarking/CompositeTechnique01.h	/^	class STEERLIB_API CompositeBenchmarkTechnique01 : public SteerLib::BenchmarkTechniqueInterface$/;"	c	namespace:SteerLib
CompositeBenchmarkTechnique02	include/benchmarking/CompositeTechnique02.h	/^	class STEERLIB_API CompositeBenchmarkTechnique02 : public SteerLib::BenchmarkTechniqueInterface$/;"	c	namespace:SteerLib
CompositeBenchmarkTechniqueGraph	include/benchmarking/CompositeTechniqueGraph.h	/^	class STEERLIB_API CompositeBenchmarkTechniqueGraph : public SteerLib::CompositeBenchmarkTechnique02$/;"	c	namespace:SteerLib
CompositeBenchmarkTechniquePLE	include/benchmarking/CompositeTechniquePLE.h	/^	class STEERLIB_API CompositeBenchmarkTechniquePLE : public SteerLib::BenchmarkTechniqueInterface$/;"	c	namespace:SteerLib
CounterFrequencyEstimator	include/util/HighResCounter.h	/^	class UTIL_API CounterFrequencyEstimator$/;"	c	namespace:Util
Curve	build/win32/AnimationCurve.h	/^		Curve(Point& startPoint) : start(startPoint) {};$/;"	f	class:Util::Curve
Curve	build/win32/AnimationCurve.h	/^	class UTIL_API Curve$/;"	c	namespace:Util
Curve	include/util/Curve.h	/^			Curve(int curveType = catmullCurve) : type(curveType) {}$/;"	f	class:Util::Curve
Curve	include/util/Curve.h	/^	class UTIL_API Curve$/;"	c	namespace:Util
Curve	src/Curve.cpp	/^Curve::Curve(const CurvePoint& startPoint, int curveType) : type(curveType)$/;"	f	class:Curve
Curve	src/Curve.cpp	/^Curve::Curve(const std::vector<CurvePoint>& inputPoints, int curveType) : type(curveType)$/;"	f	class:Curve
CurvePoint	include/util/Curve.h	/^			CurvePoint(Point inputPosition, Vector& inputTangent, float inputTime) : position(inputPosition),$/;"	f	class:Util::CurvePoint
CurvePoint	include/util/Curve.h	/^	class UTIL_API CurvePoint$/;"	c	namespace:Util
DATA_REC	include/recfileio/RecFileIO.h	/^		DATA_REC,$/;"	e	enum:SteerLib::REC_FORMAT
DEFAULTALPHA	include/benchmarking/BayesianFilter.h	/^static const double DEFAULTALPHA    = 1.0e-3;$/;"	v
DEFAULTBETA	include/benchmarking/BayesianFilter.h	/^static const double DEFAULTBETA     = 2.0;$/;"	v
DEFAULTKAPPA	include/benchmarking/BayesianFilter.h	/^static const double DEFAULTKAPPA    = 0.0;$/;"	v
DEFAULTSTEPSIZE	include/benchmarking/BayesianFilter.h	/^static const double DEFAULTSTEPSIZE = 0.0009765625;$/;"	v
DEFAULT_ANIMATE_CAMERA	src/SimulationOptions.cpp	93;"	d	file:
DEFAULT_ANTIALIASING	src/SimulationOptions.cpp	80;"	d	file:
DEFAULT_BACKGROUND_COLOR	src/SimulationOptions.cpp	87;"	d	file:
DEFAULT_CAMERA_FOVY	src/SimulationOptions.cpp	92;"	d	file:
DEFAULT_CAMERA_LOOKAT	src/SimulationOptions.cpp	90;"	d	file:
DEFAULT_CAMERA_POSITION	src/SimulationOptions.cpp	89;"	d	file:
DEFAULT_CAMERA_UP	src/SimulationOptions.cpp	91;"	d	file:
DEFAULT_CAN_USE_MOUSE_SELECTION	src/SimulationOptions.cpp	82;"	d	file:
DEFAULT_CERR_REDIRECTION_FILENAME	src/SimulationOptions.cpp	142;"	d	file:
DEFAULT_CLOCK_MODE	src/SimulationOptions.cpp	150;"	d	file:
DEFAULT_CLOCK_PAUSED_ON_START	src/SimulationOptions.cpp	165;"	d	file:
DEFAULT_CLOG_REDIRECTION_FILENAME	src/SimulationOptions.cpp	143;"	d	file:
DEFAULT_COUT_REDIRECTION_FILENAME	src/SimulationOptions.cpp	141;"	d	file:
DEFAULT_DATA_FILE	src/SimulationOptions.cpp	144;"	d	file:
DEFAULT_DRAW_GRID	src/SimulationOptions.cpp	160;"	d	file:
DEFAULT_ENGINE_DRIVER	src/SimulationOptions.cpp	140;"	d	file:
DEFAULT_FIXED_FPS	src/SimulationOptions.cpp	147;"	d	file:
DEFAULT_FULLSCREEN	src/SimulationOptions.cpp	171;"	d	file:
DEFAULT_GRID_SIZE_X	src/SimulationOptions.cpp	156;"	d	file:
DEFAULT_GRID_SIZE_Z	src/SimulationOptions.cpp	157;"	d	file:
DEFAULT_KEY_DUMP_TESTCASE	src/SimulationOptions.cpp	67;"	d	file:
DEFAULT_KEY_PAUSE	src/SimulationOptions.cpp	59;"	d	file:
DEFAULT_KEY_PRINT_CAMERA_INFO	src/SimulationOptions.cpp	53;"	d	file:
DEFAULT_KEY_QUIT	src/SimulationOptions.cpp	52;"	d	file:
DEFAULT_KEY_RESET_PLAYBACK_SPEED	src/SimulationOptions.cpp	64;"	d	file:
DEFAULT_KEY_RESTART_PLAYBACK	src/SimulationOptions.cpp	66;"	d	file:
DEFAULT_KEY_SLOWDOWN_PLAYBACK	src/SimulationOptions.cpp	63;"	d	file:
DEFAULT_KEY_SPEEDUP_PLAYBACK	src/SimulationOptions.cpp	62;"	d	file:
DEFAULT_KEY_STEP_BACKWARD	src/SimulationOptions.cpp	65;"	d	file:
DEFAULT_KEY_STEP_ONE_FRAME	src/SimulationOptions.cpp	60;"	d	file:
DEFAULT_KEY_TAKE_SCREENSHOT	src/SimulationOptions.cpp	55;"	d	file:
DEFAULT_KEY_TOGGLE_ANTIALIASING	src/SimulationOptions.cpp	54;"	d	file:
DEFAULT_LINE_WIDTH	src/SimulationOptions.cpp	88;"	d	file:
DEFAULT_MAX_ITEMS_PER_GRID_CELL	src/SimulationOptions.cpp	155;"	d	file:
DEFAULT_MAX_VARIABLE_DT	src/SimulationOptions.cpp	149;"	d	file:
DEFAULT_MIN_VARIABLE_DT	src/SimulationOptions.cpp	148;"	d	file:
DEFAULT_MODULE_SEARCH_PATH	src/SimulationOptions.cpp	133;"	d	file:
DEFAULT_MOUSE_BUTTON_TO_MOVE_CAMERA	src/SimulationOptions.cpp	73;"	d	file:
DEFAULT_MOUSE_BUTTON_TO_ROTATE_CAMERA	src/SimulationOptions.cpp	74;"	d	file:
DEFAULT_MOUSE_BUTTON_TO_SELECT_AGENT	src/SimulationOptions.cpp	72;"	d	file:
DEFAULT_MOUSE_BUTTON_TO_ZOOM_CAMERA	src/SimulationOptions.cpp	75;"	d	file:
DEFAULT_MOUSE_MOVE_FACTOR	src/SimulationOptions.cpp	86;"	d	file:
DEFAULT_MOUSE_ROTATE_FACTOR	src/SimulationOptions.cpp	84;"	d	file:
DEFAULT_MOUSE_ZOOM_FACTOR	src/SimulationOptions.cpp	85;"	d	file:
DEFAULT_NUM_FRAMES_TO_SIMULATE	src/SimulationOptions.cpp	146;"	d	file:
DEFAULT_NUM_GRID_CELLS_X	src/SimulationOptions.cpp	158;"	d	file:
DEFAULT_NUM_GRID_CELLS_Z	src/SimulationOptions.cpp	159;"	d	file:
DEFAULT_NUM_THREADS	src/SimulationOptions.cpp	145;"	d	file:
DEFAULT_START_DUMPING_FRAMES	src/SimulationOptions.cpp	56;"	d	file:
DEFAULT_STEREO_MODE	src/SimulationOptions.cpp	172;"	d	file:
DEFAULT_STOP_DUMPING_FRAMES	src/SimulationOptions.cpp	57;"	d	file:
DEFAULT_TEST_CASE_PLAYER_AI	src/SimulationOptions.cpp	178;"	d	file:
DEFAULT_TEST_CASE_PLAYER_FILENAME	src/SimulationOptions.cpp	177;"	d	file:
DEFAULT_TEST_CASE_SEARCH_PATH	src/SimulationOptions.cpp	134;"	d	file:
DEFAULT_USE_MOUSE_WHEEL_ZOOM	src/SimulationOptions.cpp	83;"	d	file:
DEFAULT_VSYNC	src/SimulationOptions.cpp	81;"	d	file:
DEFAULT_WINDOW_POSITION_X	src/SimulationOptions.cpp	168;"	d	file:
DEFAULT_WINDOW_POSITION_Y	src/SimulationOptions.cpp	169;"	d	file:
DEFAULT_WINDOW_SIZE_X	src/SimulationOptions.cpp	166;"	d	file:
DEFAULT_WINDOW_SIZE_Y	src/SimulationOptions.cpp	167;"	d	file:
DEFAULT_WINDOW_TITLE	src/SimulationOptions.cpp	170;"	d	file:
DEFINES	build/Makefile	/^DEFINES := $(BUILD_SCRIPT_DEFINES)$/;"	m
DEPDIR	build/Makefile	/^DEPDIR := deps$/;"	m
DEPENDENCIES	build/Makefile	/^DEPENDENCIES := $(foreach DEP, $(SOURCES), $(DEPDIR)\/$(notdir $(basename $(DEP))).d)$/;"	m
DefaultAction	include/planning/BestFirstSearchPlanner.h	/^	class DefaultAction {$/;"	c	namespace:SteerLib
DrawLib	include/util/DrawLib.h	/^	class UTIL_API DrawLib {$/;"	c	namespace:Util
DummyAIModule	include/modules/DummyAIModule.h	/^	class DummyAIModule : public SteerLib::ModuleInterface$/;"	c	namespace:SteerLib
DummyAgent	include/modules/DummyAIModule.h	/^	class DummyAgent : public SteerLib::AgentInterface$/;"	c	namespace:SteerLib
DumpPPM	src/FrameSaver.cpp	/^int Util::FrameSaver::DumpPPM(int width, int height)$/;"	f	class:Util::FrameSaver
DumpPPM	src/FrameSaver.cpp	/^void Util::FrameSaver::DumpPPM(FILE *fp, int width, int height)$/;"	f	class:Util::FrameSaver
DynamicLibrary	include/util/DynamicLibrary.h	/^    class UTIL_API DynamicLibrary$/;"	c	namespace:Util
DynamicLibrary	src/DynamicLibrary.cpp	/^DynamicLibrary::DynamicLibrary( const std::string & libraryName )$/;"	f	class:DynamicLibrary
DynamicLibrary	src/DynamicLibrary.cpp	/^DynamicLibrary::DynamicLibrary()$/;"	f	class:DynamicLibrary
ENABLE_GLFW	include/Globals.h	33;"	d
ENABLE_MULTITHREADING	include/Globals.h	31;"	d
ENGINE_STATE_CLEANING_UP	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_CLEANING_UP,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_FINISHED	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_FINISHED,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_INITIALIZING	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_INITIALIZING,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_LOADING_MODULE	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_LOADING_MODULE,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_LOADING_SIMULATION	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_LOADING_SIMULATION,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_NEW	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_NEW,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_POSTPROCESSING_SIMULATION	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_POSTPROCESSING_SIMULATION,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_PREPROCESSING_SIMULATION	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_PREPROCESSING_SIMULATION,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_READY	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_READY,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_SIMULATION_FINISHED	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_SIMULATION_FINISHED,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_SIMULATION_LOADED	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_SIMULATION_LOADED,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_SIMULATION_NO_MORE_UPDATES_ALLOWED	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_SIMULATION_NO_MORE_UPDATES_ALLOWED,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_SIMULATION_READY_FOR_UPDATE	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_SIMULATION_READY_FOR_UPDATE,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_UNLOADING_MODULE	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_UNLOADING_MODULE,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_UNLOADING_SIMULATION	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_UNLOADING_SIMULATION,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
ENGINE_STATE_UPDATING_SIMULATION	include/simulation/SimulationEngine.h	/^			ENGINE_STATE_UPDATING_SIMULATION,$/;"	e	enum:SteerLib::SimulationEngine::EngineStateEnum
E_S	include/benchmarking/AgentMetricsCollector.h	29;"	d
E_W	include/benchmarking/AgentMetricsCollector.h	30;"	d
EnergyEfficiencyBenchmarkTechnique	include/benchmarking/EnergyEfficiencyTechnique.h	/^	class STEERLIB_API EnergyEfficiencyBenchmarkTechnique : public SteerLib::BenchmarkTechniqueInterface$/;"	c	namespace:SteerLib
EngineControllerInterface	include/interfaces/EngineControllerInterface.h	/^	class STEERLIB_API EngineControllerInterface {$/;"	c	namespace:SteerLib
EngineInterface	include/interfaces/AgentInterface.h	/^	class STEERLIB_API EngineInterface;$/;"	m	namespace:SteerLib	typeref:class:SteerLib::STEERLIB_API
EngineInterface	include/interfaces/EngineInterface.h	/^	class STEERLIB_API EngineInterface {$/;"	c	namespace:SteerLib
EngineInterface	include/interfaces/ModuleInterface.h	/^	class STEERLIB_API EngineInterface;$/;"	m	namespace:SteerLib	typeref:class:SteerLib::STEERLIB_API
EngineOptions	include/simulation/SimulationOptions.h	/^		struct EngineOptions {$/;"	s	class:SteerLib::SimulationOptions
EngineStateEnum	include/simulation/SimulationEngine.h	/^		enum EngineStateEnum {$/;"	g	class:SteerLib::SimulationEngine
EngineStateMachineCallback	include/simulation/SimulationEngine.h	/^		class EngineStateMachineCallback : public Util::StateMachineCallbackInterface$/;"	c	class:SteerLib::SimulationEngine
EnvironmentMetrics	include/benchmarking/MetricsData.h	/^	class STEERLIB_API EnvironmentMetrics {$/;"	c	namespace:SteerLib
FILE_NAME_LENGTH	src/FrameSaver.cpp	10;"	d	file:
FOOT_REC	include/recfileio/RecFileIO.h	/^		FOOT_REC,$/;"	e	enum:SteerLib::REC_FORMAT
FORMAT_ERROR	include/recfileio/RecFileIO.h	/^		FORMAT_ERROR,$/;"	e	enum:SteerLib::REC_FORMAT
FrameSaver	include/util/FrameSaver.h	/^class  UTIL_API FrameSaver$/;"	c	namespace:Util
FrameSaver	src/FrameSaver.cpp	/^FrameSaver::FrameSaver()$/;"	f	class:FrameSaver
FrameSaver_h	include/util/FrameSaver.h	6;"	d
GLFWEngineDriverOptions	include/simulation/SimulationOptions.h	/^		struct GLFWEngineDriverOptions {$/;"	s	class:SteerLib::SimulationOptions
GOAL_TYPE_AXIS_ALIGNED_BOX_GOAL	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_AXIS_ALIGNED_BOX_GOAL$/;"	e	enum:SteerLib::AgentGoalTypeEnum
GOAL_TYPE_FLEE_DYNAMIC_TARGET	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_FLEE_DYNAMIC_TARGET, $/;"	e	enum:SteerLib::AgentGoalTypeEnum
GOAL_TYPE_FLEE_STATIC_TARGET	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_FLEE_STATIC_TARGET, $/;"	e	enum:SteerLib::AgentGoalTypeEnum
GOAL_TYPE_FLOW_DYNAMIC_DIRECTION	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_FLOW_DYNAMIC_DIRECTION, $/;"	e	enum:SteerLib::AgentGoalTypeEnum
GOAL_TYPE_FLOW_STATIC_DIRECTION	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_FLOW_STATIC_DIRECTION, $/;"	e	enum:SteerLib::AgentGoalTypeEnum
GOAL_TYPE_GROUP_TARGET	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_GROUP_TARGET,$/;"	e	enum:SteerLib::AgentGoalTypeEnum
GOAL_TYPE_IDLE	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_IDLE,$/;"	e	enum:SteerLib::AgentGoalTypeEnum
GOAL_TYPE_SEEK_DYNAMIC_TARGET	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_SEEK_DYNAMIC_TARGET, $/;"	e	enum:SteerLib::AgentGoalTypeEnum
GOAL_TYPE_SEEK_STATIC_TARGET	include/testcaseio/AgentInitialConditions.h	/^		GOAL_TYPE_SEEK_STATIC_TARGET, $/;"	e	enum:SteerLib::AgentGoalTypeEnum
GUIOptions	include/simulation/SimulationOptions.h	/^		struct GUIOptions {$/;"	s	class:SteerLib::SimulationOptions
GenericException	include/util/GenericException.h	/^		GenericException(const std::string & errorMessage) throw() { _errorMessage = errorMessage; }$/;"	f	class:Util::GenericException
GenericException	include/util/GenericException.h	/^	class UTIL_API GenericException : public std::exception$/;"	c	namespace:Util
GlobalOptions	include/simulation/SimulationOptions.h	/^		struct GlobalOptions {$/;"	s	class:SteerLib::SimulationOptions
GridCell	include/griddatabase/GridCell.h	/^	class STEERLIB_API GridCell {$/;"	c	namespace:SteerLib
GridDatabase2D	include/griddatabase/GridDatabase2D.h	/^	class STEERLIB_API GridDatabase2D : public GridDatabase2DPrivate {$/;"	c	namespace:SteerLib
GridDatabase2D	src/GridDatabase2D.cpp	/^GridDatabase2D::GridDatabase2D(const Point & origin2D, float xExtent, float zExtent, unsigned int numXCells, unsigned int numZCells, unsigned int maxItemsPerCell, bool drawGrid)$/;"	f	class:GridDatabase2D
GridDatabase2D	src/GridDatabase2D.cpp	/^GridDatabase2D::GridDatabase2D(float xmin, float xmax, float zmin, float zmax, unsigned int numXCells, unsigned int numZCells, unsigned int maxItemsPerCell, bool drawGrid)$/;"	f	class:GridDatabase2D
GridDatabase2DPrivate	include/griddatabase/GridDatabase2DPrivate.h	/^		GridDatabase2DPrivate() { } $/;"	f	class:SteerLib::GridDatabase2DPrivate
GridDatabase2DPrivate	include/griddatabase/GridDatabase2DPrivate.h	/^	class STEERLIB_API GridDatabase2DPrivate {$/;"	c	namespace:SteerLib
GridDatabaseOptions	include/simulation/SimulationOptions.h	/^		struct GridDatabaseOptions {$/;"	s	class:SteerLib::SimulationOptions
GridDatabasePlanningDomain	include/griddatabase/GridDatabasePlanningDomain.h	/^		GridDatabasePlanningDomain(SteerLib::GridDatabase2D * spatialDatabase) : _spatialDatabase(spatialDatabase) {  }$/;"	f	class:SteerLib::GridDatabasePlanningDomain
GridDatabasePlanningDomain	include/griddatabase/GridDatabasePlanningDomain.h	/^	class STEERLIB_API GridDatabasePlanningDomain {$/;"	c	namespace:SteerLib
INCLUDES	build/Makefile	/^INCLUDES := $(STEERLIB_INCLUDES)$/;"	m
INFINITY	include/util/Geometry.h	30;"	d
INTERPOLATE_TIME	include/simulation/Camera.h	/^			static const float INTERPOLATE_TIME;$/;"	m	class:SteerLib::Camera
INTERPOLATE_TIME	src/Camera.cpp	/^const float Camera::INTERPOLATE_TIME = 0.7f;$/;"	m	class:Camera	file:
KEY_PRESSED	include/simulation/SimulationEngine.h	19;"	d
KEY_PRESSED	src/RecFilePlayerModule.cpp	18;"	d	file:
KeyboardBindings	include/simulation/SimulationOptions.h	/^		struct KeyboardBindings {$/;"	s	class:SteerLib::SimulationOptions
LD	build/Makefile	/^LD := clang++$/;"	m
LD	build/Makefile	/^LD := g++$/;"	m
LFLAGS	build/Makefile	/^LFLAGS := $(STEERLIB_LFLAGS) $/;"	m
LOCOMOTION_MODE_COMMAND	include/simulation/SteeringCommand.h	/^		enum LocomotionType { LOCOMOTION_MODE_COMMAND, LOCOMOTION_MODE_DYNAMICS, LOCOMOTION_MODE_SPACETIMEPATH };$/;"	e	enum:SteerLib::SteeringCommand::LocomotionType
LOCOMOTION_MODE_DYNAMICS	include/simulation/SteeringCommand.h	/^		enum LocomotionType { LOCOMOTION_MODE_COMMAND, LOCOMOTION_MODE_DYNAMICS, LOCOMOTION_MODE_SPACETIMEPATH };$/;"	e	enum:SteerLib::SteeringCommand::LocomotionType
LOCOMOTION_MODE_SPACETIMEPATH	include/simulation/SteeringCommand.h	/^		enum LocomotionType { LOCOMOTION_MODE_COMMAND, LOCOMOTION_MODE_DYNAMICS, LOCOMOTION_MODE_SPACETIMEPATH };$/;"	e	enum:SteerLib::SteeringCommand::LocomotionType
LocomotionType	include/simulation/SteeringCommand.h	/^		enum LocomotionType { LOCOMOTION_MODE_COMMAND, LOCOMOTION_MODE_DYNAMICS, LOCOMOTION_MODE_SPACETIMEPATH };$/;"	g	class:SteerLib::SteeringCommand
MASS	include/benchmarking/AgentMetricsCollector.h	31;"	d
MILLS	src/PerformanceProfiler.cpp	14;"	d	file:
MI_LOG2E	include/util/dmatrix.h	11;"	d
MI_PI	include/util/dmatrix.h	12;"	d
M_180_OVER_PI	include/util/Geometry.h	37;"	d
M_2_PI	include/util/Geometry.h	34;"	d
M_PI	include/util/Geometry.h	33;"	d
M_PI_OVER_180	include/util/Geometry.h	36;"	d
M_PI_OVER_2	include/util/Geometry.h	35;"	d
Matrix	include/util/dmatrix.h	/^  inline Matrix() {$/;"	f	class:Matrix
Matrix	include/util/dmatrix.h	/^  inline Matrix(const Matrix& q) {$/;"	f	class:Matrix
Matrix	include/util/dmatrix.h	/^  inline Matrix(const std::vector<std::vector<double>> & data)$/;"	f	class:Matrix
Matrix	include/util/dmatrix.h	/^  inline Matrix(size_t numRows) {$/;"	f	class:Matrix
Matrix	include/util/dmatrix.h	/^  inline Matrix(size_t numRows, size_t numColumns) {$/;"	f	class:Matrix
Matrix	include/util/dmatrix.h	/^class Matrix {$/;"	c
MemoryMapper	include/util/MemoryMapper.h	/^	class UTIL_API MemoryMapper {$/;"	c	namespace:Util
MemoryMapper	src/MemoryMapper.cpp	/^MemoryMapper::MemoryMapper()$/;"	f	class:MemoryMapper
MetricsCollectorModule	include/modules/MetricsCollectorModule.h	/^	class MetricsCollectorModule : public SteerLib::ModuleInterface$/;"	c	namespace:SteerLib
ModuleInterface	include/interfaces/ModuleInterface.h	/^	class STEERLIB_API ModuleInterface {$/;"	c	namespace:SteerLib
ModuleMetaInformation	include/interfaces/EngineInterface.h	/^	struct ModuleMetaInformation$/;"	s	namespace:SteerLib
ModuleOptionsDatabase	include/interfaces/ModuleInterface.h	/^	typedef std::map< std::string, OptionDictionary >  ModuleOptionsDatabase;$/;"	t	namespace:SteerLib
ModuleOptionsXMLParser	include/simulation/SimulationOptions.h	/^	class STEERLIB_API ModuleOptionsXMLParser : public Util::XMLParserCallbackInterface {$/;"	c	namespace:SteerLib
MouseBindings	include/simulation/SimulationOptions.h	/^		struct MouseBindings {$/;"	s	class:SteerLib::SimulationOptions
Mutex	include/util/Mutex.h	/^		Mutex() {$/;"	f	class:Util::Mutex
Mutex	include/util/Mutex.h	/^	class UTIL_API Mutex {$/;"	c	namespace:Util
OBJDIR	build/Makefile	/^OBJDIR := objs$/;"	m
OBJECTS	build/Makefile	/^OBJECTS := $(foreach OBJ, $(SOURCES), $(OBJDIR)\/$(notdir $(basename $(OBJ))).o)$/;"	m
OPEN_ERROR	include/recfileio/RecFileIO.h	/^		OPEN_ERROR,$/;"	e	enum:SteerLib::REC_FORMAT
OPTION_DATA_TYPE_DOUBLE	include/util/CommandLineParser.h	/^		OPTION_DATA_TYPE_DOUBLE,$/;"	e	enum:Util::CommandLineOptionTypeEnum
OPTION_DATA_TYPE_FLOAT	include/util/CommandLineParser.h	/^		OPTION_DATA_TYPE_FLOAT,$/;"	e	enum:Util::CommandLineOptionTypeEnum
OPTION_DATA_TYPE_MULTI_INSTANCE_STRING	include/util/CommandLineParser.h	/^		OPTION_DATA_TYPE_MULTI_INSTANCE_STRING,$/;"	e	enum:Util::CommandLineOptionTypeEnum
OPTION_DATA_TYPE_NO_DATA	include/util/CommandLineParser.h	/^		OPTION_DATA_TYPE_NO_DATA,$/;"	e	enum:Util::CommandLineOptionTypeEnum
OPTION_DATA_TYPE_SIGNED_INT	include/util/CommandLineParser.h	/^		OPTION_DATA_TYPE_SIGNED_INT,$/;"	e	enum:Util::CommandLineOptionTypeEnum
OPTION_DATA_TYPE_STRING	include/util/CommandLineParser.h	/^		OPTION_DATA_TYPE_STRING,$/;"	e	enum:Util::CommandLineOptionTypeEnum
OPTION_DATA_TYPE_UNSIGNED_INT	include/util/CommandLineParser.h	/^		OPTION_DATA_TYPE_UNSIGNED_INT,$/;"	e	enum:Util::CommandLineOptionTypeEnum
ObstacleInitialConditions	include/testcaseio/ObstacleInitialConditions.h	/^	struct ObstacleInitialConditions {$/;"	s	namespace:SteerLib
ObstacleInterface	include/interfaces/ObstacleInterface.h	/^	class STEERLIB_API ObstacleInterface : public SteerLib::SpatialDatabaseItem {$/;"	c	namespace:SteerLib
OptionDictionary	include/interfaces/ModuleInterface.h	/^	typedef std::map<std::string, std::string> OptionDictionary;$/;"	t	namespace:SteerLib
OptionInfo	include/util/CommandLineParser.h	/^		struct OptionInfo {$/;"	s	class:Util::CommandLineParser
OrientedBoxObstacle	include/obstacles/OrientedBoxObstacle.h	/^	class STEERLIB_API OrientedBoxObstacle : public SteerLib::ObstacleInterface$/;"	c	namespace:SteerLib
OrientedBoxObstacle	src/OrientedBoxObstacle.cpp	/^OrientedBoxObstacle::OrientedBoxObstacle ( Util::Point centerPosition, float lengthX, float lengthZ, $/;"	f	class:OrientedBoxObstacle
OrientedBoxObstacleInitialConditions	include/testcaseio/ObstacleInitialConditions.h	/^	struct OrientedBoxObstacleInitialConditions : public ObstacleInitialConditions {$/;"	s	namespace:SteerLib
OrientedWallObstacle	include/obstacles/OrientedWallObstacle.h	/^	class STEERLIB_API OrientedWallObstacle : public SteerLib::OrientedBoxObstacle$/;"	c	namespace:SteerLib
OrientedWallObstacle	src/OrientedWallObstacle.cpp	/^OrientedWallObstacle::OrientedWallObstacle ( Util::Point centerPosition, float lengthX, float lengthZ,$/;"	f	class:OrientedWallObstacle
OrientedWallObstacleInitialConditions	include/testcaseio/ObstacleInitialConditions.h	/^	struct OrientedWallObstacleInitialConditions : public OrientedBoxObstacleInitialConditions {$/;"	s	namespace:SteerLib
PLUGIN_API	include/SimulationPlugin.h	31;"	d
PLUGIN_API	include/SimulationPlugin.h	33;"	d
PLUGIN_API	include/SteerSimPlugin.h	35;"	d
PLUGIN_API	include/SteerSimPlugin.h	37;"	d
PerformanceProfiler	include/util/PerformanceProfiler.h	/^	class UTIL_API PerformanceProfiler$/;"	c	namespace:Util
PerformanceProfiler	src/PerformanceProfiler.cpp	/^PerformanceProfiler::PerformanceProfiler()$/;"	f	class:PerformanceProfiler
Plane	include/util/Geometry.h	/^	class UTIL_API Plane$/;"	c	namespace:Util
PlanningDomainBase	include/planning/BestFirstSearchPlanner.h	/^	class PlanningDomainBase {$/;"	c	namespace:SteerLib
Point	include/util/Geometry.h	/^		Point() : x(0.0f), y(0.0f), z(0.0f) { }$/;"	f	class:Util::Point
Point	include/util/Geometry.h	/^		Point(float newx, float newy, float newz) : x(newx), y(newy), z(newz) { }$/;"	f	class:Util::Point
Point	include/util/Geometry.h	/^	class UTIL_API Point {$/;"	c	namespace:Util
Position	include/util/Geometry.h	/^		Point Position()$/;"	f	class:Util::Circle
QtEngineDriverOptions	include/simulation/SimulationOptions.h	/^		struct QtEngineDriverOptions {$/;"	s	class:SteerLib::SimulationOptions
RECFILE_MAGIC_NUMBER	include/recfileio/RecFileIOPrivate.h	/^	const unsigned int RECFILE_MAGIC_NUMBER   = 0x0f8c2951;$/;"	m	namespace:SteerLib
REC_FORMAT	include/recfileio/RecFileIO.h	/^	enum REC_FORMAT {$/;"	g	namespace:SteerLib
Radius	include/util/Geometry.h	/^		float Radius()$/;"	f	class:Util::Circle
RawAgentInfo	include/testcaseio/TestCaseIOPrivate.h	/^ 	class STEERLIB_API RawAgentInfo : public SpatialDatabaseItem {$/;"	c	namespace:SteerLib
RawBoxObstacleInfo	include/testcaseio/TestCaseIOPrivate.h	/^	class STEERLIB_API RawBoxObstacleInfo : public RawObstacleInfo {$/;"	c	namespace:SteerLib
RawCircleObstacleInfo	include/testcaseio/TestCaseIOPrivate.h	/^	class STEERLIB_API RawCircleObstacleInfo : public RawObstacleInfo {$/;"	c	namespace:SteerLib
RawObstacleInfo	include/testcaseio/TestCaseIOPrivate.h	/^	class STEERLIB_API RawObstacleInfo : public SpatialDatabaseItem {$/;"	c	namespace:SteerLib
RawOrientedBoxObstacleInfo	include/testcaseio/TestCaseIOPrivate.h	/^	class STEERLIB_API RawOrientedBoxObstacleInfo : public RawObstacleInfo {$/;"	c	namespace:SteerLib
RawOrientedWallObstacleInfo	include/testcaseio/TestCaseIOPrivate.h	/^	class STEERLIB_API RawOrientedWallObstacleInfo : public RawOrientedBoxObstacleInfo {$/;"	c	namespace:SteerLib
Ray	include/util/Geometry.h	/^	class UTIL_API Ray$/;"	c	namespace:Util
RecFileAgentInfo	include/recfileio/RecFileIOPrivate.h	/^	struct RecFileAgentInfo {$/;"	s	namespace:SteerLib
RecFileBoxData	include/recfileio/RecFileIOPrivate.h	/^	struct RecFileBoxData {$/;"	s	namespace:SteerLib
RecFileCameraInfo	include/recfileio/RecFileIOPrivate.h	/^	struct RecFileCameraInfo {$/;"	s	namespace:SteerLib
RecFileFrameInfo	include/recfileio/RecFileIOPrivate.h	/^	struct RecFileFrameInfo {$/;"	s	namespace:SteerLib
RecFileHeader	include/recfileio/RecFileIOPrivate.h	/^	struct RecFileHeader {$/;"	s	namespace:SteerLib
RecFileObstacleInfo	include/recfileio/RecFileIOPrivate.h	/^	struct RecFileObstacleInfo {$/;"	s	namespace:SteerLib
RecFilePlayerModule	include/modules/RecFilePlayerModule.h	/^	class RecFilePlayerModule : public SteerLib::ModuleInterface$/;"	c	namespace:SteerLib
RecFilePointData	include/recfileio/RecFileIOPrivate.h	/^	struct RecFilePointData {$/;"	s	namespace:SteerLib
RecFileReader	include/recfileio/RecFileIO.h	/^	class STEERLIB_API RecFileReader : public RecFileReaderPrivate {$/;"	c	namespace:SteerLib
RecFileReader	src/RecFileReader.cpp	/^RecFileReader::RecFileReader()$/;"	f	class:RecFileReader
RecFileReader	src/RecFileReader.cpp	/^RecFileReader::RecFileReader(const std::string & filename)$/;"	f	class:RecFileReader
RecFileReaderPrivate	include/recfileio/RecFileIOPrivate.h	/^		RecFileReaderPrivate() { }$/;"	f	class:SteerLib::RecFileReaderPrivate
RecFileReaderPrivate	include/recfileio/RecFileIOPrivate.h	/^	class STEERLIB_API RecFileReaderPrivate {$/;"	c	namespace:SteerLib
RecFileVectorData	include/recfileio/RecFileIOPrivate.h	/^	struct RecFileVectorData {$/;"	s	namespace:SteerLib
RecFileWriter	include/recfileio/RecFileIO.h	/^	class STEERLIB_API RecFileWriter : public RecFileWriterPrivate {$/;"	c	namespace:SteerLib
RecFileWriter	src/RecFileWriter.cpp	/^RecFileWriter::RecFileWriter()$/;"	f	class:RecFileWriter
RecFileWriterPrivate	include/recfileio/RecFileIOPrivate.h	/^		RecFileWriterPrivate() { }$/;"	f	class:SteerLib::RecFileWriterPrivate
RecFileWriterPrivate	include/recfileio/RecFileIOPrivate.h	/^	class STEERLIB_API RecFileWriterPrivate {$/;"	c	namespace:SteerLib
ReplayAgent	include/modules/RecFilePlayerModule.h	/^	class ReplayAgent : public SteerLib::AgentInterface$/;"	c	namespace:SteerLib
SHADOW_REC	include/recfileio/RecFileIO.h	/^		SHADOW_REC$/;"	e	enum:SteerLib::REC_FORMAT
SHELL	build/Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	build/Makefile	/^SOURCES := $(foreach DIR, $(SOURCE_DIRS), $(wildcard $(DIR)\/*.c) $(wildcard $(DIR)\/*.C) $(wildcard $(DIR)\/*.cc) $(wildcard $(DIR)\/*.cpp) $(wildcard $(DIR)\/*.cxx))$/;"	m
SOURCE_DIRS	build/Makefile	/^SOURCE_DIRS := ..\/src\/ ..\/..\/external\/tinyxml\/$/;"	m
STATE_MACHINE_KEY	src/StateMachine.cpp	13;"	d	file:
STD_REC	include/recfileio/RecFileIO.h	/^		STD_REC,	\/\/this was put here for backwards compatibility$/;"	e	enum:SteerLib::REC_FORMAT
STEERLIB_API	include/Globals.h	18;"	d
STEERLIB_API	include/Globals.h	21;"	d
STEERLIB_API	include/Globals.h	25;"	d
SimulationEngine	include/simulation/SimulationEngine.h	/^	class STEERLIB_API SimulationEngine : public EngineInterface {$/;"	c	namespace:SteerLib
SimulationEngine	src/SimulationEngine.cpp	/^SimulationEngine::SimulationEngine()$/;"	f	class:SimulationEngine
SimulationMetricsCollector	include/benchmarking/SimulationMetricsCollector.h	/^    class STEERLIB_API SimulationMetricsCollector$/;"	c	namespace:SteerLib
SimulationMetricsCollector	src/SimulationMetricsCollector.cpp	/^SimulationMetricsCollector::SimulationMetricsCollector( const std::vector<SteerLib::AgentInterface*> & agents )$/;"	f	class:SimulationMetricsCollector
SimulationOptions	include/simulation/SimulationOptions.h	/^	class STEERLIB_API SimulationOptions {$/;"	c	namespace:SteerLib
SimulationOptions	src/SimulationOptions.cpp	/^SimulationOptions::SimulationOptions()$/;"	f	class:SimulationOptions
SimulationRecorderModule	include/modules/SimulationRecorderModule.h	/^	class SimulationRecorderModule : public SteerLib::ModuleInterface$/;"	c	namespace:SteerLib
SpatialDatabaseItem	include/griddatabase/GridCell.h	/^	class STEERLIB_API SpatialDatabaseItem;$/;"	m	namespace:SteerLib	typeref:class:SteerLib::STEERLIB_API
SpatialDatabaseItem	include/interfaces/SpatialDatabaseItem.h	/^	class STEERLIB_API SpatialDatabaseItem {$/;"	c	namespace:SteerLib
SpatialDatabaseItemPtr	include/griddatabase/GridCell.h	/^	typedef SpatialDatabaseItem* SpatialDatabaseItemPtr;$/;"	t	namespace:SteerLib
SpatialDatabaseItemPtr	include/interfaces/SpatialDatabaseItem.h	/^	typedef SpatialDatabaseItem* SpatialDatabaseItemPtr;$/;"	t	namespace:SteerLib
StartRecord	src/FrameSaver.cpp	/^void Util::FrameSaver::StartRecord(int width)$/;"	f	class:Util::FrameSaver
StartupModulesXMLParser	include/simulation/SimulationOptions.h	/^	class STEERLIB_API StartupModulesXMLParser : public Util::XMLParserCallbackInterface {$/;"	c	namespace:SteerLib
StateMachine	include/util/StateMachine.h	/^	class UTIL_API StateMachine {$/;"	c	namespace:Util
StateMachine	src/StateMachine.cpp	/^StateMachine::StateMachine()$/;"	f	class:StateMachine
StateMachineCallbackInterface	include/util/StateMachine.h	/^	class UTIL_API StateMachineCallbackInterface$/;"	c	namespace:Util
SteerBenchModule	include/modules/SteerBenchModule.h	/^	class SteerBenchModule : public SteerLib::ModuleInterface$/;"	c	namespace:SteerLib
SteerBugModule	include/modules/SteerBugModule.h	/^	class SteerBugModule : public SteerLib::ModuleInterface$/;"	c	namespace:SteerLib
SteerLib	include/benchmarking/AccelerationEfficiencyTechnique.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/AgentMetricsCollector.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/BenchmarkEngine.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/BenchmarkEnginePrivate.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/CompositeTechnique01.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/CompositeTechnique02.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/CompositeTechniqueGraph.h	/^namespace SteerLib$/;"	n
SteerLib	include/benchmarking/CompositeTechniquePLE.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/EnergyEfficiencyTechnique.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/MetricsData.h	/^namespace SteerLib {$/;"	n
SteerLib	include/benchmarking/SimulationMetricsCollector.h	/^namespace SteerLib {$/;"	n
SteerLib	include/griddatabase/GridCell.h	/^namespace SteerLib {$/;"	n
SteerLib	include/griddatabase/GridDatabase2D.h	/^namespace SteerLib {$/;"	n
SteerLib	include/griddatabase/GridDatabase2DPrivate.h	/^namespace SteerLib {$/;"	n
SteerLib	include/griddatabase/GridDatabasePlanningDomain.h	/^namespace SteerLib {$/;"	n
SteerLib	include/interfaces/AgentInterface.h	/^namespace SteerLib {$/;"	n
SteerLib	include/interfaces/BenchmarkTechniqueInterface.h	/^namespace SteerLib {$/;"	n
SteerLib	include/interfaces/EngineControllerInterface.h	/^namespace SteerLib {$/;"	n
SteerLib	include/interfaces/EngineInterface.h	/^namespace SteerLib {$/;"	n
SteerLib	include/interfaces/ModuleInterface.h	/^namespace SteerLib {$/;"	n
SteerLib	include/interfaces/ObstacleInterface.h	/^namespace SteerLib {$/;"	n
SteerLib	include/interfaces/SpatialDatabaseItem.h	/^namespace SteerLib {$/;"	n
SteerLib	include/modules/DummyAIModule.h	/^namespace SteerLib {$/;"	n
SteerLib	include/modules/MetricsCollectorModule.h	/^namespace SteerLib {$/;"	n
SteerLib	include/modules/RecFilePlayerModule.h	/^namespace SteerLib$/;"	n
SteerLib	include/modules/SimulationRecorderModule.h	/^namespace SteerLib {$/;"	n
SteerLib	include/modules/SteerBenchModule.h	/^namespace SteerLib {$/;"	n
SteerLib	include/modules/SteerBugModule.h	/^namespace SteerLib {$/;"	n
SteerLib	include/modules/TestCasePlayerModule.h	/^namespace SteerLib {$/;"	n
SteerLib	include/obstacles/BoxObstacle.h	/^namespace SteerLib {$/;"	n
SteerLib	include/obstacles/CircleObstacle.h	/^namespace SteerLib {$/;"	n
SteerLib	include/obstacles/OrientedBoxObstacle.h	/^namespace SteerLib {$/;"	n
SteerLib	include/obstacles/OrientedWallObstacle.h	/^namespace SteerLib$/;"	n
SteerLib	include/planning/BestFirstSearchPlanner.h	/^namespace SteerLib {$/;"	n
SteerLib	include/recfileio/RecFileIO.h	/^namespace SteerLib {$/;"	n
SteerLib	include/recfileio/RecFileIOPrivate.h	/^namespace SteerLib {$/;"	n
SteerLib	include/simulation/Camera.h	/^namespace SteerLib {$/;"	n
SteerLib	include/simulation/Clock.h	/^namespace SteerLib {$/;"	n
SteerLib	include/simulation/SimulationEngine.h	/^namespace SteerLib {$/;"	n
SteerLib	include/simulation/SimulationOptions.h	/^namespace SteerLib {$/;"	n
SteerLib	include/simulation/SteeringCommand.h	/^namespace SteerLib {$/;"	n
SteerLib	include/testcaseio/AgentInitialConditions.h	/^namespace SteerLib {$/;"	n
SteerLib	include/testcaseio/Behaviour.h	/^namespace SteerLib $/;"	n
SteerLib	include/testcaseio/BehaviourParameter.h	/^namespace SteerLib $/;"	n
SteerLib	include/testcaseio/ObstacleInitialConditions.h	/^namespace SteerLib {$/;"	n
SteerLib	include/testcaseio/TestCaseIO.h	/^namespace SteerLib {$/;"	n
SteerLib	include/testcaseio/TestCaseIOPrivate.h	/^namespace SteerLib {$/;"	n
SteeringCommand	include/simulation/SteeringCommand.h	/^	class STEERLIB_API SteeringCommand {$/;"	c	namespace:SteerLib
TARGET_NAME	build/Makefile	/^TARGET_NAME := libsteer.so$/;"	m
TARGET_TYPE	build/Makefile	/^TARGET_TYPE := sharedLibrary$/;"	m
Task	include/util/ThreadedTaskManager.h	/^	struct Task {$/;"	s	namespace:Util
TaskFunctionPtr	include/util/ThreadedTaskManager.h	/^	typedef void (*TaskFunctionPtr)(unsigned int threadIndex, void * data);$/;"	t	namespace:Util
TestCaseHeader	include/testcaseio/TestCaseIOPrivate.h	/^	class STEERLIB_API TestCaseHeader {$/;"	c	namespace:SteerLib
TestCasePlayerModule	include/modules/TestCasePlayerModule.h	/^	class TestCasePlayerModule : public SteerLib::ModuleInterface$/;"	c	namespace:SteerLib
TestCaseReader	include/testcaseio/TestCaseIO.h	/^	class STEERLIB_API TestCaseReader : public TestCaseReaderPrivate {$/;"	c	namespace:SteerLib
TestCaseReader	src/TestCaseReader.cpp	/^TestCaseReader::TestCaseReader()$/;"	f	class:TestCaseReader
TestCaseReaderPrivate	include/testcaseio/TestCaseIOPrivate.h	/^		TestCaseReaderPrivate() { }$/;"	f	class:SteerLib::TestCaseReaderPrivate
TestCaseReaderPrivate	include/testcaseio/TestCaseIOPrivate.h	/^	class STEERLIB_API TestCaseReaderPrivate {$/;"	c	namespace:SteerLib
TestCaseWriter	include/testcaseio/TestCaseIO.h	/^    class STEERLIB_API TestCaseWriter {$/;"	c	namespace:SteerLib
TestCaseWriter	src/TestCaseWriter.cpp	/^TestCaseWriter::TestCaseWriter()$/;"	f	class:TestCaseWriter
ThreadedTaskManager	include/util/ThreadedTaskManager.h	/^	class UTIL_API ThreadedTaskManager {$/;"	c	namespace:Util
ThreadedTaskManager	src/ThreadedTaskManager.cpp	/^ThreadedTaskManager::ThreadedTaskManager(unsigned int numThreads)$/;"	f	class:ThreadedTaskManager
UTIL_API	include/Globals.h	19;"	d
UTIL_API	include/Globals.h	22;"	d
UTIL_API	include/Globals.h	26;"	d
Util	build/win32/AnimationCurve.h	/^namespace Util {$/;"	n
Util	include/util/Color.h	/^namespace Util {$/;"	n
Util	include/util/CommandLineParser.h	/^namespace Util {$/;"	n
Util	include/util/Curve.h	/^namespace Util {$/;"	n
Util	include/util/DrawLib.h	/^namespace Util {$/;"	n
Util	include/util/DynamicLibrary.h	/^namespace Util {$/;"	n
Util	include/util/FrameSaver.h	/^namespace Util {$/;"	n
Util	include/util/GenericException.h	/^namespace Util {$/;"	n
Util	include/util/Geometry.h	/^namespace Util {$/;"	n
Util	include/util/HighResCounter.h	/^namespace Util {$/;"	n
Util	include/util/MemoryMapper.h	/^namespace Util {$/;"	n
Util	include/util/Misc.h	/^namespace Util {$/;"	n
Util	include/util/Mutex.h	/^namespace Util {$/;"	n
Util	include/util/PerformanceProfiler.h	/^namespace Util {$/;"	n
Util	include/util/StateMachine.h	/^namespace Util {$/;"	n
Util	include/util/ThreadedTaskManager.h	/^namespace Util {$/;"	n
Util	include/util/XMLParser.h	/^namespace Util {$/;"	n
Util	include/util/XMLParserPrivate.h	/^namespace Util {$/;"	n
Vector	include/util/Geometry.h	/^		Vector() : x(0.0f), y(0.0f), z(0.0f) { }$/;"	f	class:Util::Vector
Vector	include/util/Geometry.h	/^		Vector(float newx, float newy, float newz) : x(newx), y(newy), z(newz) { }$/;"	f	class:Util::Vector
Vector	include/util/Geometry.h	/^	class UTIL_API Vector {$/;"	c	namespace:Util
WIN32_LEAN_AND_MEAN	include/util/DrawLib.h	15;"	d
WIN32_LEAN_AND_MEAN	include/util/DynamicLibrary.h	21;"	d
WIN32_LEAN_AND_MEAN	include/util/HighResCounter.h	14;"	d
WIN32_LEAN_AND_MEAN	include/util/Mutex.h	13;"	d
WIN32_LEAN_AND_MEAN	include/util/ThreadedTaskManager.h	22;"	d
WIN32_LEAN_AND_MEAN	src/DynamicLibrary.cpp	14;"	d	file:
WIN32_LEAN_AND_MEAN	src/MemoryMapper.cpp	15;"	d	file:
WIN32_MEAN_AND_LEAN	include/util/Misc.h	13;"	d
WINDOW_SIZE	include/benchmarking/MetricsData.h	166;"	d
XMLParser	include/util/XMLParser.h	/^		XMLParser() { _rootTag = NULL; }$/;"	f	class:Util::XMLParser
XMLParser	include/util/XMLParser.h	/^	class UTIL_API XMLParser : public XMLParserPrivate {$/;"	c	namespace:Util
XMLParserCallbackInterface	include/util/XMLParser.h	/^	class UTIL_API XMLParserCallbackInterface {$/;"	c	namespace:Util
XMLParserCallbackInterface	include/util/XMLParserPrivate.h	/^	class UTIL_API XMLParserCallbackInterface;$/;"	m	namespace:Util	typeref:class:Util::UTIL_API
XMLParserPrivate	include/util/XMLParserPrivate.h	/^	class UTIL_API XMLParserPrivate {$/;"	c	namespace:Util
XMLTag	include/util/XMLParser.h	/^	class UTIL_API XMLTag : public XMLTagPrivate {$/;"	c	namespace:Util
XMLTag	include/util/XMLParser.h	/^	class UTIL_API XMLTag;  $/;"	m	namespace:Util	typeref:class:Util::UTIL_API
XMLTag	include/util/XMLParserPrivate.h	/^	class UTIL_API XMLTag;$/;"	m	namespace:Util	typeref:class:Util::UTIL_API
XMLTag	src/XMLParser.cpp	/^XMLTag::XMLTag(const std::string & tagName, const std::string & description, XMLTagTypeEnum tagDataType, void * dataTarget, XMLParserCallbackInterface * callbackInterface)$/;"	f	class:XMLTag
XMLTagPrivate	include/util/XMLParserPrivate.h	/^	class UTIL_API XMLTagPrivate {$/;"	c	namespace:Util
XMLTagTypeEnum	include/util/XMLParserPrivate.h	/^	enum XMLTagTypeEnum {$/;"	g	namespace:Util
XML_DATA_TYPE_BOOLEAN	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_BOOLEAN,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_BOUNDING_BOX	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_BOUNDING_BOX $/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_CONTAINER	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_CONTAINER,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_DOUBLE	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_DOUBLE,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_FLOAT	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_FLOAT,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_NO_DATA	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_NO_DATA,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_RGB	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_RGB,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_SIGNED_INT	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_SIGNED_INT,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_STRING	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_STRING,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_UNSIGNED_INT	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_UNSIGNED_INT,$/;"	e	enum:Util::XMLTagTypeEnum
XML_DATA_TYPE_XYZ	include/util/XMLParserPrivate.h	/^		XML_DATA_TYPE_XYZ,$/;"	e	enum:Util::XMLTagTypeEnum
_B0	include/util/dmatrix.h	782;"	d
_B1	include/util/dmatrix.h	783;"	d
_B2	include/util/dmatrix.h	784;"	d
_B3	include/util/dmatrix.h	785;"	d
_B4	include/util/dmatrix.h	786;"	d
_B5	include/util/dmatrix.h	787;"	d
_B6	include/util/dmatrix.h	788;"	d
_B7	include/util/dmatrix.h	789;"	d
_NORMLIM	include/util/dmatrix.h	790;"	d
_USE_MATH_DEFINES	include/util/dmatrix.h	8;"	d
_UTIL_GEOMETRY_EPSILON	include/util/Geometry.h	27;"	d
__BAYESIANFILTER_H__	include/benchmarking/BayesianFilter.h	132;"	d
__MATRIX_H__	include/util/dmatrix.h	6;"	d
__STEERLIB_ACCELERATION_EFFICIENCY_TECHNIQUE_H__	include/benchmarking/AccelerationEfficiencyTechnique.h	7;"	d
__STEERLIB_AGENT_INITIAL_CONDITIONS_H__	include/testcaseio/AgentInitialConditions.h	7;"	d
__STEERLIB_AGENT_INTERFACE_H__	include/interfaces/AgentInterface.h	7;"	d
__STEERLIB_AGENT_METRICS_COLLECTOR_H__	include/benchmarking/AgentMetricsCollector.h	7;"	d
__STEERLIB_BENCHMARK_ENGINE_H__	include/benchmarking/BenchmarkEngine.h	7;"	d
__STEERLIB_BENCHMARK_ENGINE_PRIVATE_H__	include/benchmarking/BenchmarkEnginePrivate.h	7;"	d
__STEERLIB_BENCHMARK_TECHNIQUE_INTERFACE_H__	include/interfaces/BenchmarkTechniqueInterface.h	7;"	d
__STEERLIB_BEST_FIRST_SEARCH_PLANNER_H__	include/planning/BestFirstSearchPlanner.h	8;"	d
__STEERLIB_BOX_OBSTACLE_H__	include/obstacles/BoxObstacle.h	7;"	d
__STEERLIB_CAMERA_H__	include/simulation/Camera.h	8;"	d
__STEERLIB_CIRCLE_OBSTACLE_H__	include/obstacles/CircleObstacle.h	7;"	d
__STEERLIB_CLOCK_H__	include/simulation/Clock.h	7;"	d
__STEERLIB_COMPOSITE_TECHNIQUE_01_H__	include/benchmarking/CompositeTechnique01.h	7;"	d
__STEERLIB_COMPOSITE_TECHNIQUE_02_H__	include/benchmarking/CompositeTechnique02.h	7;"	d
__STEERLIB_COMPOSITE_TECHNIQUE_PLE_H__	include/benchmarking/CompositeTechniquePLE.h	7;"	d
__STEERLIB_DUMMY_AI_MODULE_H__	include/modules/DummyAIModule.h	7;"	d
__STEERLIB_ENERGY_EFFICIENCY_TECHNIQUE_H__	include/benchmarking/EnergyEfficiencyTechnique.h	7;"	d
__STEERLIB_ENGINE_CONTROLLER_INTERFACE_H__	include/interfaces/EngineControllerInterface.h	7;"	d
__STEERLIB_ENGINE_INTERFACE_H__	include/interfaces/EngineInterface.h	7;"	d
__STEERLIB_GLOBALS_H__	include/Globals.h	7;"	d
__STEERLIB_GRID_CELL_H__	include/griddatabase/GridCell.h	7;"	d
__STEERLIB_GRID_DATABASE_H__	include/griddatabase/GridDatabase2D.h	7;"	d
__STEERLIB_GRID_DATABASE_PLANNING_DOMAIN_H__	include/griddatabase/GridDatabasePlanningDomain.h	7;"	d
__STEERLIB_GRID_DATABASE_PRIVATE_H__	include/griddatabase/GridDatabase2DPrivate.h	7;"	d
__STEERLIB_H__	include/SteerLib.h	7;"	d
__STEERLIB_METRICS_COLLECTOR_MODULE_H__	include/modules/MetricsCollectorModule.h	7;"	d
__STEERLIB_METRICS_DATA_H__	include/benchmarking/MetricsData.h	7;"	d
__STEERLIB_MODULE_INTERFACE_H__	include/interfaces/ModuleInterface.h	7;"	d
__STEERLIB_OBSTACLE_INITIAL_CONDITIONS_H__	include/testcaseio/ObstacleInitialConditions.h	7;"	d
__STEERLIB_OBSTACLE_INTERFACE_H__	include/interfaces/ObstacleInterface.h	7;"	d
__STEERLIB_ORIENTED_BOX_OBSTACLE_H__	include/obstacles/OrientedBoxObstacle.h	7;"	d
__STEERLIB_ORIENTED_WALL_OBSTACLE_H__	include/obstacles/OrientedWallObstacle.h	7;"	d
__STEERLIB_RECFILE_IO_H__	include/recfileio/RecFileIO.h	7;"	d
__STEERLIB_RECFILE_IO_PRIVATE_H__	include/recfileio/RecFileIOPrivate.h	7;"	d
__STEERLIB_REC_FILE_PLAYER_MODULE_H__	include/modules/RecFilePlayerModule.h	7;"	d
__STEERLIB_SIMULATION_ENGINE_H__	include/simulation/SimulationEngine.h	7;"	d
__STEERLIB_SIMULATION_METRICS_COLLECTOR_H__	include/benchmarking/SimulationMetricsCollector.h	7;"	d
__STEERLIB_SIMULATION_OPTIONS_H__	include/simulation/SimulationOptions.h	7;"	d
__STEERLIB_SIMULATION_PLUGIN_H__	include/SimulationPlugin.h	7;"	d
__STEERLIB_SIMULATION_RECORDER_MODULE__	include/modules/SimulationRecorderModule.h	7;"	d
__STEERLIB_SPATIAL_DATABASE_ITEM_H__	include/interfaces/SpatialDatabaseItem.h	7;"	d
__STEERLIB_STEERING_COMMAND_H__	include/simulation/SteeringCommand.h	7;"	d
__STEERLIB_STEER_BENCH_MODULE__	include/modules/SteerBenchModule.h	7;"	d
__STEERLIB_STEER_BUG_MODULE__	include/modules/SteerBugModule.h	7;"	d
__STEERLIB_TEST_CASE_IO_H__	include/testcaseio/TestCaseIO.h	7;"	d
__STEERLIB_TEST_CASE_IO_PRIVATE_H__	include/testcaseio/TestCaseIOPrivate.h	7;"	d
__STEERLIB_TEST_CASE_PLAYER_MODULE__	include/modules/TestCasePlayerModule.h	7;"	d
__STEERLIB_UTIL_H__	include/Util.h	7;"	d
__STEERSIM_PLUGIN_H__	include/SteerSimPlugin.h	11;"	d
__UTIL_ANIMATION_CURVE_H__	build/win32/AnimationCurve.h	8;"	d
__UTIL_COLOR_H__	include/util/Color.h	7;"	d
__UTIL_COMMAND_LINE_OPTIONS_PARSER_H__	include/util/CommandLineParser.h	7;"	d
__UTIL_CURVE_H__	include/util/Curve.h	8;"	d
__UTIL_DRAWLIB_H__	include/util/DrawLib.h	7;"	d
__UTIL_DYNAMIC_LIBRARY_H__	include/util/DynamicLibrary.h	7;"	d
__UTIL_GENERIC_EXCEPTION_H__	include/util/GenericException.h	7;"	d
__UTIL_GEOMETRY_H__	include/util/Geometry.h	7;"	d
__UTIL_HIGH_RES_COUNTER_H__	include/util/HighResCounter.h	7;"	d
__UTIL_MEMORY_MAPPER_H__	include/util/MemoryMapper.h	7;"	d
__UTIL_MISC_H__	include/util/Misc.h	7;"	d
__UTIL_MUTEX_H__	include/util/Mutex.h	7;"	d
__UTIL_PERFORMANCE_PROFILER_H__	include/util/PerformanceProfiler.h	7;"	d
__UTIL_STATE_MACHINE_H__	include/util/StateMachine.h	7;"	d
__UTIL_THREADED_TASK_MANAGER_H__	include/util/ThreadedTaskManager.h	7;"	d
__UTIL_XML_PARSER_H__	include/util/XMLParser.h	7;"	d
__UTIL_XML_PARSER_PRIVATE_H__	include/util/XMLParserPrivate.h	7;"	d
__oldPositions	include/modules/RecFilePlayerModule.h	/^		std::deque<Util::Point> __oldPositions;$/;"	m	class:SteerLib::ReplayAgent
_a	include/obstacles/OrientedBoxObstacle.h	/^		Util::Vector _a,_b,_c,_d;$/;"	m	class:SteerLib::OrientedBoxObstacle
_accelerationWindow	include/benchmarking/AgentMetricsCollector.h	/^	    windowArray<float> _accelerationWindow; \/\/ stores the *magnitude* only of change in velocity (not instantaneous acceleration) at each frame.$/;"	m	class:SteerLib::AgentMetricsCollector
_agentBeingAnalyzed	include/benchmarking/AgentMetricsCollector.h	/^		SteerLib::AgentInterface * _agentBeingAnalyzed;$/;"	m	class:SteerLib::AgentMetricsCollector
_agentCollectors	include/benchmarking/SimulationMetricsCollector.h	/^	    std::vector<AgentMetricsCollector*> _agentCollectors;$/;"	m	class:SteerLib::SimulationMetricsCollector
_agentDisplayList	include/util/DrawLib.h	/^		static int _agentDisplayList;$/;"	m	class:Util::DrawLib
_agentDisplayList	src/DrawLib.cpp	/^int DrawLib::_agentDisplayList = -1;$/;"	m	class:DrawLib	file:
_agentDotDisplayList	include/util/DrawLib.h	/^		static int _agentDotDisplayList;$/;"	m	class:Util::DrawLib
_agentDotDisplayList	src/DrawLib.cpp	/^int DrawLib::_agentDotDisplayList = -1;$/;"	m	class:DrawLib	file:
_agentOwners	include/simulation/SimulationEngine.h	/^		std::map<SteerLib::AgentInterface*, SteerLib::ModuleInterface*> _agentOwners;$/;"	m	class:SteerLib::SimulationEngine
_agents	include/benchmarking/BenchmarkEnginePrivate.h	/^		std::vector<SteerLib::AgentInterface*> _agents;$/;"	m	class:SteerLib::BenchmarkEnginePrivate
_agents	include/simulation/SimulationEngine.h	/^		std::vector<SteerLib::AgentInterface*> _agents;$/;"	m	class:SteerLib::SimulationEngine
_agentsInCurrentFrame	include/recfileio/RecFileIOPrivate.h	/^		RecFileAgentInfo * _agentsInCurrentFrame;$/;"	m	class:SteerLib::RecFileWriterPrivate
_aiModule	include/modules/TestCasePlayerModule.h	/^		SteerLib::ModuleInterface * _aiModule;$/;"	m	class:SteerLib::TestCasePlayerModule
_aiModuleName	include/modules/TestCasePlayerModule.h	/^		std::string _aiModuleName;$/;"	m	class:SteerLib::TestCasePlayerModule
_aiModuleSearchPath	include/modules/TestCasePlayerModule.h	/^		std::string _aiModuleSearchPath;$/;"	m	class:SteerLib::TestCasePlayerModule
_allTasksCompleted	include/util/ThreadedTaskManager.h	/^		bool _allTasksCompleted;$/;"	m	class:Util::ThreadedTaskManager
_allTasksCompletedCondition	include/util/ThreadedTaskManager.h	/^		CONDITION_VARIABLE _allTasksCompletedCondition;$/;"	m	class:Util::ThreadedTaskManager
_allTasksCompletedCondition	include/util/ThreadedTaskManager.h	/^		pthread_cond_t _allTasksCompletedCondition;$/;"	m	class:Util::ThreadedTaskManager
_allocateDatabase	src/GridDatabase2D.cpp	/^void GridDatabase2DPrivate::_allocateDatabase()$/;"	f	class:GridDatabase2DPrivate
_alpha	include/benchmarking/CompositeTechnique01.h	/^		float _alpha, _beta, _gamma;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_alpha	include/benchmarking/CompositeTechnique02.h	/^		float _alpha, _beta, _gamma, _delta;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_alpha	include/benchmarking/CompositeTechniquePLE.h	/^		float _alpha, _beta, _gamma, _delta;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_averageTime	include/util/PerformanceProfiler.h	/^		float _minTime, _maxTime, _averageTime, _totalTime;$/;"	m	class:Util::PerformanceProfiler
_b	include/obstacles/OrientedBoxObstacle.h	/^		Util::Vector _a,_b,_c,_d;$/;"	m	class:SteerLib::OrientedBoxObstacle
_basePtr	include/griddatabase/GridDatabase2DPrivate.h	/^		SpatialDatabaseItemPtr *  _basePtr;$/;"	m	class:SteerLib::GridDatabase2DPrivate
_basePtr	include/util/MemoryMapper.h	/^		void * _basePtr;$/;"	m	class:Util::MemoryMapper
_baseTick	include/simulation/Clock.h	/^		unsigned long long _baseTick;$/;"	m	class:SteerLib::Clock
_benchmarkScoreComputed	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		bool _benchmarkScoreComputed;$/;"	m	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
_benchmarkScoreComputed	include/benchmarking/CompositeTechnique01.h	/^		bool _benchmarkScoreComputed;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_benchmarkScoreComputed	include/benchmarking/CompositeTechnique02.h	/^		bool _benchmarkScoreComputed;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_benchmarkScoreComputed	include/benchmarking/CompositeTechniquePLE.h	/^		bool _benchmarkScoreComputed;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_benchmarkScoreComputed	include/benchmarking/EnergyEfficiencyTechnique.h	/^		bool _benchmarkScoreComputed;$/;"	m	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
_benchmarkTechnique	include/benchmarking/BenchmarkEnginePrivate.h	/^		SteerLib::BenchmarkTechniqueInterface * _benchmarkTechnique;$/;"	m	class:SteerLib::BenchmarkEnginePrivate
_benchmarkTechnique	include/modules/SteerBenchModule.h	/^		SteerLib::BenchmarkTechniqueInterface * _benchmarkTechnique;$/;"	m	class:SteerLib::SteerBenchModule
_beta	include/benchmarking/CompositeTechnique01.h	/^		float _alpha, _beta, _gamma;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_beta	include/benchmarking/CompositeTechnique02.h	/^		float _alpha, _beta, _gamma, _delta;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_beta	include/benchmarking/CompositeTechniquePLE.h	/^		float _alpha, _beta, _gamma, _delta;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_blocksLineOfSight	include/obstacles/BoxObstacle.h	/^		bool _blocksLineOfSight;$/;"	m	class:SteerLib::BoxObstacle
_blocksLineOfSight	include/obstacles/CircleObstacle.h	/^		bool _blocksLineOfSight;$/;"	m	class:SteerLib::CircleObstacle
_blocksLineOfSight	include/obstacles/OrientedBoxObstacle.h	/^		bool _blocksLineOfSight;$/;"	m	class:SteerLib::OrientedBoxObstacle
_bounds	include/obstacles/BoxObstacle.h	/^		Util::AxisAlignedBox _bounds;$/;"	m	class:SteerLib::BoxObstacle
_bounds	include/obstacles/CircleObstacle.h	/^		Util::AxisAlignedBox _bounds;$/;"	m	class:SteerLib::CircleObstacle
_bounds	include/obstacles/OrientedBoxObstacle.h	/^		Util::AxisAlignedBox _bounds;$/;"	m	class:SteerLib::OrientedBoxObstacle
_broadcastAllTasksCompleted	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::_broadcastAllTasksCompleted() throw()$/;"	f	class:ThreadedTaskManager
_buildAgentDisplayList	src/DrawLib.cpp	/^int DrawLib::_buildAgentDisplayList()$/;"	f	class:DrawLib
_buildAgentDotDisplayList	src/DrawLib.cpp	/^int DrawLib::_buildAgentDotDisplayList()$/;"	f	class:DrawLib
_buildCubeDisplayList	src/DrawLib.cpp	/^int DrawLib::_buildCubeDisplayList()$/;"	f	class:DrawLib
_buildCylinderDisplayList	src/DrawLib.cpp	/^int DrawLib::_buildCylinderDisplayList()$/;"	f	class:DrawLib
_buildFlagDisplayList	src/DrawLib.cpp	/^int DrawLib::_buildFlagDisplayList()$/;"	f	class:DrawLib
_buildSphereDisplayList	src/DrawLib.cpp	/^int DrawLib::_buildSphereDisplayList()$/;"	f	class:DrawLib
_c	include/obstacles/OrientedBoxObstacle.h	/^		Util::Vector _a,_b,_c,_d;$/;"	m	class:SteerLib::OrientedBoxObstacle
_callback	include/util/StateMachine.h	/^		StateMachineCallbackInterface * _callback;$/;"	m	class:Util::StateMachine
_callbackInterface	include/util/XMLParserPrivate.h	/^		XMLParserCallbackInterface * _callbackInterface;$/;"	m	class:Util::XMLTagPrivate
_camera	include/simulation/SimulationEngine.h	/^		SteerLib::Camera _camera;$/;"	m	class:SteerLib::SimulationEngine
_cameraList	include/recfileio/RecFileIOPrivate.h	/^		RecFileCameraInfo * _cameraList;$/;"	m	class:SteerLib::RecFileReaderPrivate
_cameraList	include/recfileio/RecFileIOPrivate.h	/^		std::vector<RecFileCameraInfo> _cameraList;$/;"	m	class:SteerLib::RecFileWriterPrivate
_cameraViews	include/testcaseio/TestCaseIOPrivate.h	/^		std::vector<CameraView> _cameraViews;$/;"	m	class:SteerLib::TestCaseReaderPrivate
_cells	include/griddatabase/GridDatabase2DPrivate.h	/^		GridCell* _cells;$/;"	m	class:SteerLib::GridDatabase2DPrivate
_centerPosition	include/obstacles/CircleObstacle.h	/^		Util::Point _centerPosition;$/;"	m	class:SteerLib::CircleObstacle
_centerPosition	include/obstacles/OrientedBoxObstacle.h	/^		Util::Point _centerPosition;$/;"	m	class:SteerLib::OrientedBoxObstacle
_changeInSpeedWindow	include/benchmarking/AgentMetricsCollector.h	/^	    windowArray<float> _changeInSpeedWindow; \/\/ stores the change in speed at each frame$/;"	m	class:SteerLib::AgentMetricsCollector
_checkAndUpdateOneCollision	src/AgentMetricsCollector.cpp	/^void AgentMetricsCollector::_checkAndUpdateOneCollision(uintptr_t collisionKey, float penetration, float currentTimeStamp)$/;"	f	class:AgentMetricsCollector
_clampSpatialBoundsToIndexRange	src/GridDatabase2D.cpp	/^inline bool GridDatabase2DPrivate::_clampSpatialBoundsToIndexRange(float xmin, float xmax, float zmin, float zmax, unsigned int & xMinIndex, unsigned int & xMaxIndex, unsigned int & zMinIndex, unsigned int & zMaxIndex)$/;"	f	class:GridDatabase2DPrivate
_clock	include/simulation/SimulationEngine.h	/^		SteerLib::Clock _clock;$/;"	m	class:SteerLib::SimulationEngine
_clockMode	include/simulation/Clock.h	/^		ClockModeEnum _clockMode;$/;"	m	class:SteerLib::Clock
_color	include/modules/RecFilePlayerModule.h	/^		Util::Color _color;$/;"	m	class:SteerLib::ReplayAgent
_commands	include/simulation/SimulationEngine.h	/^		std::map<std::string, SteerLib::CommandFunctionPtr> _commands;$/;"	m	class:SteerLib::SimulationEngine
_computeFrequencyEstimate	src/HighResCounter.cpp	/^void CounterFrequencyEstimator::_computeFrequencyEstimate()$/;"	f	class:CounterFrequencyEstimator
_computePlan	include/planning/BestFirstSearchPlanner.h	/^	bool BestFirstSearchPlanner< PlanningDomain, PlanningState, PlanningAction >::_computePlan( const PlanningState & startState, const PlanningState & idealGoalState, std::map<PlanningState, BestFirstSearchNode<PlanningState, PlanningAction> > & stateMap, PlanningState & actualStateReached )$/;"	f	class:SteerLib::BestFirstSearchPlanner
_computeTotalBenchmarkScore	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void _computeTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) {$/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
_computeTotalBenchmarkScore	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void _computeTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) {$/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
_computeTotalBenchmarkScore	src/CompositeTechnique01.cpp	/^float CompositeBenchmarkTechnique01::_computeTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) {$/;"	f	class:CompositeBenchmarkTechnique01
_computeTotalBenchmarkScore	src/CompositeTechnique02.cpp	/^float CompositeBenchmarkTechnique02::_computeTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) {$/;"	f	class:CompositeBenchmarkTechnique02
_computeTotalBenchmarkScore	src/CompositeTechniquePLE.cpp	/^float CompositeBenchmarkTechniquePLE::_computeTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) {$/;"	f	class:CompositeBenchmarkTechniquePLE
_counterTicksToSeconds	include/simulation/Clock.h	/^		inline float _counterTicksToSeconds(unsigned long long ticks) {$/;"	f	class:SteerLib::Clock
_createAllThreads	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::_createAllThreads()$/;"	f	class:ThreadedTaskManager
_createBuiltInModule	src/SimulationEngine.cpp	/^SteerLib::ModuleInterface * SimulationEngine::_createBuiltInModule(const std::string & moduleName)$/;"	f	class:SimulationEngine
_cubeDisplayList	include/util/DrawLib.h	/^		static int _cubeDisplayList;$/;"	m	class:Util::DrawLib
_cubeDisplayList	src/DrawLib.cpp	/^int DrawLib::_cubeDisplayList = -1;$/;"	m	class:DrawLib	file:
_currentCollidingObjects	include/benchmarking/AgentMetricsCollector.h	/^		std::map<uintptr_t, SteerLib::CollisionInfo> _currentCollidingObjects; \/\/ a list of agents and obstacles that this agent is colliding with.  hopefully won't ever be too large.$/;"	m	class:SteerLib::AgentMetricsCollector
_currentDirection	include/benchmarking/AgentMetricsCollector.h	/^	    Util::Vector _currentDirection, _previousDirection;$/;"	m	class:SteerLib::AgentMetricsCollector
_currentDisplayListBeingWritten	include/util/DrawLib.h	/^		static int _currentDisplayListBeingWritten;$/;"	m	class:Util::DrawLib
_currentDisplayListBeingWritten	src/DrawLib.cpp	/^int DrawLib::_currentDisplayListBeingWritten = -1;$/;"	m	class:DrawLib	file:
_currentFrameNumber	include/benchmarking/BenchmarkEnginePrivate.h	/^		unsigned int _currentFrameNumber;$/;"	m	class:SteerLib::BenchmarkEnginePrivate
_currentGoal	include/benchmarking/BenchmarkEnginePrivate.h	/^		SteerLib::AgentGoalInfo _currentGoal;$/;"	m	class:SteerLib::BenchmarkAgent
_currentGoal	include/modules/DummyAIModule.h	/^		SteerLib::AgentGoalInfo _currentGoal;$/;"	m	class:SteerLib::DummyAgent
_currentGoal	include/modules/RecFilePlayerModule.h	/^		SteerLib::AgentGoalInfo _currentGoal;$/;"	m	class:SteerLib::ReplayAgent
_currentPosition	include/benchmarking/AgentMetricsCollector.h	/^	    Util::Point _currentPosition, _previousPosition;$/;"	m	class:SteerLib::AgentMetricsCollector
_currentState	include/util/StateMachine.h	/^		unsigned int _currentState;$/;"	m	class:Util::StateMachine
_currentTimeToPlayback	include/modules/RecFilePlayerModule.h	/^		double _currentTimeToPlayback;$/;"	m	class:SteerLib::RecFilePlayerModule
_cylinderDisplayList	include/util/DrawLib.h	/^		static int _cylinderDisplayList;$/;"	m	class:Util::DrawLib
_cylinderDisplayList	src/DrawLib.cpp	/^int DrawLib::_cylinderDisplayList = -1;$/;"	m	class:DrawLib	file:
_d	include/obstacles/OrientedBoxObstacle.h	/^		Util::Vector _a,_b,_c,_d;$/;"	m	class:SteerLib::OrientedBoxObstacle
_delta	include/benchmarking/CompositeTechnique02.h	/^		float _alpha, _beta, _gamma, _delta;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_delta	include/benchmarking/CompositeTechniquePLE.h	/^		float _alpha, _beta, _gamma, _delta;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_description	include/util/XMLParserPrivate.h	/^		std::string _description;$/;"	m	class:Util::XMLTagPrivate
_displayLists	include/util/DrawLib.h	/^		static std::vector<GLuint> _displayLists;$/;"	m	class:Util::DrawLib
_distanceWindow	include/benchmarking/AgentMetricsCollector.h	/^	    windowArray<float> _distanceWindow; \/\/ stores the distance traveled each frame$/;"	m	class:SteerLib::AgentMetricsCollector
_done	include/benchmarking/BenchmarkEnginePrivate.h	/^		bool _done;$/;"	m	class:SteerLib::BenchmarkEnginePrivate
_drawAgents	src/SimulationEngine.cpp	/^void SimulationEngine::_drawAgents()$/;"	f	class:SimulationEngine
_drawDisplayList	src/DrawLib.cpp	/^int DrawLib::_drawDisplayList(int displayList)$/;"	f	class:DrawLib
_drawEnvironment	src/SimulationEngine.cpp	/^void SimulationEngine::_drawEnvironment()$/;"	f	class:SimulationEngine
_drawGrid	include/griddatabase/GridDatabase2DPrivate.h	/^		bool _drawGrid; \/\/ should the grid be drawn?$/;"	m	class:SteerLib::GridDatabase2DPrivate
_drawModules	src/SimulationEngine.cpp	/^void SimulationEngine::_drawModules()$/;"	f	class:SimulationEngine
_drawObstacles	src/SimulationEngine.cpp	/^void SimulationEngine::_drawObstacles()$/;"	f	class:SimulationEngine
_dummyBounds	include/obstacles/OrientedBoxObstacle.h	/^		Util::AxisAlignedBox _dummyBounds; \/\/ used in overlaps and intersection routines.$/;"	m	class:SteerLib::OrientedBoxObstacle
_dummyUseShadowsFlag	include/simulation/SimulationOptions.h	/^		bool _dummyUseShadowsFlag;$/;"	m	class:SteerLib::SimulationOptions
_dumpModuleDataStructures	src/SimulationEngine.cpp	/^void SimulationEngine::_dumpModuleDataStructures()$/;"	f	class:SimulationEngine
_elems	include/util/dmatrix.h	/^  double *_elems;$/;"	m	class:Matrix
_enabled	include/benchmarking/AgentMetricsCollector.h	/^	    bool _enabled;$/;"	m	class:SteerLib::AgentMetricsCollector
_enabled	include/benchmarking/BenchmarkEnginePrivate.h	/^		bool _enabled;$/;"	m	class:SteerLib::BenchmarkAgent
_enabled	include/modules/RecFilePlayerModule.h	/^		bool _enabled;$/;"	m	class:SteerLib::ReplayAgent
_endDefiningDisplayList	src/DrawLib.cpp	/^int DrawLib::_endDefiningDisplayList(int displayList)$/;"	f	class:DrawLib
_endTick	include/util/PerformanceProfiler.h	/^		unsigned long long _endTick;$/;"	m	class:Util::PerformanceProfiler
_engine	include/modules/MetricsCollectorModule.h	/^		SteerLib::EngineInterface * _engine;$/;"	m	class:SteerLib::MetricsCollectorModule
_engine	include/modules/RecFilePlayerModule.h	/^		SteerLib::EngineInterface * _engine;$/;"	m	class:SteerLib::RecFilePlayerModule
_engine	include/modules/SimulationRecorderModule.h	/^		SteerLib::EngineInterface * _engine;$/;"	m	class:SteerLib::SimulationRecorderModule
_engine	include/modules/SteerBenchModule.h	/^		SteerLib::EngineInterface * _engine;$/;"	m	class:SteerLib::SteerBenchModule
_engine	include/modules/TestCasePlayerModule.h	/^		SteerLib::EngineInterface * _engine;$/;"	m	class:SteerLib::TestCasePlayerModule
_engine	include/simulation/SimulationEngine.h	/^			SimulationEngine * _engine;$/;"	m	class:SteerLib::SimulationEngine::EngineStateMachineCallback
_engineController	include/simulation/SimulationEngine.h	/^		SteerLib::EngineControllerInterface * _engineController;$/;"	m	class:SteerLib::SimulationEngine
_engineInfo	include/interfaces/BenchmarkTechniqueInterface.h	/^		SteerLib::EngineInterface * _engineInfo;$/;"	m	class:SteerLib::BenchmarkTechniqueInterface
_engineState	include/simulation/SimulationEngine.h	/^		Util::StateMachine _engineState;$/;"	m	class:SteerLib::SimulationEngine
_engineStateMachineCallback	include/simulation/SimulationEngine.h	/^		EngineStateMachineCallback _engineStateMachineCallback;$/;"	m	class:SteerLib::SimulationEngine
_environmentMetrics	include/benchmarking/SimulationMetricsCollector.h	/^	    EnvironmentMetrics _environmentMetrics;$/;"	m	class:SteerLib::SimulationMetricsCollector
_errorMessage	include/util/GenericException.h	/^		std::string _errorMessage;$/;"	m	class:Util::GenericException
_fileHandle	include/util/MemoryMapper.h	/^		int _fileHandle;$/;"	m	class:Util::MemoryMapper
_fileHandle	include/util/MemoryMapper.h	/^		void * _fileHandle;$/;"	m	class:Util::MemoryMapper
_fileMap	include/recfileio/RecFileIOPrivate.h	/^		Util::MemoryMapper _fileMap;$/;"	m	class:SteerLib::RecFileReaderPrivate
_fileSize	include/util/MemoryMapper.h	/^		unsigned int _fileSize;$/;"	m	class:Util::MemoryMapper
_filename	include/recfileio/RecFileIOPrivate.h	/^		std::string _filename;$/;"	m	class:SteerLib::RecFileReaderPrivate
_filename	include/recfileio/RecFileIOPrivate.h	/^		std::string _filename;$/;"	m	class:SteerLib::RecFileWriterPrivate
_filename	include/util/MemoryMapper.h	/^		std::string _filename;$/;"	m	class:Util::MemoryMapper
_fixedSimulationFrameRate	include/simulation/Clock.h	/^		float _fixedSimulationFrameRate;$/;"	m	class:SteerLib::Clock
_fixedTicksPerFrame	include/simulation/Clock.h	/^		unsigned long long _fixedTicksPerFrame;$/;"	m	class:SteerLib::Clock
_fixedTimeStep	include/modules/RecFilePlayerModule.h	/^		double _fixedTimeStep;$/;"	m	class:SteerLib::RecFilePlayerModule
_flagDisplayList	include/util/DrawLib.h	/^		static int _flagDisplayList;$/;"	m	class:Util::DrawLib
_flagDisplayList	src/DrawLib.cpp	/^int DrawLib::_flagDisplayList = -1;$/;"	m	class:DrawLib	file:
_forward	include/benchmarking/BenchmarkEnginePrivate.h	/^		Util::Vector _forward;$/;"	m	class:SteerLib::BenchmarkAgent
_forward	include/modules/DummyAIModule.h	/^		Util::Vector _forward;$/;"	m	class:SteerLib::DummyAgent
_forward	include/modules/RecFilePlayerModule.h	/^		Util::Vector _forward;$/;"	m	class:SteerLib::ReplayAgent
_frameTable	include/recfileio/RecFileIOPrivate.h	/^		RecFileFrameInfo * _frameTable;$/;"	m	class:SteerLib::RecFileReaderPrivate
_frameTable	include/recfileio/RecFileIOPrivate.h	/^		std::vector<RecFileFrameInfo> _frameTable;$/;"	m	class:SteerLib::RecFileWriterPrivate
_frames	include/recfileio/RecFileIOPrivate.h	/^		RecFileAgentInfo ** _frames;$/;"	m	class:SteerLib::RecFileReaderPrivate
_freq	include/util/HighResCounter.h	/^		static unsigned long long _freq;$/;"	m	class:Util::CounterFrequencyEstimator
_freq	src/HighResCounter.cpp	/^unsigned long long CounterFrequencyEstimator::_freq = 0;$/;"	m	class:CounterFrequencyEstimator	file:
_frequencyComputed	include/util/HighResCounter.h	/^		static bool _frequencyComputed;$/;"	m	class:Util::CounterFrequencyEstimator
_frequencyComputed	src/HighResCounter.cpp	/^bool CounterFrequencyEstimator::_frequencyComputed = false;$/;"	m	class:CounterFrequencyEstimator	file:
_gamma	include/benchmarking/CompositeTechnique01.h	/^		float _alpha, _beta, _gamma;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_gamma	include/benchmarking/CompositeTechnique02.h	/^		float _alpha, _beta, _gamma, _delta;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_gamma	include/benchmarking/CompositeTechniquePLE.h	/^		float _alpha, _beta, _gamma, _delta;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_getBehaviorFromXMLElement	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_getBehaviorFromXMLElement(const ticpp::Element * subRoot, Behaviour * behavior)$/;"	f	class:TestCaseReaderPrivate
_getBoundsFromXMLElement	src/TestCaseReaderPrivate.cpp	/^AxisAlignedBox TestCaseReaderPrivate::_getBoundsFromXMLElement(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_getFramesForTime	src/RecFileReader.cpp	/^void RecFileReaderPrivate::_getFramesForTime(float time, unsigned int &frameIndex1, unsigned int &frameIndex2)$/;"	f	class:RecFileReaderPrivate
_getIndexOfCurrentWorkerThread	src/ThreadedTaskManager.cpp	/^unsigned int ThreadedTaskManager::_getIndexOfCurrentWorkerThread() throw()$/;"	f	class:ThreadedTaskManager
_getTickCount	include/simulation/Clock.h	/^		inline unsigned long long _getTickCount()$/;"	f	class:SteerLib::Clock
_getXYZOrRandomFromXMLElement	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_getXYZOrRandomFromXMLElement(const ticpp::Element * subRoot, Util::Color & xyzTuple, bool & isRandom)$/;"	f	class:TestCaseReaderPrivate
_getXYZOrRandomFromXMLElement	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_getXYZOrRandomFromXMLElement(const ticpp::Element * subRoot, Util::Point & xyzTuple, bool & isRandom)$/;"	f	class:TestCaseReaderPrivate
_getXYZOrRandomFromXMLElement	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_getXYZOrRandomFromXMLElement(const ticpp::Element * subRoot, Util::Vector & xyzTuple, bool & isRandom)$/;"	f	class:TestCaseReaderPrivate
_gridCellMutex	include/griddatabase/GridCell.h	/^		Util::Mutex _gridCellMutex;$/;"	m	class:SteerLib::GridCell
_header	include/recfileio/RecFileIOPrivate.h	/^		RecFileHeader * _header;$/;"	m	class:SteerLib::RecFileReaderPrivate
_header	include/recfileio/RecFileIOPrivate.h	/^		RecFileHeader * _header;$/;"	m	class:SteerLib::RecFileWriterPrivate
_header	include/testcaseio/TestCaseIOPrivate.h	/^		TestCaseHeader _header;$/;"	m	class:SteerLib::TestCaseReaderPrivate
_init	src/DynamicLibrary.cpp	/^void DynamicLibrary::_init()$/;"	f	class:DynamicLibrary
_initAgentInitialConditions	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_initAgentInitialConditions( AgentInitialConditions & a, const RawAgentInfo & agent )$/;"	f	class:TestCaseReaderPrivate
_initializeSynchronizationObjects	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::_initializeSynchronizationObjects()$/;"	f	class:ThreadedTaskManager
_initialized	include/modules/SimulationRecorderModule.h	/^		bool _initialized;$/;"	m	class:SteerLib::SimulationRecorderModule
_initialized	include/util/DrawLib.h	/^		static bool _initialized;$/;"	m	class:Util::DrawLib
_initialized	src/DrawLib.cpp	/^bool DrawLib::_initialized = false;$/;"	m	class:DrawLib	file:
_initializedAgents	include/testcaseio/TestCaseIOPrivate.h	/^		std::vector<AgentInitialConditions> _initializedAgents;$/;"	m	class:SteerLib::TestCaseReaderPrivate
_initializedObstacles	include/testcaseio/TestCaseIOPrivate.h	/^		std::vector<ObstacleInitialConditions*> _initializedObstacles;$/;"	m	class:SteerLib::TestCaseReaderPrivate
_instantaneousAccelerationWindow	include/benchmarking/AgentMetricsCollector.h	/^	    windowArray<Util::Vector> _instantaneousAccelerationWindow; \/\/ stores the *magnitude* only of change in velocity (not instantaneous acceleration) at each frame.$/;"	m	class:SteerLib::AgentMetricsCollector
_inverseFrequency	include/simulation/Clock.h	/^		float _inverseFrequency;$/;"	m	class:SteerLib::Clock
_isDelimeter	include/simulation/SimulationOptions.h	/^		static bool _isDelimeter(char c) { return ((c==',')||(c==' ')); }$/;"	f	class:SteerLib::SimulationOptions
_isLoaded	include/util/DynamicLibrary.h	/^	    bool _isLoaded;$/;"	m	class:Util::DynamicLibrary
_items	include/griddatabase/GridCell.h	/^		SpatialDatabaseItemPtr * _items;$/;"	m	class:SteerLib::GridCell
_lengthX	include/obstacles/OrientedBoxObstacle.h	/^		float _lengthX;$/;"	m	class:SteerLib::OrientedBoxObstacle
_lengthZ	include/obstacles/OrientedBoxObstacle.h	/^		float _lengthZ;$/;"	m	class:SteerLib::OrientedBoxObstacle
_libraryHandle	include/util/DynamicLibrary.h	/^	    HMODULE _libraryHandle;$/;"	m	class:Util::DynamicLibrary
_libraryHandle	include/util/DynamicLibrary.h	/^	    void * _libraryHandle;$/;"	m	class:Util::DynamicLibrary
_libraryName	include/util/DynamicLibrary.h	/^	    std::string _libraryName;$/;"	m	class:Util::DynamicLibrary
_loadModule	src/SimulationEngine.cpp	/^SteerLib::ModuleMetaInformation * SimulationEngine::_loadModule(const std::string & moduleName, const std::string & searchPath)$/;"	f	class:SimulationEngine
_lock	include/util/Mutex.h	/^		CRITICAL_SECTION _lock;$/;"	m	class:Util::Mutex
_lock	include/util/Mutex.h	/^		pthread_mutex_t _lock;$/;"	m	class:Util::Mutex
_lock	include/util/ThreadedTaskManager.h	/^		inline void _lock() throw() {$/;"	f	class:Util::ThreadedTaskManager
_maxItemsPerCell	include/griddatabase/GridDatabase2DPrivate.h	/^		unsigned int _maxItemsPerCell;$/;"	m	class:SteerLib::GridDatabase2DPrivate
_maxNumNodesToExpand	include/planning/BestFirstSearchPlanner.h	/^		unsigned int _maxNumNodesToExpand;$/;"	m	class:SteerLib::BestFirstSearchPlanner
_maxSimulationDt	include/simulation/Clock.h	/^		unsigned long long _maxSimulationDt;$/;"	m	class:SteerLib::Clock
_maxTicks	include/util/PerformanceProfiler.h	/^		unsigned long long _maxTicks;$/;"	m	class:Util::PerformanceProfiler
_maxTime	include/util/PerformanceProfiler.h	/^		float _minTime, _maxTime, _averageTime, _totalTime;$/;"	m	class:Util::PerformanceProfiler
_measuredFps	include/simulation/Clock.h	/^		float _measuredFps;$/;"	m	class:SteerLib::Clock
_metrics	include/benchmarking/AgentMetricsCollector.h	/^	    AgentMetrics _metrics;$/;"	m	class:SteerLib::AgentMetricsCollector
_metricsCollectorModule	include/modules/SteerBenchModule.h	/^		MetricsCollectorModule * _metricsCollectorModule;$/;"	m	class:SteerLib::SteerBenchModule
_minSimulationDt	include/simulation/Clock.h	/^		unsigned long long _minSimulationDt;$/;"	m	class:SteerLib::Clock
_minTicks	include/util/PerformanceProfiler.h	/^		unsigned long long _minTicks;$/;"	m	class:Util::PerformanceProfiler
_minTime	include/util/PerformanceProfiler.h	/^		float _minTime, _maxTime, _averageTime, _totalTime;$/;"	m	class:Util::PerformanceProfiler
_modOpts	include/simulation/SimulationOptions.h	/^		ModuleOptionsDatabase * _modOpts;$/;"	m	class:SteerLib::ModuleOptionsXMLParser
_moduleConflicts	include/simulation/SimulationEngine.h	/^		std::multimap<std::string, std::string> _moduleConflicts;$/;"	m	class:SteerLib::SimulationEngine
_moduleMetaInfoByName	include/simulation/SimulationEngine.h	/^		std::map<std::string, SteerLib::ModuleMetaInformation*> _moduleMetaInfoByName;$/;"	m	class:SteerLib::SimulationEngine
_moduleMetaInfoByReference	include/simulation/SimulationEngine.h	/^		std::map<SteerLib::ModuleInterface*, SteerLib::ModuleMetaInformation*> _moduleMetaInfoByReference;$/;"	m	class:SteerLib::SimulationEngine
_moduleOptionsXMLParser	include/simulation/SimulationOptions.h	/^		ModuleOptionsXMLParser _moduleOptionsXMLParser;$/;"	m	class:SteerLib::SimulationOptions
_modulesInExecutionOrder	include/simulation/SimulationEngine.h	/^		std::vector<SteerLib::ModuleInterface*> _modulesInExecutionOrder;$/;"	m	class:SteerLib::SimulationEngine
_nonOptionArgs	include/util/CommandLineParser.h	/^		std::vector<std::string> _nonOptionArgs;$/;"	m	class:Util::CommandLineParser
_numAgents	include/benchmarking/CompositeTechnique01.h	/^		float _numAgents;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_numAgents	include/benchmarking/CompositeTechnique02.h	/^		float _numAgents;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_numAgents	include/benchmarking/CompositeTechniquePLE.h	/^		float _numAgents;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_numCollisionsOfAllAgents	include/benchmarking/CompositeTechnique01.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_numCollisionsOfAllAgents	include/benchmarking/CompositeTechnique02.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents, _totalInstantaneousAcceleration;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_numCollisionsOfAllAgents	include/benchmarking/CompositeTechniquePLE.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents, _totalInstantaneousAcceleration;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_numColumns	include/util/dmatrix.h	/^  size_t _numColumns;$/;"	m	class:Matrix
_numFramesMeasured	include/benchmarking/AgentMetricsCollector.h	/^	    unsigned int _numFramesMeasured;$/;"	m	class:SteerLib::AgentMetricsCollector
_numFramesSimulated	include/simulation/SimulationEngine.h	/^		unsigned int _numFramesSimulated;$/;"	m	class:SteerLib::SimulationEngine
_numItems	include/griddatabase/GridCell.h	/^		unsigned int _numItems;$/;"	m	class:SteerLib::GridCell
_numRows	include/util/dmatrix.h	/^  size_t _numRows;$/;"	m	class:Matrix
_numTasksLeft	include/util/ThreadedTaskManager.h	/^		unsigned int _numTasksLeft;$/;"	m	class:Util::ThreadedTaskManager
_numThreads	include/util/ThreadedTaskManager.h	/^		unsigned int _numThreads;$/;"	m	class:Util::ThreadedTaskManager
_numTimesCalled	include/util/PerformanceProfiler.h	/^		long long _numTimesCalled;$/;"	m	class:Util::PerformanceProfiler
_obstacleList	include/recfileio/RecFileIOPrivate.h	/^		RecFileObstacleInfo * _obstacleList;$/;"	m	class:SteerLib::RecFileReaderPrivate
_obstacleList	include/recfileio/RecFileIOPrivate.h	/^		std::vector<RecFileObstacleInfo> _obstacleList;$/;"	m	class:SteerLib::RecFileWriterPrivate
_obstacles	include/benchmarking/BenchmarkEnginePrivate.h	/^		std::vector<SteerLib::ObstacleInterface*> _obstacles;$/;"	m	class:SteerLib::BenchmarkEnginePrivate
_obstacles	include/modules/RecFilePlayerModule.h	/^		std::vector<SteerLib::BoxObstacle *> _obstacles;$/;"	m	class:SteerLib::RecFilePlayerModule
_obstacles	include/modules/TestCasePlayerModule.h	/^		std::vector<SteerLib::ObstacleInterface *> _obstacles;$/;"	m	class:SteerLib::TestCasePlayerModule
_obstacles	include/simulation/SimulationEngine.h	/^		std::set<SteerLib::ObstacleInterface*> _obstacles;$/;"	m	class:SteerLib::SimulationEngine
_opened	include/recfileio/RecFileIOPrivate.h	/^		bool _opened;$/;"	m	class:SteerLib::RecFileReaderPrivate
_opened	include/recfileio/RecFileIOPrivate.h	/^		bool _opened;$/;"	m	class:SteerLib::RecFileWriterPrivate
_opened	include/util/MemoryMapper.h	/^		bool _opened;$/;"	m	class:Util::MemoryMapper
_options	include/simulation/SimulationEngine.h	/^		SimulationOptions * _options;$/;"	m	class:SteerLib::SimulationEngine
_options	include/util/CommandLineParser.h	/^		std::map<std::string, CommandLineParser::OptionInfo> _options;$/;"	m	class:Util::CommandLineParser
_parseAgent	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseAgent(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseAgentRegion	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseAgentRegion(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseBoxObstacle	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseBoxObstacle(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseCameraView	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseCameraView(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseCircleObstacle	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseCircleObstacle(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseDoorwayXML	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseDoorwayXML(const ticpp::Element * subRoot, double & value, double & radius, bool & isRandom)$/;"	f	class:TestCaseReaderPrivate
_parseGoalSequence	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseGoalSequence(const ticpp::Element * subRoot, std::vector<AgentGoalInfo> & goals)$/;"	f	class:TestCaseReaderPrivate
_parseHeader	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseHeader(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseInitialConditions	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseInitialConditions(const ticpp::Element * subRoot, RawAgentInfo & newAgent)$/;"	f	class:TestCaseReaderPrivate
_parseObstacleRegion	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseObstacleRegion(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseOrientedBoxObstacle	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseOrientedBoxObstacle(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseOrientedWallObstacle	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseOrientedWallObstacle(const ticpp::Element * subRoot)$/;"	f	class:TestCaseReaderPrivate
_parseTestCaseDOM	src/TestCaseReaderPrivate.cpp	/^void TestCaseReaderPrivate::_parseTestCaseDOM(const ticpp::Element * root)$/;"	f	class:TestCaseReaderPrivate
_pastCollisions	include/benchmarking/AgentMetricsCollector.h	/^	    std::vector<CollisionInfo> _pastCollisions;$/;"	m	class:SteerLib::AgentMetricsCollector
_planningDomain	include/griddatabase/GridDatabase2DPrivate.h	/^		GridDatabasePlanningDomain * _planningDomain;$/;"	m	class:SteerLib::GridDatabase2DPrivate
_planningDomain	include/planning/BestFirstSearchPlanner.h	/^		PlanningDomain * _planningDomain;$/;"	m	class:SteerLib::BestFirstSearchPlanner
_playbackFile	include/recfileio/RecFileIOPrivate.h	/^		std::ofstream _playbackFile;$/;"	m	class:SteerLib::RecFileWriterPrivate
_playbackSpeed	include/modules/RecFilePlayerModule.h	/^		double _playbackSpeed;$/;"	m	class:SteerLib::RecFilePlayerModule
_position	include/benchmarking/BenchmarkEnginePrivate.h	/^		Util::Point _position;$/;"	m	class:SteerLib::BenchmarkAgent
_position	include/modules/DummyAIModule.h	/^		Util::Point _position;$/;"	m	class:SteerLib::DummyAgent
_position	include/modules/RecFilePlayerModule.h	/^		Util::Point _position;$/;"	m	class:SteerLib::ReplayAgent
_positionWindow	include/benchmarking/AgentMetricsCollector.h	/^	    windowArray<Util::Point> _positionWindow; \/\/ stores the agent position at each frame$/;"	m	class:SteerLib::AgentMetricsCollector
_pp	include/util/PerformanceProfiler.h	/^		PerformanceProfiler * _pp;$/;"	m	class:Util::AutomaticFunctionProfiler
_previousDirection	include/benchmarking/AgentMetricsCollector.h	/^	    Util::Vector _currentDirection, _previousDirection;$/;"	m	class:SteerLib::AgentMetricsCollector
_previousPosition	include/benchmarking/AgentMetricsCollector.h	/^	    Util::Point _currentPosition, _previousPosition;$/;"	m	class:SteerLib::AgentMetricsCollector
_quadric	include/util/DrawLib.h	/^		static GLUquadricObj* _quadric;$/;"	m	class:Util::DrawLib
_quadric	src/DrawLib.cpp	/^GLUquadricObj * DrawLib::_quadric = NULL;$/;"	m	class:DrawLib	file:
_queueHasTasksCondition	include/util/ThreadedTaskManager.h	/^		CONDITION_VARIABLE _queueHasTasksCondition;$/;"	m	class:Util::ThreadedTaskManager
_queueHasTasksCondition	include/util/ThreadedTaskManager.h	/^		pthread_cond_t _queueHasTasksCondition;$/;"	m	class:Util::ThreadedTaskManager
_radius	include/benchmarking/AgentMetricsCollector.h	/^	    float _radius;$/;"	m	class:SteerLib::AgentMetricsCollector
_radius	include/benchmarking/BenchmarkEnginePrivate.h	/^		float _radius;$/;"	m	class:SteerLib::BenchmarkAgent
_radius	include/modules/DummyAIModule.h	/^		float _radius;$/;"	m	class:SteerLib::DummyAgent
_radius	include/modules/RecFilePlayerModule.h	/^		float _radius;$/;"	m	class:SteerLib::ReplayAgent
_radius	include/obstacles/CircleObstacle.h	/^		float _radius;$/;"	m	class:SteerLib::CircleObstacle
_randomNumberGenerator	include/testcaseio/TestCaseIOPrivate.h	/^		MTRand _randomNumberGenerator;$/;"	m	class:SteerLib::TestCaseReaderPrivate
_rawAgents	include/testcaseio/TestCaseIOPrivate.h	/^		std::vector<RawAgentInfo> _rawAgents;$/;"	m	class:SteerLib::TestCaseReaderPrivate
_rawObstacles	include/testcaseio/TestCaseIOPrivate.h	/^		std::vector<RawObstacleInfo *> _rawObstacles;$/;"	m	class:SteerLib::TestCaseReaderPrivate
_realDt	include/simulation/Clock.h	/^		unsigned long long _realDt;$/;"	m	class:SteerLib::Clock
_realFrameNumber	include/simulation/Clock.h	/^		unsigned int _realFrameNumber;$/;"	m	class:SteerLib::Clock
_recFileReader	include/benchmarking/BenchmarkEnginePrivate.h	/^		SteerLib::RecFileReader * _recFileReader;$/;"	m	class:SteerLib::BenchmarkEnginePrivate
_recFilename	include/modules/RecFilePlayerModule.h	/^		std::string _recFilename;$/;"	m	class:SteerLib::RecFilePlayerModule
_recFilename	include/modules/SimulationRecorderModule.h	/^		std::string _recFilename;$/;"	m	class:SteerLib::SimulationRecorderModule
_reset	src/SimulationEngine.cpp	/^void SimulationEngine::_reset()$/;"	f	class:SimulationEngine
_resetEnvironmentMetrics	src/SimulationMetricsCollector.cpp	/^void SimulationMetricsCollector::_resetEnvironmentMetrics()$/;"	f	class:SimulationMetricsCollector
_rootTag	include/util/XMLParserPrivate.h	/^		XMLTag * _rootTag;$/;"	m	class:Util::XMLParserPrivate
_roundClose	src/GridDatabase2D.cpp	/^float _roundClose(float f)$/;"	f
_runWorkerThread	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::_runWorkerThread() throw()$/;"	f	class:ThreadedTaskManager
_selectedAgents	include/simulation/SimulationEngine.h	/^		std::set<SteerLib::AgentInterface*> _selectedAgents;$/;"	m	class:SteerLib::SimulationEngine
_setupStateMachine	src/SimulationEngine.cpp	/^void SimulationEngine::_setupStateMachine()$/;"	f	class:SimulationEngine
_setupXMLStructure	src/SimulationOptions.cpp	/^void SimulationOptions::_setupXMLStructure( Util::XMLParser & xmlOpts )$/;"	f	class:SimulationOptions
_shuttingDown	include/util/ThreadedTaskManager.h	/^		bool _shuttingDown;$/;"	m	class:Util::ThreadedTaskManager
_simulateOneStep	src/SimulationEngine.cpp	/^bool SimulationEngine::_simulateOneStep()$/;"	f	class:SimulationEngine
_simulationDone	include/simulation/SimulationEngine.h	/^		bool _simulationDone;$/;"	m	class:SteerLib::SimulationEngine
_simulationDt	include/simulation/Clock.h	/^		unsigned long long _simulationDt;$/;"	m	class:SteerLib::Clock
_simulationFrameNumber	include/simulation/Clock.h	/^		unsigned int _simulationFrameNumber;$/;"	m	class:SteerLib::Clock
_simulationLoaded	include/simulation/SimulationEngine.h	/^		bool _simulationLoaded;$/;"	m	class:SteerLib::SimulationEngine
_simulationMetrics	include/modules/MetricsCollectorModule.h	/^		SteerLib::SimulationMetricsCollector * _simulationMetrics;$/;"	m	class:SteerLib::MetricsCollectorModule
_simulationMetricsCollector	include/benchmarking/BenchmarkEnginePrivate.h	/^		SteerLib::SimulationMetricsCollector * _simulationMetricsCollector;$/;"	m	class:SteerLib::BenchmarkEnginePrivate
_simulationReader	include/modules/RecFilePlayerModule.h	/^		SteerLib::RecFileReader * _simulationReader;$/;"	m	class:SteerLib::RecFilePlayerModule
_simulationRunning	include/simulation/SimulationEngine.h	/^		bool _simulationRunning;$/;"	m	class:SteerLib::SimulationEngine
_simulationStartTime	include/modules/RecFilePlayerModule.h	/^		double _simulationStartTime;$/;"	m	class:SteerLib::RecFilePlayerModule
_simulationStopTime	include/modules/RecFilePlayerModule.h	/^		double _simulationStopTime;$/;"	m	class:SteerLib::RecFilePlayerModule
_simulationWriter	include/modules/SimulationRecorderModule.h	/^		SteerLib::RecFileWriter * _simulationWriter;$/;"	m	class:SteerLib::SimulationRecorderModule
_spatialDatabase	include/benchmarking/BenchmarkEnginePrivate.h	/^		SteerLib::GridDatabase2D * _spatialDatabase;$/;"	m	class:SteerLib::BenchmarkEnginePrivate
_spatialDatabase	include/griddatabase/GridDatabasePlanningDomain.h	/^		SteerLib::GridDatabase2D * _spatialDatabase;$/;"	m	class:SteerLib::GridDatabasePlanningDomain
_spatialDatabase	include/simulation/SimulationEngine.h	/^		SteerLib::GridDatabase2D * _spatialDatabase;$/;"	m	class:SteerLib::SimulationEngine
_sphereDisplayList	include/util/DrawLib.h	/^		static int _sphereDisplayList;$/;"	m	class:Util::DrawLib
_sphereDisplayList	src/DrawLib.cpp	/^int DrawLib::_sphereDisplayList = -1;$/;"	m	class:DrawLib	file:
_startDefiningDisplayList	src/DrawLib.cpp	/^int DrawLib::_startDefiningDisplayList()$/;"	f	class:DrawLib
_startState	include/util/StateMachine.h	/^		unsigned int _startState;$/;"	m	class:Util::StateMachine
_startTick	include/util/PerformanceProfiler.h	/^		unsigned long long _startTick;$/;"	m	class:Util::PerformanceProfiler
_startWorkerThread	include/util/ThreadedTaskManager.h	/^		static DWORD WINAPI _startWorkerThread( void * context) throw() { ((ThreadedTaskManager*)context)->_runWorkerThread(); return NULL; }$/;"	f	class:Util::ThreadedTaskManager
_startWorkerThread	include/util/ThreadedTaskManager.h	/^		static void* _startWorkerThread(void * context) throw() { ((ThreadedTaskManager*)context)->_runWorkerThread(); return NULL; }$/;"	f	class:Util::ThreadedTaskManager
_started	include/util/StateMachine.h	/^		bool _started;$/;"	m	class:Util::StateMachine
_startupModules	include/simulation/SimulationOptions.h	/^		std::set<std::string> * _startupModules;$/;"	m	class:SteerLib::StartupModulesXMLParser
_startupModulesXMLParser	include/simulation/SimulationOptions.h	/^		StartupModulesXMLParser _startupModulesXMLParser;$/;"	m	class:SteerLib::SimulationOptions
_stop	include/simulation/SimulationEngine.h	/^		bool _stop;$/;"	m	class:SteerLib::SimulationEngine
_tagDataType	include/util/XMLParserPrivate.h	/^		XMLTagTypeEnum _tagDataType;$/;"	m	class:Util::XMLTagPrivate
_tagMap	include/util/XMLParserPrivate.h	/^		std::map<std::string, Util::XMLTag*> _tagMap;$/;"	m	class:Util::XMLTagPrivate
_tagName	include/util/XMLParserPrivate.h	/^		std::string _tagName;$/;"	m	class:Util::XMLTagPrivate
_target	include/util/XMLParserPrivate.h	/^		void * _target;$/;"	m	class:Util::XMLTagPrivate
_taskManagerLock	include/util/ThreadedTaskManager.h	/^		CRITICAL_SECTION _taskManagerLock;$/;"	m	class:Util::ThreadedTaskManager
_taskManagerLock	include/util/ThreadedTaskManager.h	/^		pthread_mutex_t _taskManagerLock;$/;"	m	class:Util::ThreadedTaskManager
_taskQueue	include/util/ThreadedTaskManager.h	/^		std::queue<Util::Task> _taskQueue;$/;"	m	class:Util::ThreadedTaskManager
_techniqueName	include/modules/SteerBenchModule.h	/^		std::string _techniqueName;$/;"	m	class:SteerLib::SteerBenchModule
_tempAction	include/griddatabase/GridDatabasePlanningDomain.h	/^		SteerLib::DefaultAction<unsigned int> _tempAction;$/;"	m	class:SteerLib::GridDatabasePlanningDomain
_testCaseFilename	include/modules/TestCasePlayerModule.h	/^		std::string _testCaseFilename;$/;"	m	class:SteerLib::TestCasePlayerModule
_testCaseName	include/recfileio/RecFileIOPrivate.h	/^		std::string _testCaseName;$/;"	m	class:SteerLib::RecFileReaderPrivate
_testCaseName	include/testcaseio/TestCaseIO.h	/^        std::string _testCaseName ;$/;"	m	class:SteerLib::TestCaseWriter
_thetaY	include/obstacles/OrientedBoxObstacle.h	/^		float _thetaY; \/\/ radians $/;"	m	class:SteerLib::OrientedBoxObstacle
_threads	include/util/ThreadedTaskManager.h	/^		std::vector<HANDLE> _threads;$/;"	m	class:Util::ThreadedTaskManager
_threads	include/util/ThreadedTaskManager.h	/^		std::vector<pthread_t> _threads;$/;"	m	class:Util::ThreadedTaskManager
_tickFrequencyInHz	include/util/PerformanceProfiler.h	/^		float _tickFrequencyInHz;$/;"	m	class:Util::PerformanceProfiler
_tokenizeModuleOptions	src/SimulationOptions.cpp	/^void SimulationOptions::_tokenizeModuleOptions( std::string & options,  std::vector<char*> & argv)$/;"	f	class:SimulationOptions
_totalBenchmarkScore	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		float _totalBenchmarkScore;$/;"	m	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
_totalBenchmarkScore	include/benchmarking/CompositeTechnique01.h	/^		float _totalBenchmarkScore;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_totalBenchmarkScore	include/benchmarking/CompositeTechnique02.h	/^		float _totalBenchmarkScore;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_totalBenchmarkScore	include/benchmarking/CompositeTechniquePLE.h	/^		float _totalBenchmarkScore;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_totalBenchmarkScore	include/benchmarking/EnergyEfficiencyTechnique.h	/^		float _totalBenchmarkScore;$/;"	m	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
_totalEnergyOfAllAgents	include/benchmarking/CompositeTechnique01.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_totalEnergyOfAllAgents	include/benchmarking/CompositeTechnique02.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents, _totalInstantaneousAcceleration;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_totalEnergyOfAllAgents	include/benchmarking/CompositeTechniquePLE.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents, _totalInstantaneousAcceleration;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_totalInstantaneousAcceleration	include/benchmarking/CompositeTechnique02.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents, _totalInstantaneousAcceleration;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_totalInstantaneousAcceleration	include/benchmarking/CompositeTechniquePLE.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents, _totalInstantaneousAcceleration;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_totalRealTime	include/simulation/Clock.h	/^		unsigned long long _totalRealTime;$/;"	m	class:SteerLib::Clock
_totalSimulationTime	include/simulation/Clock.h	/^		unsigned long long _totalSimulationTime;$/;"	m	class:SteerLib::Clock
_totalTicksAccumulated	include/util/PerformanceProfiler.h	/^		unsigned long long _totalTicksAccumulated;$/;"	m	class:Util::PerformanceProfiler
_totalTime	include/util/PerformanceProfiler.h	/^		float _minTime, _maxTime, _averageTime, _totalTime;$/;"	m	class:Util::PerformanceProfiler
_totalTimeOfAllAgents	include/benchmarking/CompositeTechnique01.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique01
_totalTimeOfAllAgents	include/benchmarking/CompositeTechnique02.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents, _totalInstantaneousAcceleration;$/;"	m	class:SteerLib::CompositeBenchmarkTechnique02
_totalTimeOfAllAgents	include/benchmarking/CompositeTechniquePLE.h	/^		float _numCollisionsOfAllAgents, _totalTimeOfAllAgents, _totalEnergyOfAllAgents, _totalInstantaneousAcceleration;$/;"	m	class:SteerLib::CompositeBenchmarkTechniquePLE
_transitions	include/util/StateMachine.h	/^		std::set<unsigned long long> _transitions;$/;"	m	class:Util::StateMachine
_traversalCost	include/griddatabase/GridCell.h	/^		float _traversalCost;$/;"	m	class:SteerLib::GridCell
_traversalCost	include/obstacles/BoxObstacle.h	/^		float _traversalCost;$/;"	m	class:SteerLib::BoxObstacle
_traversalCost	include/obstacles/CircleObstacle.h	/^		float _traversalCost;$/;"	m	class:SteerLib::CircleObstacle
_traversalCost	include/obstacles/OrientedBoxObstacle.h	/^		float _traversalCost;$/;"	m	class:SteerLib::OrientedBoxObstacle
_turnWindow	include/benchmarking/AgentMetricsCollector.h	/^	    windowArray<float> _turnWindow; \/\/ stores the amount of turning each frame$/;"	m	class:SteerLib::AgentMetricsCollector
_unloadModule	src/SimulationEngine.cpp	/^bool SimulationEngine::_unloadModule( SteerLib::ModuleInterface * moduleToDestroy, bool recursivelyUnloadDependencies, bool errorIfCannotUnload )$/;"	f	class:SimulationEngine
_unlock	include/util/ThreadedTaskManager.h	/^		inline void _unlock() throw() {$/;"	f	class:Util::ThreadedTaskManager
_updateAgentInformation	src/AgentMetricsCollector.cpp	/^void AgentMetricsCollector::_updateAgentInformation(SteerLib::AgentInterface * updatedAgent)$/;"	f	class:AgentMetricsCollector
_updateAgentMetrics	src/SimulationMetricsCollector.cpp	/^void SimulationMetricsCollector::_updateAgentMetrics(SteerLib::GridDatabase2D * gridDB, const std::vector<SteerLib::AgentInterface*> & updatedAgents, float currentTimeStamp, float timePassedSinceLastFrame)$/;"	f	class:SimulationMetricsCollector
_updateCollisionStats	src/AgentMetricsCollector.cpp	/^void AgentMetricsCollector::_updateCollisionStats(GridDatabase2D * gridDB, AgentInterface * updatedAgent, float currentTimeStamp)$/;"	f	class:AgentMetricsCollector
_updateEnvironmentMetrics	src/SimulationMetricsCollector.cpp	/^void SimulationMetricsCollector::_updateEnvironmentMetrics(GridDatabase2D * gridDB, float currentTimeStamp, float timePassedSinceLastFrame)$/;"	f	class:SimulationMetricsCollector
_updateFpsMeasurement	src/Clock.cpp	/^void Clock::_updateFpsMeasurement()$/;"	f	class:Clock
_updateStatistics	src/PerformanceProfiler.cpp	/^void PerformanceProfiler::_updateStatistics()$/;"	f	class:PerformanceProfiler
_velocity	include/modules/RecFilePlayerModule.h	/^		Util::Vector _velocity;$/;"	m	class:SteerLib::ReplayAgent
_velocityWindow	include/benchmarking/AgentMetricsCollector.h	/^	    windowArray<Util::Vector> _velocityWindow; \/\/ stores the velocity vector at each frame$/;"	m	class:SteerLib::AgentMetricsCollector
_version	include/recfileio/RecFileIOPrivate.h	/^		unsigned int _version;$/;"	m	class:SteerLib::RecFileReaderPrivate
_version	include/recfileio/RecFileIOPrivate.h	/^		unsigned int _version;$/;"	m	class:SteerLib::RecFileWriterPrivate
_waitForAllThreadsToExit	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::_waitForAllThreadsToExit() throw()$/;"	f	class:ThreadedTaskManager
_waitForFrameSync	src/Clock.cpp	/^void Clock::_waitForFrameSync(const unsigned long long & minDesiredTicks)$/;"	f	class:Clock
_waitUntilQueueHasTasksOrShutdown	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::_waitUntilQueueHasTasksOrShutdown() throw()$/;"	f	class:ThreadedTaskManager
_wallSections	include/obstacles/OrientedWallObstacle.h	/^		std::vector<OrientedBoxObstacle *> _wallSections;$/;"	m	class:SteerLib::OrientedWallObstacle
_writingFrame	include/recfileio/RecFileIOPrivate.h	/^		bool _writingFrame;$/;"	m	class:SteerLib::RecFileWriterPrivate
_xCellSize	include/griddatabase/GridDatabase2DPrivate.h	/^		float _xCellSize; \/\/ size of each cell$/;"	m	class:SteerLib::GridDatabase2DPrivate
_xGridSize	include/griddatabase/GridDatabase2DPrivate.h	/^		float _xGridSize; \/\/ size of the entire grid$/;"	m	class:SteerLib::GridDatabase2DPrivate
_xInvGridSize	include/griddatabase/GridDatabase2DPrivate.h	/^		float _xInvGridSize; \/\/ (1\/size), where size is over the entire grid.$/;"	m	class:SteerLib::GridDatabase2DPrivate
_xNumCells	include/griddatabase/GridDatabase2DPrivate.h	/^		unsigned int _xNumCells;  \/\/ number of cells along the x or z axis$/;"	m	class:SteerLib::GridDatabase2DPrivate
_xOrigin	include/griddatabase/GridDatabase2DPrivate.h	/^		float _xOrigin; \/\/ location of the min x,y point of the grid.$/;"	m	class:SteerLib::GridDatabase2DPrivate
_zCellSize	include/griddatabase/GridDatabase2DPrivate.h	/^		float _zCellSize;$/;"	m	class:SteerLib::GridDatabase2DPrivate
_zGridSize	include/griddatabase/GridDatabase2DPrivate.h	/^		float _zGridSize;$/;"	m	class:SteerLib::GridDatabase2DPrivate
_zInvGridSize	include/griddatabase/GridDatabase2DPrivate.h	/^		float _zInvGridSize;$/;"	m	class:SteerLib::GridDatabase2DPrivate
_zNumCells	include/griddatabase/GridDatabase2DPrivate.h	/^		unsigned int _zNumCells;$/;"	m	class:SteerLib::GridDatabase2DPrivate
_zOrigin	include/griddatabase/GridDatabase2DPrivate.h	/^		float _zOrigin;$/;"	m	class:SteerLib::GridDatabase2DPrivate
abs	include/util/dmatrix.h	/^inline Matrix abs(const Matrix & q)$/;"	f
acceleration	include/simulation/SteeringCommand.h	/^		float acceleration;$/;"	m	class:SteerLib::SteeringCommand
action	include/planning/BestFirstSearchPlanner.h	/^		PlanningAction action;$/;"	m	class:SteerLib::BestFirstSearchNode
add	include/griddatabase/GridCell.h	/^		inline void add(SpatialDatabaseItemPtr entry, unsigned int maxItems, float traversalCostToAdd) {$/;"	f	class:SteerLib::GridCell
addAgent	src/SimulationEngine.cpp	/^void SimulationEngine::addAgent(SteerLib::AgentInterface * newAgent, SteerLib::ModuleInterface * owner)$/;"	f	class:SimulationEngine
addCameraView	include/recfileio/RecFileIO.h	/^		inline void addCameraView( const Util::Point & pos, const Util::Point & lookat ) { addCameraView( pos.x, pos.y, pos.z, lookat.x, lookat.y, lookat.z ); }$/;"	f	class:SteerLib::RecFileWriter
addCameraView	src/RecFileWriter.cpp	/^void RecFileWriter::addCameraView( float origx, float origy, float origz, float lookatx, float lookaty, float lookatz )$/;"	f	class:RecFileWriter
addChildTag	src/XMLParser.cpp	/^void XMLTag::addChildTag(XMLTag * existingTag)$/;"	f	class:XMLTag
addCommand	src/SimulationEngine.cpp	/^void SimulationEngine::addCommand(const std::string & commandName, SteerLib::CommandFunctionPtr commandFunction)$/;"	f	class:SimulationEngine
addControlPoint	src/Curve.cpp	/^void Curve::addControlPoint(const CurvePoint& inputPoint)$/;"	f	class:Curve
addControlPoints	include/simulation/Camera.h	/^			void addControlPoints(const std::vector<Util::CurvePoint>& controlPoints) { curve.addControlPoints(controlPoints); }$/;"	f	class:SteerLib::Camera
addControlPoints	src/Curve.cpp	/^void Curve::addControlPoints(const std::vector<CurvePoint>& inputPoints)$/;"	f	class:Curve
addGoal	include/benchmarking/BenchmarkEnginePrivate.h	/^		void addGoal(const SteerLib::AgentGoalInfo & newGoal) { throw Util::GenericException("addGoals() not implemented yet for BenchmarkAgent"); }$/;"	f	class:SteerLib::BenchmarkAgent
addGoal	include/modules/DummyAIModule.h	/^		void addGoal(const SteerLib::AgentGoalInfo & newGoal) { throw Util::GenericException("addGoals() not implemented yet for DummyAgent"); }$/;"	f	class:SteerLib::DummyAgent
addGoal	include/modules/RecFilePlayerModule.h	/^		void addGoal(const SteerLib::AgentGoalInfo & newGoal) { throw Util::GenericException("addGoals() not implemented yet for ReplayAgent"); }$/;"	f	class:SteerLib::ReplayAgent
addObject	src/GridDatabase2D.cpp	/^void GridDatabase2D::addObject( SpatialDatabaseItemPtr item, const AxisAlignedBox & newBounds )$/;"	f	class:GridDatabase2D
addObstacle	src/SimulationEngine.cpp	/^void SimulationEngine::addObstacle(SteerLib::ObstacleInterface * newObstacle)$/;"	f	class:SimulationEngine
addObstacleBoundingBox	include/recfileio/RecFileIO.h	/^		inline void addObstacleBoundingBox( const Util::AxisAlignedBox & bb ) { addObstacleBoundingBox(bb.xmin, bb.xmax, bb.ymin, bb.ymax, bb.zmin, bb.zmax); }$/;"	f	class:SteerLib::RecFileWriter
addObstacleBoundingBox	src/RecFileWriter.cpp	/^void RecFileWriter::addObstacleBoundingBox( float xmin, float xmax, float ymin, float ymax, float zmin, float zmax )$/;"	f	class:RecFileWriter
addOption	src/CommandLineParser.cpp	/^void CommandLineParser::addOption(const std::string & option, void * target, CommandLineOptionTypeEnum optionDataType,$/;"	f	class:CommandLineParser
addParameter	src/Behaviour.cpp	/^void Behaviour::addParameter(BehaviourParameter param)$/;"	f	class:Behaviour
addPointOfInterest	src/Camera.cpp	/^int Camera::addPointOfInterest(const Point & pos, const Point & lookat)$/;"	f	class:Camera
addPointOfInterest	src/Camera.cpp	/^int Camera::addPointOfInterest(const Point & pos, const Point & lookat, const Vector & up)$/;"	f	class:Camera
addTask	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::addTask(const Task & newTask, bool broadcastToSleepingWorkerThreads)$/;"	f	class:ThreadedTaskManager
addTransition	src/StateMachine.cpp	/^void StateMachine::addTransition(unsigned int oldState, unsigned int newState)$/;"	f	class:StateMachine
advanceByOne	include/benchmarking/MetricsData.h	/^		void advanceByOne(T newValue) {$/;"	f	class:SteerLib::windowArray
advanceSimulationAndUpdateRealTime	src/Clock.cpp	/^void Clock::advanceSimulationAndUpdateRealTime()$/;"	f	class:Clock
agentGoals	include/benchmarking/BenchmarkEnginePrivate.h	/^		const std::queue<SteerLib::AgentGoalInfo> & agentGoals() const { throw Util::GenericException("agentGoals() not implemented yet"); }$/;"	f	class:SteerLib::BenchmarkAgent
agentGoals	include/modules/DummyAIModule.h	/^		const std::queue<SteerLib::AgentGoalInfo> & agentGoals() const { throw Util::GenericException("agentGoals() not implemented yet"); }$/;"	f	class:SteerLib::DummyAgent
agentGoals	include/modules/RecFilePlayerModule.h	/^		const std::queue<SteerLib::AgentGoalInfo> & agentGoals() const { throw Util::GenericException("agentGoals() not implemented yet"); }$/;"	f	class:SteerLib::ReplayAgent
aimForTargetDirection	include/simulation/SteeringCommand.h	/^		bool aimForTargetDirection;$/;"	m	class:SteerLib::SteeringCommand
aimForTargetSpeed	include/simulation/SteeringCommand.h	/^		bool aimForTargetSpeed;$/;"	m	class:SteerLib::SteeringCommand
alreadyExpanded	include/planning/BestFirstSearchPlanner.h	/^		bool alreadyExpanded;$/;"	m	class:SteerLib::BestFirstSearchNode
animate	src/Camera.cpp	/^void Camera::animate(float timeStamp, float dt, unsigned int frameNumber)$/;"	f	class:Camera
animateCamera	include/simulation/Camera.h	/^			bool animateCamera;$/;"	m	class:SteerLib::Camera
animateCamera	include/simulation/SimulationOptions.h	/^			bool animateCamera;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
apply	src/Camera.cpp	/^void Camera::apply()$/;"	f	class:Camera
apply_stereo	src/Camera.cpp	/^void Camera::apply_stereo(bool right)$/;"	f	class:Camera
averageKineticEnergy	include/benchmarking/MetricsData.h	/^		float averageKineticEnergy;$/;"	m	class:SteerLib::AgentMetrics
avgAccelerationOverWindow	include/benchmarking/MetricsData.h	/^		float avgAccelerationOverWindow;$/;"	m	class:SteerLib::AgentMetrics
avgAngularSpeedOverWindow	include/benchmarking/MetricsData.h	/^		float avgAngularSpeedOverWindow;$/;"	m	class:SteerLib::AgentMetrics
avgChangeInSpeedOverWindow	include/benchmarking/MetricsData.h	/^		float avgChangeInSpeedOverWindow;$/;"	m	class:SteerLib::AgentMetrics
avgSpeedOverWindow	include/benchmarking/MetricsData.h	/^		float avgSpeedOverWindow;$/;"	m	class:SteerLib::AgentMetrics
b	include/util/Color.h	/^		float r, g, b;$/;"	m	class:Util::Color
backgroundColor	include/simulation/SimulationOptions.h	/^			Util::Color backgroundColor;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
backupSimulationAndUpdateRealTime	src/Clock.cpp	/^void Clock::backupSimulationAndUpdateRealTime()$/;"	f	class:Clock
baseName	include/util/FrameSaver.h	/^	std::string baseName;$/;"	m	class:Util::FrameSaver
basename	src/Misc.cpp	/^std::string Util::basename( const std::string & path, const std::string & extension )$/;"	f	class:Util
blendingDemo	include/simulation/SimulationOptions.h	/^			bool blendingDemo;$/;"	m	struct:SteerLib::SimulationOptions::GlobalOptions
blocksLineOfSight	include/interfaces/AgentInterface.h	/^		virtual bool blocksLineOfSight() { return false; }$/;"	f	class:SteerLib::AgentInterface
blocksLineOfSight	include/obstacles/BoxObstacle.h	/^		bool blocksLineOfSight() { return _blocksLineOfSight; }$/;"	f	class:SteerLib::BoxObstacle
blocksLineOfSight	include/obstacles/CircleObstacle.h	/^		bool blocksLineOfSight() { return _blocksLineOfSight; }$/;"	f	class:SteerLib::CircleObstacle
blocksLineOfSight	include/obstacles/OrientedBoxObstacle.h	/^		bool blocksLineOfSight() { return _blocksLineOfSight; }$/;"	f	class:SteerLib::OrientedBoxObstacle
blocksLineOfSight	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool blocksLineOfSight() { return false; }$/;"	f	class:SteerLib::RawAgentInfo
blocksLineOfSight	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool blocksLineOfSight() { return false; }$/;"	f	class:SteerLib::RawBoxObstacleInfo
blocksLineOfSight	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool blocksLineOfSight() { return false; }$/;"	f	class:SteerLib::RawCircleObstacleInfo
blocksLineOfSight	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool blocksLineOfSight() { return false; }$/;"	f	class:SteerLib::RawObstacleInfo
blocksLineOfSight	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool blocksLineOfSight() { return false; }$/;"	f	class:SteerLib::RawOrientedBoxObstacleInfo
bounds	include/recfileio/RecFileIOPrivate.h	/^		RecFileBoxData bounds;  \/\/ bounding box of the obstacle.$/;"	m	struct:SteerLib::RecFileObstacleInfo
boxOverlapsCircle2D	include/util/Geometry.h	/^	static inline bool boxOverlapsCircle2D(float xmin, float xmax, float zmin, float zmax, const Point & circleCenter, float radius)$/;"	f	namespace:Util
calculatePoint	src/Curve.cpp	/^bool Curve::calculatePoint(Point& outputPoint, float time)$/;"	f	class:Curve
cameraFovy	include/simulation/SimulationOptions.h	/^			float cameraFovy;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
cameraListOffset	include/recfileio/RecFileIOPrivate.h	/^		unsigned int cameraListOffset;$/;"	m	struct:SteerLib::RecFileHeader
cameraListSize	include/recfileio/RecFileIOPrivate.h	/^		unsigned int cameraListSize;$/;"	m	struct:SteerLib::RecFileHeader
cameraLookAt	include/simulation/SimulationOptions.h	/^			Util::Point cameraLookAt;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
cameraPosition	include/simulation/SimulationOptions.h	/^			Util::Point cameraPosition;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
cameraUp	include/simulation/SimulationOptions.h	/^			Util::Vector cameraUp;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
canBeTraversed	include/griddatabase/GridDatabasePlanningDomain.h	/^		inline bool canBeTraversed(unsigned int index) const { return (_spatialDatabase->getTraversalCost(index) < 1000.0f); }$/;"	f	class:SteerLib::GridDatabasePlanningDomain
canTransitionToState	src/StateMachine.cpp	/^bool StateMachine::canTransitionToState(unsigned int newState)$/;"	f	class:StateMachine
canUseMouseSelection	include/simulation/SimulationOptions.h	/^			bool canUseMouseSelection;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
canUseMouseWheelZoom	include/simulation/SimulationOptions.h	/^			bool canUseMouseWheelZoom;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
catmullCurve	include/util/Curve.h	/^	static const int catmullCurve = 1;$/;"	m	namespace:Util
cerrRedirectionFilename	include/simulation/SimulationOptions.h	/^			std::string cerrRedirectionFilename;$/;"	m	struct:SteerLib::SimulationOptions::GlobalOptions
checkRobust	src/Curve.cpp	/^bool Curve::checkRobust()$/;"	f	class:Curve
circleOverlapsCircle2D	include/util/Geometry.h	/^	static inline bool circleOverlapsCircle2D(const Point & c1, float r1, const Point & c2, float r2)$/;"	f	namespace:Util
clamp	include/util/Geometry.h	/^	static inline Vector clamp( const Vector & vec, float maxLength ) {$/;"	f	namespace:Util
cleanupSimulation	include/interfaces/ModuleInterface.h	/^		virtual void cleanupSimulation() { }$/;"	f	class:SteerLib::ModuleInterface
cleanupSimulation	src/RecFilePlayerModule.cpp	/^void RecFilePlayerModule::cleanupSimulation()$/;"	f	class:RecFilePlayerModule
cleanupSimulation	src/SimulationEngine.cpp	/^void SimulationEngine::cleanupSimulation()$/;"	f	class:SimulationEngine
cleanupSimulation	src/TestCasePlayerModule.cpp	/^void TestCasePlayerModule::cleanupSimulation() {$/;"	f	class:TestCasePlayerModule
clear	src/SteeringCommand.cpp	/^void SteeringCommand::clear()$/;"	f	class:SteeringCommand
clearGoals	include/benchmarking/BenchmarkEnginePrivate.h	/^		void clearGoals() { throw Util::GenericException("clearGoals() not implemented yet for BenchmarkAgent"); }$/;"	f	class:SteerLib::BenchmarkAgent
clearGoals	include/modules/DummyAIModule.h	/^		void clearGoals() { throw Util::GenericException("clearGoals() not implemented yet for DummyAgent"); }$/;"	f	class:SteerLib::DummyAgent
clearGoals	include/modules/RecFilePlayerModule.h	/^		void clearGoals() { throw Util::GenericException("clearGoals() not implemented yet for ReplayAgent"); }$/;"	f	class:SteerLib::ReplayAgent
clockMode	include/simulation/SimulationOptions.h	/^			std::string clockMode;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
clogRedirectionFilename	include/simulation/SimulationOptions.h	/^			std::string clogRedirectionFilename;$/;"	m	struct:SteerLib::SimulationOptions::GlobalOptions
close	src/MemoryMapper.cpp	/^void MemoryMapper::close()$/;"	f	class:MemoryMapper
close	src/RecFileReader.cpp	/^void RecFileReader::close()$/;"	f	class:RecFileReader
collidesAtTimeWith	include/interfaces/AgentInterface.h	/^		virtual bool collidesAtTimeWith(const Util::Point & p1, const Util::Vector & directiontToRightOfAgent, float otherAgentRadius, float timeStamp, float otherAgentFootX, float otherAgentFootZ)$/;"	f	class:SteerLib::AgentInterface
collisionKey	include/benchmarking/MetricsData.h	/^		uintptr_t collisionKey;$/;"	m	struct:SteerLib::CollisionInfo
collisionScore	include/benchmarking/MetricsData.h	/^		unsigned int collisionScore;$/;"	m	class:SteerLib::AgentMetrics
color	include/testcaseio/AgentInitialConditions.h	/^		Util::Color color;$/;"	m	struct:SteerLib::AgentInitialConditions
color	include/testcaseio/TestCaseIOPrivate.h	/^		Util::Color color;$/;"	m	class:SteerLib::RawAgentInfo
colorSet	include/testcaseio/AgentInitialConditions.h	/^		bool colorSet;$/;"	m	struct:SteerLib::AgentInitialConditions
colorSet	include/testcaseio/TestCaseIOPrivate.h	/^		bool colorSet;$/;"	m	class:SteerLib::RawAgentInfo
commandLineEngineDriverOptions	include/simulation/SimulationOptions.h	/^		CommandLineEngineDriverOptions   commandLineEngineDriverOptions;$/;"	m	class:SteerLib::SimulationOptions
compareDistance	include/interfaces/AgentInterface.h	/^		bool compareDistance(SteerLib::AgentInterface * a1, SteerLib::AgentInterface * a2 )$/;"	f	class:SteerLib::AgentInterface
computeBoxCirclePenetration2D	include/util/Geometry.h	/^	static inline float computeBoxCirclePenetration2D(float xmin, float xmax, float zmin, float zmax, const Point & circleCenter, float radius)$/;"	f	namespace:Util
computeCircleCirclePenetration2D	include/util/Geometry.h	/^	static inline float computeCircleCirclePenetration2D(const Point & c1, float r1, const Point & c2, float r2)$/;"	f	namespace:Util
computePenetration	include/benchmarking/BenchmarkEnginePrivate.h	/^		float computePenetration(const Util::Point & p, float radius) { return Util::computeCircleCirclePenetration2D( _position, _radius, p, radius); }$/;"	f	class:SteerLib::BenchmarkAgent
computePenetration	include/modules/DummyAIModule.h	/^		float computePenetration(const Util::Point & p, float radius) { return Util::computeCircleCirclePenetration2D( _position, _radius, p, radius); }$/;"	f	class:SteerLib::DummyAgent
computePenetration	include/modules/RecFilePlayerModule.h	/^		float computePenetration(const Util::Point & p, float radius) { return Util::computeCircleCirclePenetration2D( _position, _radius, p, radius); }$/;"	f	class:SteerLib::ReplayAgent
computePenetration	include/obstacles/BoxObstacle.h	/^		virtual float computePenetration(const Util::Point & p, float radius) { return Util::computeBoxCirclePenetration2D(_bounds.xmin, _bounds.xmax, _bounds.zmin, _bounds.zmax, p, radius); }$/;"	f	class:SteerLib::BoxObstacle
computePenetration	include/obstacles/CircleObstacle.h	/^		virtual float computePenetration(const Util::Point & p, float radius) { return Util::computeCircleCirclePenetration2D(_centerPosition, _radius, p, radius); }$/;"	f	class:SteerLib::CircleObstacle
computePenetration	include/obstacles/OrientedBoxObstacle.h	/^		virtual float computePenetration(const Util::Point & p, float radius) $/;"	f	class:SteerLib::OrientedBoxObstacle
computePenetration	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float computePenetration(const Util::Point & p, float radius) { return 0.0; }$/;"	f	class:SteerLib::RawObstacleInfo
computePenetration	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float computePenetration(const Util::Point & p, float radius) { return Util::computeBoxCirclePenetration2D(obstacleBounds.xmin, obstacleBounds.xmax, obstacleBounds.zmin, obstacleBounds.zmax, p, radius); }$/;"	f	class:SteerLib::RawBoxObstacleInfo
computePenetration	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float computePenetration(const Util::Point & p, float radius) { return Util::computeCircleCirclePenetration2D( position, this->radius, p, radius); }$/;"	f	class:SteerLib::RawAgentInfo
computePenetration	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float computePenetration(const Util::Point & p, float radius) { return Util::computeCircleCirclePenetration2D(this->position, this->radius, p, radius); }$/;"	f	class:SteerLib::RawCircleObstacleInfo
computePenetration	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float computePenetration(const Util::Point & p, float radius) {$/;"	f	class:SteerLib::RawOrientedBoxObstacleInfo
computePlan	include/planning/BestFirstSearchPlanner.h	/^	bool BestFirstSearchPlanner< PlanningDomain, PlanningState, PlanningAction >::computePlan( const PlanningState & startState, const PlanningState & goalState, std::stack<PlanningAction> & plan )$/;"	f	class:SteerLib::BestFirstSearchPlanner
computePlan	include/planning/BestFirstSearchPlanner.h	/^	bool BestFirstSearchPlanner< PlanningDomain, PlanningState, PlanningAction >::computePlan( const PlanningState & startState, const PlanningState & goalState, std::stack<PlanningState> & plan )$/;"	f	class:SteerLib::BestFirstSearchPlanner
conflicts	include/interfaces/EngineInterface.h	/^		std::set<std::string> conflicts;$/;"	m	struct:SteerLib::ModuleMetaInformation
controlPoints	include/util/Curve.h	/^			std::vector<CurvePoint> controlPoints;$/;"	m	class:Util::Curve
convertToBarycentric	include/util/Geometry.h	/^	static inline Vector convertToBarycentric(std::vector<Point> points, Point point)$/;"	f	namespace:Util
cost	include/planning/BestFirstSearchPlanner.h	/^		float cost;$/;"	m	class:SteerLib::DefaultAction
coutRedirectionFilename	include/simulation/SimulationOptions.h	/^			std::string coutRedirectionFilename;$/;"	m	struct:SteerLib::SimulationOptions::GlobalOptions
createAgent	include/interfaces/ModuleInterface.h	/^		virtual SteerLib::AgentInterface * createAgent() { return NULL; }$/;"	f	class:SteerLib::ModuleInterface
createAgent	include/modules/DummyAIModule.h	/^		SteerLib::AgentInterface * createAgent() { return new DummyAgent; }$/;"	f	class:SteerLib::DummyAIModule
createAgent	src/SimulationEngine.cpp	/^SteerLib::AgentInterface * SimulationEngine::createAgent(const SteerLib::AgentInitialConditions & initialConditions, SteerLib::ModuleInterface * owner)$/;"	f	class:SimulationEngine
createBenchmarkTechnique	include/benchmarking/BenchmarkEngine.h	/^	static inline SteerLib::BenchmarkTechniqueInterface * createBenchmarkTechnique(const std::string & techniqueName)$/;"	f	namespace:SteerLib
createChildTag	src/XMLParser.cpp	/^XMLTag * XMLTag::createChildTag(const std::string & childTagName, const std::string & description, XMLTagTypeEnum tagDataType, void * dataTarget, XMLParserCallbackInterface * callbackInterface)$/;"	f	class:XMLTag
createObstacle	include/testcaseio/ObstacleInitialConditions.h	/^		virtual ObstacleInterface* createObstacle() { return new SteerLib::BoxObstacle(xmin, xmax, ymin, ymax, zmin, zmax); }$/;"	f	struct:SteerLib::BoxObstacleInitialConditions
createObstacle	include/testcaseio/ObstacleInitialConditions.h	/^		virtual ObstacleInterface* createObstacle() { return new SteerLib::CircleObstacle(position, radius, position.y, position.y+height); }$/;"	f	struct:SteerLib::CircleObstacleInitialConditions
createObstacle	include/testcaseio/ObstacleInitialConditions.h	/^		virtual ObstacleInterface* createObstacle() { return new SteerLib::OrientedBoxObstacle(position, lengthX, lengthZ, position.y, position.y+height, thetaY); }$/;"	f	struct:SteerLib::OrientedBoxObstacleInitialConditions
createObstacle	include/testcaseio/ObstacleInitialConditions.h	/^		virtual ObstacleInterface* createObstacle() { return new SteerLib::OrientedWallObstacle(position, lengthX, lengthZ, position.y, position.y+height, thetaY, doorLocation, doorRadius); }$/;"	f	struct:SteerLib::OrientedWallObstacleInitialConditions
createRootTag	src/XMLParser.cpp	/^XMLTag * XMLParser::createRootTag(const std::string & rootTagName, const std::string & description, XMLTagTypeEnum tagDataType, void * dataTarget, XMLParserCallbackInterface * callbackInterface)$/;"	f	class:XMLParser
cross	include/util/Geometry.h	/^	static inline Vector cross(const Vector &vec1, const Vector &vec2) {$/;"	f	namespace:Util
currentFrameNumber	include/benchmarking/BenchmarkEngine.h	/^		unsigned int currentFrameNumber() { return _currentFrameNumber; }$/;"	f	class:SteerLib::BenchmarkEngine
currentGoal	include/benchmarking/BenchmarkEnginePrivate.h	/^		const SteerLib::AgentGoalInfo & currentGoal() const { return _currentGoal; }$/;"	f	class:SteerLib::BenchmarkAgent
currentGoal	include/modules/DummyAIModule.h	/^		const SteerLib::AgentGoalInfo & currentGoal() const { return _currentGoal; }$/;"	f	class:SteerLib::DummyAgent
currentGoal	include/modules/RecFilePlayerModule.h	/^		const SteerLib::AgentGoalInfo & currentGoal() const { return _currentGoal; }$/;"	f	class:SteerLib::ReplayAgent
curve	include/simulation/Camera.h	/^			Util::Curve curve;$/;"	m	class:SteerLib::Camera
data	include/util/ThreadedTaskManager.h	/^		void * data;$/;"	m	struct:Util::Task
dataFileName	include/simulation/SimulationOptions.h	/^			std::string dataFileName;$/;"	m	struct:SteerLib::SimulationOptions::GlobalOptions
dataType	include/util/CommandLineParser.h	/^			CommandLineOptionTypeEnum dataType;$/;"	m	struct:Util::CommandLineParser::OptionInfo
dependencies	include/interfaces/EngineInterface.h	/^		std::set<ModuleMetaInformation*> dependencies;$/;"	m	struct:SteerLib::ModuleMetaInformation
description	include/testcaseio/TestCaseIOPrivate.h	/^		std::string description;$/;"	m	class:SteerLib::TestCaseHeader
desiredSpeed	include/testcaseio/AgentInitialConditions.h	/^		float desiredSpeed;$/;"	m	struct:SteerLib::AgentGoalInfo
despawn_time	include/testcaseio/TestCaseIOPrivate.h	/^		float spawn_time, despawn_time;$/;"	m	class:SteerLib::RawAgentInfo
destroyAgent	include/interfaces/ModuleInterface.h	/^		virtual void destroyAgent( SteerLib::AgentInterface * agent ) { }$/;"	f	class:SteerLib::ModuleInterface
destroyAgent	include/modules/DummyAIModule.h	/^		void destroyAgent( SteerLib::AgentInterface * agent ) { assert(agent!=NULL);  delete agent;  agent = NULL; }$/;"	f	class:SteerLib::DummyAIModule
destroyAgent	src/SimulationEngine.cpp	/^void SimulationEngine::destroyAgent(SteerLib::AgentInterface * agentToDestroy)$/;"	f	class:SimulationEngine
destroyAllAgentsFromModule	src/SimulationEngine.cpp	/^void SimulationEngine::destroyAllAgentsFromModule(SteerLib::ModuleInterface * owner)$/;"	f	class:SimulationEngine
destroyBenchmarkTechnique	include/benchmarking/BenchmarkEngine.h	/^	static inline void destroyBenchmarkTechnique( SteerLib::BenchmarkTechniqueInterface * technique )$/;"	f	namespace:SteerLib
det	include/util/dmatrix.h	/^inline double det(const Matrix& q) {$/;"	f
diag	include/util/dmatrix.h	/^inline Matrix diag(const Matrix & q) { $/;"	f
dir	include/recfileio/RecFileIOPrivate.h	/^		RecFileVectorData dir;$/;"	m	struct:SteerLib::RecFileAgentInfo
dir	include/util/Geometry.h	/^		Vector dir;$/;"	m	class:Util::Ray
direction	include/testcaseio/AgentInitialConditions.h	/^		Util::Vector direction;$/;"	m	struct:SteerLib::AgentInitialConditions
direction	include/testcaseio/TestCaseIOPrivate.h	/^		Util::Vector direction;$/;"	m	class:SteerLib::RawAgentInfo
disable	include/benchmarking/BenchmarkEnginePrivate.h	/^		void disable()$/;"	f	class:SteerLib::BenchmarkAgent
disable	include/modules/DummyAIModule.h	/^		void disable() {}$/;"	f	class:SteerLib::DummyAgent
disable	include/modules/RecFilePlayerModule.h	/^		void disable() {};$/;"	f	class:SteerLib::ReplayAgent
disableLights	src/DrawLib.cpp	/^void DrawLib::disableLights()$/;"	f	class:DrawLib
displacementOverWindow	include/benchmarking/MetricsData.h	/^		float displacementOverWindow;$/;"	m	class:SteerLib::AgentMetrics
displayStatistics	src/PerformanceProfiler.cpp	/^void PerformanceProfiler::displayStatistics(std::ostream & out)$/;"	f	class:PerformanceProfiler
distanceBetween	include/util/Geometry.h	/^	static inline float distanceBetween(const Point &pt1, const Point &pt2) { return (pt1 - pt2).length(); }$/;"	f	namespace:Util
distanceSquaredBetween	include/util/Geometry.h	/^	static inline float distanceSquaredBetween(const Point &pt1, const Point &pt2) { return (pt1 - pt2).lengthSquared(); }$/;"	f	namespace:Util
dll	include/interfaces/EngineInterface.h	/^		Util::DynamicLibrary * dll;$/;"	m	struct:SteerLib::ModuleMetaInformation
doorLocation	include/obstacles/OrientedWallObstacle.h	/^		double doorLocation;$/;"	m	class:SteerLib::OrientedWallObstacle
doorLocation	include/testcaseio/ObstacleInitialConditions.h	/^		double doorLocation, doorRadius;$/;"	m	struct:SteerLib::OrientedWallObstacleInitialConditions
doorLocation	include/testcaseio/TestCaseIOPrivate.h	/^		double doorLocation;$/;"	m	class:SteerLib::RawOrientedWallObstacleInfo
doorRadius	include/obstacles/OrientedWallObstacle.h	/^		double doorRadius;$/;"	m	class:SteerLib::OrientedWallObstacle
doorRadius	include/testcaseio/ObstacleInitialConditions.h	/^		double doorLocation, doorRadius;$/;"	m	struct:SteerLib::OrientedWallObstacleInitialConditions
doorRadius	include/testcaseio/TestCaseIOPrivate.h	/^		double doorRadius;$/;"	m	class:SteerLib::RawOrientedWallObstacleInfo
dot	include/util/Geometry.h	/^	static inline float dot(const Point &vec1, const Point &vec2) { return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z; }$/;"	f	namespace:Util
dot	include/util/Geometry.h	/^	static inline float dot(const Point &vec1, const Vector &vec2) { return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z; }$/;"	f	namespace:Util
dot	include/util/Geometry.h	/^	static inline float dot(const Vector &vec1, const Point &vec2) { return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z; }$/;"	f	namespace:Util
dot	include/util/Geometry.h	/^	static inline float dot(const Vector &vec1, const Vector &vec2) { return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z; }$/;"	f	namespace:Util
draw	include/benchmarking/BenchmarkEnginePrivate.h	/^		void draw() {$/;"	f	class:SteerLib::BenchmarkAgent
draw	include/interfaces/ModuleInterface.h	/^		virtual void draw() { }$/;"	f	class:SteerLib::ModuleInterface
draw	include/modules/DummyAIModule.h	/^		void draw() {$/;"	f	class:SteerLib::DummyAgent
draw	src/BoxObstacle.cpp	/^void BoxObstacle::draw() {$/;"	f	class:BoxObstacle
draw	src/CircleObstacle.cpp	/^void CircleObstacle::draw() {$/;"	f	class:CircleObstacle
draw	src/GridDatabase2D.cpp	/^void GridDatabase2D::draw()$/;"	f	class:GridDatabase2D
draw	src/OrientedBoxObstacle.cpp	/^void OrientedBoxObstacle::draw() {$/;"	f	class:OrientedBoxObstacle
draw	src/OrientedWallObstacle.cpp	/^void OrientedWallObstacle::draw()$/;"	f	class:OrientedWallObstacle
draw	src/RecFilePlayerModule.cpp	/^void ReplayAgent::draw()$/;"	f	class:ReplayAgent
draw	src/SimulationEngine.cpp	/^void SimulationEngine::draw()$/;"	f	class:SimulationEngine
drawAgentDisc	src/DrawLib.cpp	/^void DrawLib::drawAgentDisc(const Point & pos, const Vector & dir, float radius, const Color& color)$/;"	f	class:DrawLib
drawAgentDisc	src/DrawLib.cpp	/^void DrawLib::drawAgentDisc(const Point & pos, float radius, const Color& color)$/;"	f	class:DrawLib
drawBox	src/DrawLib.cpp	/^void DrawLib::drawBox(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax)$/;"	f	class:DrawLib
drawBoxWireFrame	src/DrawLib.cpp	/^void DrawLib::drawBoxWireFrame(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax)$/;"	f	class:DrawLib
drawCircle	src/DrawLib.cpp	/^void DrawLib::drawCircle(const Point & loc, const Color& color, float scale, int points)$/;"	f	class:DrawLib
drawCube	src/DrawLib.cpp	/^void DrawLib::drawCube()$/;"	f	class:DrawLib
drawCurve	src/Curve.cpp	/^void Curve::drawCurve(Color curveColor, float curveThickness, int window)$/;"	f	class:Curve
drawCylinder	src/DrawLib.cpp	/^void DrawLib::drawCylinder(const Point & pos, float radius, float ymin, float ymax )$/;"	f	class:DrawLib
drawCylinder	src/DrawLib.cpp	/^void DrawLib::drawCylinder(const Point & pos, float radius, float ymin, float ymax, Color color)$/;"	f	class:DrawLib
drawFlag	src/DrawLib.cpp	/^void DrawLib::drawFlag(const Point & loc, const Color& color, float scale)$/;"	f	class:DrawLib
drawGrid	include/simulation/SimulationOptions.h	/^			bool drawGrid;$/;"	m	struct:SteerLib::SimulationOptions::GridDatabaseOptions
drawHighlight	src/DrawLib.cpp	/^void DrawLib::drawHighlight(const Point & pos, const Vector & dir, float radius, const Color& color)$/;"	f	class:DrawLib
drawLine	src/DrawLib.cpp	/^void DrawLib::drawLine(const Point & startPoint, const Point & endPoint)$/;"	f	class:DrawLib
drawLine	src/DrawLib.cpp	/^void DrawLib::drawLine(const Point & startPoint, const Point & endPoint, const Color &color)$/;"	f	class:DrawLib
drawLine	src/DrawLib.cpp	/^void DrawLib::drawLine(const Point & startPoint, const Point & endPoint, const Color &color, float thickness)$/;"	f	class:DrawLib
drawLineAlpha	src/DrawLib.cpp	/^void DrawLib::drawLineAlpha(const Point & startPoint, const Point & endPoint, const Color &color, float alpha)$/;"	f	class:DrawLib
drawQuad	src/DrawLib.cpp	/^void DrawLib::drawQuad(const Point & a, const Point & b, const Point & c, const Point & d)$/;"	f	class:DrawLib
drawSphere	src/DrawLib.cpp	/^void DrawLib::drawSphere()$/;"	f	class:DrawLib
drawStar	src/DrawLib.cpp	/^void DrawLib::drawStar(const Point & pos, const Vector & dir, float radius, const Color& color)$/;"	f	class:DrawLib
dtToNextFrame	include/recfileio/RecFileIOPrivate.h	/^		float dtToNextFrame;$/;"	m	struct:SteerLib::RecFileFrameInfo
dumpTestCase	include/simulation/SimulationOptions.h	/^			int dumpTestCase;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
dynamicsSteeringForce	include/simulation/SteeringCommand.h	/^		Util::Vector dynamicsSteeringForce;$/;"	m	class:SteerLib::SteeringCommand
ekfControlUpdate	include/benchmarking/BayesianFilter.h	/^inline void ekfControlUpdate(Matrix& xHat, Matrix& Sigma, const Matrix& u, size_t mDim,  $/;"	f
ekfControlUpdate	include/benchmarking/BayesianFilter.h	/^inline void ekfControlUpdate(Matrix& xHat, Matrix& Sigma, const Matrix& u, size_t mDim, $/;"	f
ekfMeasurementUpdate	include/benchmarking/BayesianFilter.h	/^inline void ekfMeasurementUpdate(Matrix& xHat, Matrix& Sigma, const Matrix& z, $/;"	f
ekfMeasurementUpdate	include/benchmarking/BayesianFilter.h	/^inline void ekfMeasurementUpdate(Matrix& xHat, Matrix& Sigma, const Matrix& z, size_t nDim,$/;"	f
enableLights	src/DrawLib.cpp	/^void DrawLib::enableLights()$/;"	f	class:DrawLib
enabled	include/benchmarking/BenchmarkEnginePrivate.h	/^		bool enabled() const { return _enabled; }$/;"	f	class:SteerLib::BenchmarkAgent
enabled	include/modules/DummyAIModule.h	/^		bool enabled() const { return true; }$/;"	f	class:SteerLib::DummyAgent
enabled	include/modules/RecFilePlayerModule.h	/^		bool enabled() const { return _enabled; }$/;"	f	class:SteerLib::ReplayAgent
enabled	include/recfileio/RecFileIOPrivate.h	/^		bool enabled;$/;"	m	struct:SteerLib::RecFileAgentInfo
end	include/benchmarking/MetricsData.h	/^		unsigned int start, end;$/;"	m	class:SteerLib::windowArray
endElement	include/util/XMLParser.h	/^		virtual void endElement( Util::XMLTag * tag, const ticpp::Element * subRoot ) { }$/;"	f	class:Util::XMLParserCallbackInterface
endTime	include/benchmarking/MetricsData.h	/^		float endTime;$/;"	m	struct:SteerLib::CollisionInfo
endsWith	src/Misc.cpp	/^bool Util::endsWith( const std::string & str, const std::string & extension )$/;"	f	class:Util
engineDriver	include/simulation/SimulationOptions.h	/^			std::string engineDriver;$/;"	m	struct:SteerLib::SimulationOptions::GlobalOptions
engineOptions	include/simulation/SimulationOptions.h	/^		EngineOptions   engineOptions;$/;"	m	class:SteerLib::SimulationOptions
enkfControlUpdate	include/benchmarking/BayesianFilter.h	/^inline void enkfControlUpdate(std::vector<Matrix>& X, const Matrix& u, size_t mDim,$/;"	f
enkfMeasurementUpdate	include/benchmarking/BayesianFilter.h	/^inline void enkfMeasurementUpdate(std::vector<Matrix>& X, const Matrix& z,$/;"	f
enksControlUpdate	include/benchmarking/BayesianFilter.h	/^inline void enksControlUpdate(std::vector< std::vector<Matrix> >& Xs, const Matrix& u, size_t mDim, Matrix (*f)(const Matrix&, const Matrix&, const Matrix&)) $/;"	f
enksMeasurementUpdate	include/benchmarking/BayesianFilter.h	/^inline void enksMeasurementUpdate(std::vector< std::vector<Matrix> >& Xs, const Matrix& z, size_t nDim, Matrix (*h)(const Matrix&, const Matrix&)) $/;"	f
ensembleKalmanFilter	include/benchmarking/BayesianFilter.h	/^inline void ensembleKalmanFilter(std::vector<Matrix>& X, const Matrix& u, const Matrix& z, size_t mDim,$/;"	f
ensembleKalmanSmoother	include/benchmarking/BayesianFilter.h	/^inline void ensembleKalmanSmoother(std::vector< std::vector<Matrix> >& Xs, const Matrix& u, const Matrix& z, $/;"	f
estimateTotalCost	include/griddatabase/GridDatabasePlanningDomain.h	/^		inline float estimateTotalCost( const unsigned int & currentState, const unsigned int & idealGoalState, float currentg) {$/;"	f	class:SteerLib::GridDatabasePlanningDomain
eval	include/util/Geometry.h	/^		Point eval(float t) const { return pos + dir * t; }$/;"	f	class:Util::Ray
exp	include/util/dmatrix.h	/^inline Matrix exp(const Matrix& q) {$/;"	f
extendedKalmanFilter	include/benchmarking/BayesianFilter.h	/^inline void extendedKalmanFilter(Matrix& xHat, Matrix& Sigma, const Matrix& u, const Matrix& z, $/;"	f
f	include/planning/BestFirstSearchPlanner.h	/^		float f;$/;"	m	class:SteerLib::BestFirstSearchNode
f1_used_in_getFramesForTimeFunction	include/recfileio/RecFileIOPrivate.h	/^		unsigned int f1_used_in_getFramesForTimeFunction, f2_used_in_getFramesForTimeFunction;$/;"	m	class:SteerLib::RecFileReaderPrivate
f2_used_in_getFramesForTimeFunction	include/recfileio/RecFileIOPrivate.h	/^		unsigned int f1_used_in_getFramesForTimeFunction, f2_used_in_getFramesForTimeFunction;$/;"	m	class:SteerLib::RecFileReaderPrivate
fileCanBeOpened	src/Misc.cpp	/^bool Util::fileCanBeOpened(const std::string & filename)$/;"	f	class:Util
filePath	include/util/FrameSaver.h	/^	std::string filePath;$/;"	m	class:Util::FrameSaver
findPath	src/GridDatabase2D.cpp	/^bool GridDatabase2D::findPath (Util::Point &startPosition, Util::Point &endPosition, std::vector<Util::Point> & path,$/;"	f	class:GridDatabase2D
findSmoothPath	src/GridDatabase2D.cpp	/^bool GridDatabase2D::findSmoothPath (Util::Point &startPosition, Util::Point &endPosition, std::vector<Util::Point> & path,$/;"	f	class:GridDatabase2D
findTimeInterval	src/Curve.cpp	/^bool Curve::findTimeInterval(unsigned int& nextPoint, float time)$/;"	f	class:Curve
finish	include/modules/DummyAIModule.h	/^		void finish() { }$/;"	f	class:SteerLib::DummyAIModule
finish	include/modules/MetricsCollectorModule.h	/^		void finish() {$/;"	f	class:SteerLib::MetricsCollectorModule
finish	include/modules/SimulationRecorderModule.h	/^		void finish() { }$/;"	f	class:SteerLib::SimulationRecorderModule
finish	include/modules/SteerBenchModule.h	/^		void finish() { }$/;"	f	class:SteerLib::SteerBenchModule
finish	include/modules/SteerBugModule.h	/^		void finish() { }$/;"	f	class:SteerLib::SteerBugModule
finish	src/RecFilePlayerModule.cpp	/^void RecFilePlayerModule::finish()$/;"	f	class:RecFilePlayerModule
finish	src/SimulationEngine.cpp	/^void SimulationEngine::finish()$/;"	f	class:SimulationEngine
finish	src/TestCasePlayerModule.cpp	/^void TestCasePlayerModule::finish() {$/;"	f	class:TestCasePlayerModule
finishFrame	src/RecFileWriter.cpp	/^void RecFileWriter::finishFrame()$/;"	f	class:RecFileWriter
finishRecording	include/modules/SimulationRecorderModule.h	/^		void finishRecording ()$/;"	f	class:SteerLib::SimulationRecorderModule
finishRecording	src/RecFileWriter.cpp	/^void RecFileWriter::finishRecording()$/;"	f	class:RecFileWriter
finished	include/interfaces/AgentInterface.h	/^		virtual bool finished(void) { return enabled(); }$/;"	f	class:SteerLib::AgentInterface
firstFrameOffset	include/recfileio/RecFileIOPrivate.h	/^		unsigned int firstFrameOffset;$/;"	m	struct:SteerLib::RecFileHeader
fixedFPS	include/simulation/SimulationOptions.h	/^			float fixedFPS;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
flagIfOptionSpecified	include/util/CommandLineParser.h	/^			bool flagIfOptionSpecified;$/;"	m	struct:Util::CommandLineParser::OptionInfo
flagTarget	include/util/CommandLineParser.h	/^			bool * flagTarget;$/;"	m	struct:Util::CommandLineParser::OptionInfo
flowType	include/testcaseio/AgentInitialConditions.h	/^		std::string flowType;$/;"	m	struct:SteerLib::AgentGoalInfo
forward	include/benchmarking/BenchmarkEnginePrivate.h	/^		Util::Vector forward() const { return _forward; }$/;"	f	class:SteerLib::BenchmarkAgent
forward	include/modules/DummyAIModule.h	/^		Util::Vector forward() const { return _forward; }$/;"	f	class:SteerLib::DummyAgent
forward	include/modules/RecFilePlayerModule.h	/^		Util::Vector forward() const { return _forward; }$/;"	f	class:SteerLib::ReplayAgent
fovy	include/simulation/Camera.h	/^			float fovy;$/;"	m	class:SteerLib::CameraView
fovy	src/Camera.cpp	/^const float Camera::fovy() const$/;"	f	class:Camera
frameDumpDirectory	include/simulation/SimulationOptions.h	/^			std::string frameDumpDirectory;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
frameOffset	include/recfileio/RecFileIOPrivate.h	/^		unsigned int frameOffset;$/;"	m	struct:SteerLib::RecFileFrameInfo
frameSize	include/recfileio/RecFileIOPrivate.h	/^		unsigned int frameSize;$/;"	m	struct:SteerLib::RecFileHeader
frameTableOffset	include/recfileio/RecFileIOPrivate.h	/^		unsigned int frameTableOffset;$/;"	m	struct:SteerLib::RecFileHeader
frameTableSize	include/recfileio/RecFileIOPrivate.h	/^		unsigned int frameTableSize;$/;"	m	struct:SteerLib::RecFileHeader
fromRandom	include/testcaseio/AgentInitialConditions.h	/^		bool fromRandom;$/;"	m	struct:SteerLib::AgentInitialConditions
fullscreen	include/simulation/SimulationOptions.h	/^			bool fullscreen;$/;"	m	struct:SteerLib::SimulationOptions::GLFWEngineDriverOptions
function	include/util/ThreadedTaskManager.h	/^		TaskFunctionPtr function;$/;"	m	struct:Util::Task
g	include/planning/BestFirstSearchPlanner.h	/^		float g;$/;"	m	class:SteerLib::BestFirstSearchNode
g	include/util/Color.h	/^		float r, g, b;$/;"	m	class:Util::Color
generateConfigFile	src/SimulationOptions.cpp	/^void SimulationOptions::generateConfigFile( const std::string & filename )$/;"	f	class:SimulationOptions
generateTransitions	include/griddatabase/GridDatabasePlanningDomain.h	/^		inline void generateTransitions( const unsigned int & currentState, const unsigned int & previousState, const unsigned int & idealGoalState, std::vector<SteerLib::DefaultAction<unsigned int> > & transitions )$/;"	f	class:SteerLib::GridDatabasePlanningDomain
getAgentBenchmarkScore	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		float getAgentBenchmarkScore(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
getAgentBenchmarkScore	include/benchmarking/EnergyEfficiencyTechnique.h	/^		float getAgentBenchmarkScore(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
getAgentBenchmarkScore	src/BenchmarkEngine.cpp	/^float BenchmarkEngine::getAgentBenchmarkScore(unsigned int agentIndex)$/;"	f	class:BenchmarkEngine
getAgentBenchmarkScore	src/CompositeTechnique01.cpp	/^float CompositeBenchmarkTechnique01::getAgentBenchmarkScore(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:CompositeBenchmarkTechnique01
getAgentBenchmarkScore	src/CompositeTechnique02.cpp	/^float CompositeBenchmarkTechnique02::getAgentBenchmarkScore(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:CompositeBenchmarkTechnique02
getAgentBenchmarkScore	src/CompositeTechniquePLE.cpp	/^float CompositeBenchmarkTechniquePLE::getAgentBenchmarkScore(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:CompositeBenchmarkTechniquePLE
getAgentCollector	include/benchmarking/SimulationMetricsCollector.h	/^	    AgentMetricsCollector * getAgentCollector(unsigned int agentIndex) { return _agentCollectors[agentIndex]; }$/;"	f	class:SteerLib::SimulationMetricsCollector
getAgentConditions	include/interfaces/AgentInterface.h	/^		static SteerLib::AgentInitialConditions getAgentConditions(SteerLib::AgentInterface * agentInterface)$/;"	f	class:SteerLib::AgentInterface
getAgentGoalAtFrame	include/recfileio/RecFileIO.h	/^		inline Util::Point getAgentGoalAtFrame( unsigned int agentIndex, unsigned int frameNumber ) { Util::Point p; getAgentGoalAtFrame(agentIndex, frameNumber, p.x, p.y, p.z); return p;}$/;"	f	class:SteerLib::RecFileReader
getAgentGoalAtFrame	src/RecFileReader.cpp	/^void RecFileReader::getAgentGoalAtFrame( unsigned int agentIndex, unsigned int frameNumber, float &goalx, float &goaly, float &goalz )$/;"	f	class:RecFileReader
getAgentGoalAtTime	include/recfileio/RecFileIO.h	/^		inline Util::Point getAgentGoalAtTime( unsigned int agentIndex, float time ) { Util::Point p; getAgentGoalAtTime(agentIndex, time, p.x, p.y, p.z); return p;}$/;"	f	class:SteerLib::RecFileReader
getAgentGoalAtTime	src/RecFileReader.cpp	/^void RecFileReader::getAgentGoalAtTime( unsigned int agentIndex, float time, float &goalx, float &goaly, float &goalz )$/;"	f	class:RecFileReader
getAgentInitialConditions	include/testcaseio/TestCaseIO.h	/^		inline const AgentInitialConditions & getAgentInitialConditions(unsigned int agentIndex) const { return _initializedAgents.at(agentIndex); }$/;"	f	class:SteerLib::TestCaseReader
getAgentLocationAtFrame	include/recfileio/RecFileIO.h	/^		inline Util::Point getAgentLocationAtFrame( unsigned int agentIndex, unsigned int frameNumber ) { Util::Point p; getAgentLocationAtFrame(agentIndex, frameNumber, p.x, p.y, p.z); return p;}$/;"	f	class:SteerLib::RecFileReader
getAgentLocationAtFrame	src/RecFileReader.cpp	/^void RecFileReader::getAgentLocationAtFrame( unsigned int agentIndex, unsigned int frameNumber, float &posx, float &posy, float &posz )$/;"	f	class:RecFileReader
getAgentLocationAtTime	include/recfileio/RecFileIO.h	/^		inline Util::Point getAgentLocationAtTime( unsigned int agentIndex, float time ) { Util::Point p; getAgentLocationAtTime(agentIndex, time, p.x, p.y, p.z); return p;}$/;"	f	class:SteerLib::RecFileReader
getAgentLocationAtTime	src/RecFileReader.cpp	/^void RecFileReader::getAgentLocationAtTime( unsigned int agentIndex, float time, float &posx, float &posy, float &posz )$/;"	f	class:RecFileReader
getAgentMetricsCollector	include/benchmarking/BenchmarkEngine.h	/^		SteerLib::AgentMetricsCollector * getAgentMetricsCollector(unsigned int agentIndex) { return _simulationMetricsCollector->getAgentCollector(agentIndex); }$/;"	f	class:SteerLib::BenchmarkEngine
getAgentOrientationAtFrame	include/recfileio/RecFileIO.h	/^		inline Util::Vector getAgentOrientationAtFrame( unsigned int agentIndex, unsigned int frameNumber ) { Util::Vector v; getAgentOrientationAtFrame(agentIndex, frameNumber, v.x, v.y, v.z); return v;}$/;"	f	class:SteerLib::RecFileReader
getAgentOrientationAtFrame	src/RecFileReader.cpp	/^void RecFileReader::getAgentOrientationAtFrame( unsigned int agentIndex, unsigned int frameNumber, float &dirx, float &diry, float &dirz )$/;"	f	class:RecFileReader
getAgentOrientationAtTime	include/recfileio/RecFileIO.h	/^		inline Util::Vector getAgentOrientationAtTime( unsigned int agentIndex, float time ) { Util::Vector v; getAgentOrientationAtTime(agentIndex, time, v.x, v.y, v.z); return v;}$/;"	f	class:SteerLib::RecFileReader
getAgentOrientationAtTime	src/RecFileReader.cpp	/^void RecFileReader::getAgentOrientationAtTime( unsigned int agentIndex, float time, float &dirx, float &diry, float &dirz )$/;"	f	class:RecFileReader
getAgentRadiusAtFrame	src/RecFileReader.cpp	/^float RecFileReader::getAgentRadiusAtFrame( unsigned int agentIndex, unsigned int frameNumber )$/;"	f	class:RecFileReader
getAgentRadiusAtTime	src/RecFileReader.cpp	/^float RecFileReader::getAgentRadiusAtTime( unsigned int agentIndex, float time)$/;"	f	class:RecFileReader
getAgentScore	include/modules/SteerBenchModule.h	/^		void getAgentScore(unsigned int index, std::vector<float> &score)$/;"	f	class:SteerLib::SteerBenchModule
getAgentScores	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void getAgentScores ( unsigned int agentIndex,  SimulationMetricsCollector * simulationMetrics,std::vector<float> & scores ) $/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
getAgentScores	include/benchmarking/CompositeTechnique01.h	/^		void getAgentScores ( unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics,std::vector<float> & scores ) $/;"	f	class:SteerLib::CompositeBenchmarkTechnique01
getAgentScores	include/benchmarking/CompositeTechnique02.h	/^		void getAgentScores ( unsigned int agentIndex,  SimulationMetricsCollector * simulationMetrics,std::vector<float> & scores ) $/;"	f	class:SteerLib::CompositeBenchmarkTechnique02
getAgentScores	include/benchmarking/CompositeTechniquePLE.h	/^		void getAgentScores ( unsigned int agentIndex,  SimulationMetricsCollector * simulationMetrics,std::vector<float> & scores ) $/;"	f	class:SteerLib::CompositeBenchmarkTechniquePLE
getAgentScores	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void getAgentScores ( unsigned int agentIndex,  SimulationMetricsCollector * simulationMetrics,std::vector<float> & scores ) $/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
getAgentSpawnTime	include/testcaseio/TestCaseIO.h	/^		inline const float getAgentSpawnTime(unsigned int agentIndex){return }$/;"	f	class:SteerLib::TestCaseReader
getAgents	include/simulation/SimulationEngine.h	/^		virtual const std::vector<SteerLib::AgentInterface*> & getAgents() { return _agents; }$/;"	f	class:SteerLib::SimulationEngine
getAllModules	include/simulation/SimulationEngine.h	/^		virtual const std::vector<SteerLib::ModuleInterface*> & getAllModules() { return _modulesInExecutionOrder; }$/;"	f	class:SteerLib::SimulationEngine
getAverageExecutionTime	src/PerformanceProfiler.cpp	/^float PerformanceProfiler::getAverageExecutionTime()$/;"	f	class:PerformanceProfiler
getAverageExecutionTimeMills	src/PerformanceProfiler.cpp	/^float PerformanceProfiler::getAverageExecutionTimeMills()$/;"	f	class:PerformanceProfiler
getBasePointer	include/util/MemoryMapper.h	/^		void * getBasePointer() { return _basePtr; }$/;"	f	class:Util::MemoryMapper
getBenchmarkTechnique	include/modules/SteerBenchModule.h	/^		SteerLib::BenchmarkTechniqueInterface * getBenchmarkTechnique () { return _benchmarkTechnique; }$/;"	f	class:SteerLib::SteerBenchModule
getBoolFromString	src/Misc.cpp	/^bool Util::getBoolFromString( const std::string & str )$/;"	f	class:Util
getBounds	include/benchmarking/BenchmarkEnginePrivate.h	/^		inline Util::AxisAlignedBox getBounds() { return Util::AxisAlignedBox(_position.x - _radius, _position.x + _radius, 0.0f, 0.0f, _position.z - _radius, _position.z + _radius); }$/;"	f	class:SteerLib::BenchmarkAgent
getBounds	include/obstacles/BoxObstacle.h	/^		const Util::AxisAlignedBox & getBounds() { return _bounds; }$/;"	f	class:SteerLib::BoxObstacle
getBounds	include/obstacles/CircleObstacle.h	/^		const Util::AxisAlignedBox & getBounds() { return _bounds; }$/;"	f	class:SteerLib::CircleObstacle
getBounds	include/obstacles/OrientedBoxObstacle.h	/^		const Util::AxisAlignedBox & getBounds() { return _bounds; }$/;"	f	class:SteerLib::OrientedBoxObstacle
getBounds	src/OrientedWallObstacle.cpp	/^const Util::AxisAlignedBox & OrientedWallObstacle::getBounds()$/;"	f	class:OrientedWallObstacle
getCamera	include/simulation/SimulationEngine.h	/^		virtual SteerLib::Camera & getCamera() { return _camera; }$/;"	f	class:SteerLib::SimulationEngine
getCameraView	include/testcaseio/TestCaseIO.h	/^		inline const CameraView & getCameraView(unsigned int cameraIndex) { return _cameraViews[cameraIndex]; }$/;"	f	class:SteerLib::TestCaseReader
getCameraView	src/RecFileReader.cpp	/^void RecFileReader::getCameraView( unsigned int cameraIndex, float &origx, float &origy, float &origz, float &lookatx, float &lookaty, float &lookatz)$/;"	f	class:RecFileReader
getCameraViews	include/testcaseio/TestCaseIO.h	/^		inline const std::vector<CameraView> & getCameraViews() { return _cameraViews; }$/;"	f	class:SteerLib::TestCaseReader
getCellIndexFromGridCoords	include/griddatabase/GridDatabase2D.h	/^		inline unsigned int getCellIndexFromGridCoords(unsigned int x, unsigned int z) { return (x * _zNumCells) + z; }$/;"	f	class:SteerLib::GridDatabase2D
getCellIndexFromLocation	include/griddatabase/GridDatabase2D.h	/^		inline int getCellIndexFromLocation( const Util::Point &v ) { return getCellIndexFromLocation(v.x, v.z); }$/;"	f	class:SteerLib::GridDatabase2D
getCellIndexFromLocation	include/griddatabase/GridDatabase2D.h	/^	inline int GridDatabase2D::getCellIndexFromLocation( float x, float z)$/;"	f	class:SteerLib::GridDatabase2D
getCellSizeX	include/griddatabase/GridDatabase2D.h	/^		inline float getCellSizeX() { return  _xCellSize; }$/;"	f	class:SteerLib::GridDatabase2D
getCellSizeZ	include/griddatabase/GridDatabase2D.h	/^		inline float getCellSizeZ() { return  _zCellSize; }$/;"	f	class:SteerLib::GridDatabase2D
getChildTag	src/XMLParser.cpp	/^XMLTag * XMLTag::getChildTag(const std::string & childTagName)$/;"	f	class:XMLTag
getClock	include/simulation/SimulationEngine.h	/^		virtual SteerLib::Clock & getClock() { return _clock; }$/;"	f	class:SteerLib::SimulationEngine
getClockMode	include/simulation/Clock.h	/^		inline ClockModeEnum getClockMode() { return _clockMode; }$/;"	f	class:SteerLib::Clock
getConflicts	include/modules/DummyAIModule.h	/^		std::string getConflicts() { return ""; }$/;"	f	class:SteerLib::DummyAIModule
getConflicts	include/modules/MetricsCollectorModule.h	/^		std::string getConflicts() { return ""; }$/;"	f	class:SteerLib::MetricsCollectorModule
getConflicts	include/modules/RecFilePlayerModule.h	/^		std::string getConflicts() { return "testCasePlayer"; }$/;"	f	class:SteerLib::RecFilePlayerModule
getConflicts	include/modules/SimulationRecorderModule.h	/^		std::string getConflicts() { return ""; }$/;"	f	class:SteerLib::SimulationRecorderModule
getConflicts	include/modules/SteerBenchModule.h	/^		std::string getConflicts() { return ""; }$/;"	f	class:SteerLib::SteerBenchModule
getConflicts	include/modules/SteerBugModule.h	/^		std::string getConflicts() { return ""; }$/;"	f	class:SteerLib::SteerBugModule
getConflicts	include/modules/TestCasePlayerModule.h	/^		std::string getConflicts() { return "recFilePlayer"; }$/;"	f	class:SteerLib::TestCasePlayerModule
getControPoints	include/util/Curve.h	/^			std::vector<CurvePoint> getControPoints() { return controlPoints; }$/;"	f	class:Util::Curve
getCurrentCollisions	include/benchmarking/AgentMetricsCollector.h	/^		std::map<uintptr_t, SteerLib::CollisionInfo> * getCurrentCollisions() { return &_currentCollidingObjects; }$/;"	f	class:SteerLib::AgentMetricsCollector
getCurrentFrameNumber	include/simulation/Clock.h	/^		inline unsigned int getCurrentFrameNumber() { return _simulationFrameNumber; }$/;"	f	class:SteerLib::Clock
getCurrentMetrics	include/benchmarking/AgentMetricsCollector.h	/^		AgentMetrics * getCurrentMetrics() { return &_metrics; }$/;"	f	class:SteerLib::AgentMetricsCollector
getCurrentRealTime	include/simulation/Clock.h	/^		inline float getCurrentRealTime() { return _counterTicksToSeconds(_totalRealTime); }$/;"	f	class:SteerLib::Clock
getCurrentSimulationTime	include/simulation/Clock.h	/^		inline float getCurrentSimulationTime() { return _counterTicksToSeconds(_totalSimulationTime); }$/;"	f	class:SteerLib::Clock
getCurrentState	include/simulation/SimulationEngine.h	/^		unsigned int getCurrentState() { return _engineState.getCurrentState(); }$/;"	f	class:SteerLib::SimulationEngine
getCurrentState	include/util/StateMachine.h	/^		inline unsigned int getCurrentState() { return _currentState; }$/;"	f	class:Util::StateMachine
getData	include/modules/DummyAIModule.h	/^		std::string getData() { return ""; }$/;"	f	class:SteerLib::DummyAIModule
getData	include/modules/MetricsCollectorModule.h	/^		std::string getData() { return ""; }$/;"	f	class:SteerLib::MetricsCollectorModule
getData	include/modules/RecFilePlayerModule.h	/^		std::string getData() { return ""; }$/;"	f	class:SteerLib::RecFilePlayerModule
getData	include/modules/SimulationRecorderModule.h	/^		std::string getData() { return ""; }$/;"	f	class:SteerLib::SimulationRecorderModule
getData	include/modules/SteerBenchModule.h	/^		std::string getData() { return ""; }$/;"	f	class:SteerLib::SteerBenchModule
getData	include/modules/SteerBugModule.h	/^		std::string getData() { return ""; }$/;"	f	class:SteerLib::SteerBugModule
getData	include/modules/TestCasePlayerModule.h	/^		std::string getData() { return ""; }$/;"	f	class:SteerLib::TestCasePlayerModule
getDataType	include/util/XMLParser.h	/^		XMLTagTypeEnum getDataType() { return _tagDataType; }$/;"	f	class:Util::XMLTag
getDependencies	include/modules/DummyAIModule.h	/^		std::string getDependencies() { return "testCasePlayer"; }$/;"	f	class:SteerLib::DummyAIModule
getDependencies	include/modules/MetricsCollectorModule.h	/^		std::string getDependencies() { return ""; }$/;"	f	class:SteerLib::MetricsCollectorModule
getDependencies	include/modules/RecFilePlayerModule.h	/^		std::string getDependencies() { return ""; }$/;"	f	class:SteerLib::RecFilePlayerModule
getDependencies	include/modules/SimulationRecorderModule.h	/^		std::string getDependencies() { return ""; }$/;"	f	class:SteerLib::SimulationRecorderModule
getDependencies	include/modules/SteerBenchModule.h	/^		std::string getDependencies() { return "metricsCollector"; }$/;"	f	class:SteerLib::SteerBenchModule
getDependencies	include/modules/SteerBugModule.h	/^		std::string getDependencies() { return "metricsCollector"; }$/;"	f	class:SteerLib::SteerBugModule
getDependencies	include/modules/TestCasePlayerModule.h	/^		std::string getDependencies() { return ""; }$/;"	f	class:SteerLib::TestCasePlayerModule
getDescription	include/testcaseio/TestCaseIO.h	/^		inline const std::string & getDescription() { return _header.description; }$/;"	f	class:SteerLib::TestCaseReader
getDescription	include/util/XMLParser.h	/^		std::string getDescription() { return _description; }$/;"	f	class:Util::XMLTag
getElapsedTimeBetweenFrames	src/RecFileReader.cpp	/^float RecFileReader::getElapsedTimeBetweenFrames( unsigned int startFrame, unsigned int endFrame)$/;"	f	class:RecFileReader
getEngineController	include/simulation/SimulationEngine.h	/^		virtual SteerLib::EngineControllerInterface * getEngineController() { return _engineController; }$/;"	f	class:SteerLib::SimulationEngine
getEngineInterface	include/interfaces/BenchmarkTechniqueInterface.h	/^		SteerLib::EngineInterface * getEngineInterface() { return this->_engineInfo; }$/;"	f	class:SteerLib::BenchmarkTechniqueInterface
getEstimatedCounterResolution	src/HighResCounter.cpp	/^float Util::getEstimatedCounterResolution()$/;"	f	class:Util
getFileSize	include/util/MemoryMapper.h	/^		unsigned int getFileSize() { return _fileSize; }$/;"	f	class:Util::MemoryMapper
getFilename	include/recfileio/RecFileIO.h	/^		const std::string & getFilename() { return _filename; }$/;"	f	class:SteerLib::RecFileReader
getFilename	include/recfileio/RecFileIO.h	/^		const std::string & getFilename() { return _filename; }$/;"	f	class:SteerLib::RecFileWriter
getFilesInDirectory	src/Misc.cpp	/^void Util::getFilesInDirectory( const std::string & directoryName, const std::string & extension, std::vector<std::string> & fileNames)$/;"	f	class:Util
getFixedFrameRate	include/simulation/Clock.h	/^		inline float getFixedFrameRate() { return _fixedSimulationFrameRate; }$/;"	f	class:SteerLib::Clock
getGridCoordinatesFromIndex	include/griddatabase/GridDatabase2D.h	/^	inline void GridDatabase2D::getGridCoordinatesFromIndex(unsigned int cellIndex, unsigned int &xIndex, unsigned int & zIndex) {$/;"	f	class:SteerLib::GridDatabase2D
getGridSizeX	include/griddatabase/GridDatabase2D.h	/^		inline float getGridSizeX() { return  _xGridSize; }$/;"	f	class:SteerLib::GridDatabase2D
getGridSizeZ	include/griddatabase/GridDatabase2D.h	/^		inline float getGridSizeZ() { return  _zGridSize; }$/;"	f	class:SteerLib::GridDatabase2D
getHighResCounterFrequency	include/util/HighResCounter.h	/^	static inline unsigned long long getHighResCounterFrequency()$/;"	f	namespace:Util
getHighResCounterValue	include/util/HighResCounter.h	/^	static inline unsigned long long getHighResCounterValue()$/;"	f	namespace:Util
getItemsInRange	src/GridDatabase2D.cpp	/^void GridDatabase2D::getItemsInRange(set<SpatialDatabaseItemPtr> & neighborList, float xmin, float xmax, float zmin, float zmax, SpatialDatabaseItemPtr exclude)$/;"	f	class:GridDatabase2D
getItemsInRange	src/GridDatabase2D.cpp	/^void GridDatabase2D::getItemsInRange(set<SpatialDatabaseItemPtr> & neighborList, unsigned int xMinIndex, unsigned int xMaxIndex, unsigned int zMinIndex, unsigned int zMaxIndex, SpatialDatabaseItemPtr exclude)$/;"	f	class:GridDatabase2D
getItemsInVisualField	src/GridDatabase2D.cpp	/^void GridDatabase2D::getItemsInVisualField(set<SpatialDatabaseItemPtr> & neighborList, float xmin, float xmax, float zmin, float zmax, SpatialDatabaseItemPtr exclude, const Point & position, const Vector & facingDirection, float radiusSquared)$/;"	f	class:GridDatabase2D
getListOfKnownBuiltInModules	src/SimulationEngine.cpp	/^void SimulationEngine::getListOfKnownBuiltInModules(std::vector<std::string> & moduleNames)$/;"	f	class:SimulationEngine
getListOfKnownPlugInModules	src/SimulationEngine.cpp	/^void SimulationEngine::getListOfKnownPlugInModules(std::vector<std::string> & moduleNames, const std::string & searchPath)$/;"	f	class:SimulationEngine
getLocationFromIndex	include/griddatabase/GridDatabase2D.h	/^	inline void GridDatabase2D::getLocationFromIndex( unsigned int cellIndex, Util::Point & result ) {$/;"	f	class:SteerLib::GridDatabase2D
getLogData	include/modules/DummyAIModule.h	/^		LogData * getLogData() { return new LogData(); }$/;"	f	class:SteerLib::DummyAIModule
getLogData	include/modules/MetricsCollectorModule.h	/^		LogData * getLogData() { return new LogData(); }$/;"	f	class:SteerLib::MetricsCollectorModule
getLogData	include/modules/RecFilePlayerModule.h	/^		LogData * getLogData() { return new LogData(); }$/;"	f	class:SteerLib::RecFilePlayerModule
getLogData	include/modules/SimulationRecorderModule.h	/^		LogData * getLogData() { return new LogData(); }$/;"	f	class:SteerLib::SimulationRecorderModule
getLogData	include/modules/SteerBenchModule.h	/^		LogData * getLogData() { return new LogData(); }$/;"	f	class:SteerLib::SteerBenchModule
getLogData	include/modules/SteerBugModule.h	/^		LogData * getLogData() { return new LogData(); }$/;"	f	class:SteerLib::SteerBugModule
getLogData	include/modules/TestCasePlayerModule.h	/^		LogData * getLogData() { return new LogData(); }$/;"	f	class:SteerLib::TestCasePlayerModule
getMaxExecutionTime	src/PerformanceProfiler.cpp	/^float PerformanceProfiler::getMaxExecutionTime()$/;"	f	class:PerformanceProfiler
getMaxExecutionTimeMills	src/PerformanceProfiler.cpp	/^float PerformanceProfiler::getMaxExecutionTimeMills()$/;"	f	class:PerformanceProfiler
getMaxTicks	src/PerformanceProfiler.cpp	/^long long PerformanceProfiler::getMaxTicks()$/;"	f	class:PerformanceProfiler
getMinExecutionTime	src/PerformanceProfiler.cpp	/^float PerformanceProfiler::getMinExecutionTime()$/;"	f	class:PerformanceProfiler
getMinExecutionTimeMills	src/PerformanceProfiler.cpp	/^float PerformanceProfiler::getMinExecutionTimeMills()$/;"	f	class:PerformanceProfiler
getMinTicks	src/PerformanceProfiler.cpp	/^long long PerformanceProfiler::getMinTicks()$/;"	f	class:PerformanceProfiler
getModule	src/SimulationEngine.cpp	/^SteerLib::ModuleInterface * SimulationEngine::getModule(const std::string & moduleName)$/;"	f	class:SimulationEngine
getModuleMetaInfo	src/SimulationEngine.cpp	/^SteerLib::ModuleMetaInformation * SimulationEngine::getModuleMetaInfo(SteerLib::ModuleInterface * module)$/;"	f	class:SimulationEngine
getModuleMetaInfo	src/SimulationEngine.cpp	/^SteerLib::ModuleMetaInformation * SimulationEngine::getModuleMetaInfo(const std::string & moduleName)$/;"	f	class:SimulationEngine
getModuleOptions	include/simulation/SimulationEngine.h	/^		virtual const OptionDictionary & getModuleOptions(const std::string & moduleName) { return _options->getModuleOptions(moduleName); }$/;"	f	class:SteerLib::SimulationEngine
getModuleOptions	src/SimulationOptions.cpp	/^const SteerLib::OptionDictionary & SimulationOptions::getModuleOptions(const std::string & moduleName)$/;"	f	class:SimulationOptions
getModuleSearchPath	include/simulation/SimulationEngine.h	/^		virtual std::string getModuleSearchPath() { return _options->engineOptions.moduleSearchPath; }$/;"	f	class:SteerLib::SimulationEngine
getName	include/util/DynamicLibrary.h	/^	    std::string getName() { return _libraryName; }$/;"	f	class:Util::DynamicLibrary
getNumAgents	include/benchmarking/SimulationMetricsCollector.h	/^	    size_t getNumAgents() { return _agentCollectors.size(); }$/;"	f	class:SteerLib::SimulationMetricsCollector
getNumAgents	include/testcaseio/TestCaseIO.h	/^		inline size_t getNumAgents() const { return _initializedAgents.size(); }$/;"	f	class:SteerLib::TestCaseReader
getNumAgents	src/RecFileReader.cpp	/^unsigned int RecFileReader::getNumAgents()$/;"	f	class:RecFileReader
getNumCameraViews	include/testcaseio/TestCaseIO.h	/^		inline size_t getNumCameraViews() const { return _cameraViews.size(); }$/;"	f	class:SteerLib::TestCaseReader
getNumCameraViews	src/RecFileReader.cpp	/^unsigned int RecFileReader::getNumCameraViews()$/;"	f	class:RecFileReader
getNumCellsX	include/griddatabase/GridDatabase2D.h	/^		inline unsigned int getNumCellsX() { return _xNumCells; }$/;"	f	class:SteerLib::GridDatabase2D
getNumCellsZ	include/griddatabase/GridDatabase2D.h	/^		inline unsigned int getNumCellsZ() { return _zNumCells; }$/;"	f	class:SteerLib::GridDatabase2D
getNumFrames	src/RecFileReader.cpp	/^unsigned int RecFileReader::getNumFrames()$/;"	f	class:RecFileReader
getNumObstacles	include/testcaseio/TestCaseIO.h	/^		inline size_t getNumObstacles() const { return _initializedObstacles.size(); }$/;"	f	class:SteerLib::TestCaseReader
getNumObstacles	src/RecFileReader.cpp	/^unsigned int RecFileReader::getNumObstacles()$/;"	f	class:RecFileReader
getNumThresholdedCollisions	src/AgentMetricsCollector.cpp	/^unsigned int AgentMetricsCollector::getNumThresholdedCollisions(float penetrationThreshold, float timeDurationThreshold)$/;"	f	class:AgentMetricsCollector
getNumTimesExecuted	src/PerformanceProfiler.cpp	/^long long PerformanceProfiler::getNumTimesExecuted()$/;"	f	class:PerformanceProfiler
getNumTotalCollisions	include/benchmarking/AgentMetricsCollector.h	/^	    size_t getNumTotalCollisions() { return _pastCollisions.size() + _currentCollidingObjects.size(); }$/;"	f	class:SteerLib::AgentMetricsCollector
getObstacleBoundsAtFrame	include/recfileio/RecFileIO.h	/^		inline Util::AxisAlignedBox getObstacleBoundsAtFrame( unsigned int obstacleIndex, unsigned int frameNumber ) { Util::AxisAlignedBox b; getObstacleBoundsAtFrame(obstacleIndex, frameNumber, b.xmin, b.xmax, b.ymin, b.ymax, b.zmin, b.zmax); return b; }$/;"	f	class:SteerLib::RecFileReader
getObstacleBoundsAtFrame	src/RecFileReader.cpp	/^void RecFileReader::getObstacleBoundsAtFrame( unsigned int obstacleIndex, unsigned int frameNumber, float &xmin, float &xmax, float &ymin, float &ymax, float &zmin, float &zmax )$/;"	f	class:RecFileReader
getObstacleBoundsAtTime	include/recfileio/RecFileIO.h	/^		inline Util::AxisAlignedBox getObstacleBoundsAtTime( unsigned int obstacleIndex, float time ) { Util::AxisAlignedBox b; getObstacleBoundsAtTime(obstacleIndex, time, b.xmin, b.xmax, b.ymin, b.ymax, b.zmin, b.zmax); return b; }$/;"	f	class:SteerLib::RecFileReader
getObstacleBoundsAtTime	src/RecFileReader.cpp	/^void RecFileReader::getObstacleBoundsAtTime( unsigned int obstacleIndex, float time, float &xmin, float &xmax, float &ymin, float &ymax, float &zmin, float &zmax )$/;"	f	class:RecFileReader
getObstacleInitialConditions	include/testcaseio/TestCaseIO.h	/^		inline const ObstacleInitialConditions * getObstacleInitialConditions(unsigned int obstacleIndex) const { return _initializedObstacles.at(obstacleIndex); }$/;"	f	class:SteerLib::TestCaseReader
getObstacleInitialConditions	include/testcaseio/TestCaseIOPrivate.h	/^		virtual ObstacleInitialConditions *getObstacleInitialConditions()$/;"	f	class:SteerLib::RawBoxObstacleInfo
getObstacleInitialConditions	include/testcaseio/TestCaseIOPrivate.h	/^		virtual ObstacleInitialConditions *getObstacleInitialConditions()$/;"	f	class:SteerLib::RawCircleObstacleInfo
getObstacleInitialConditions	include/testcaseio/TestCaseIOPrivate.h	/^		virtual ObstacleInitialConditions *getObstacleInitialConditions()$/;"	f	class:SteerLib::RawOrientedBoxObstacleInfo
getObstacleInitialConditions	include/testcaseio/TestCaseIOPrivate.h	/^		virtual OrientedWallObstacleInitialConditions * getObstacleInitialConditions()$/;"	f	class:SteerLib::RawOrientedWallObstacleInfo
getObstacles	include/simulation/SimulationEngine.h	/^		virtual const std::set<SteerLib::ObstacleInterface*> & getObstacles() { return _obstacles; }$/;"	f	class:SteerLib::SimulationEngine
getOptions	include/simulation/SimulationEngine.h	/^		virtual const SimulationOptions & getOptions() { return (*_options); }$/;"	f	class:SteerLib::SimulationEngine
getOriginX	include/griddatabase/GridDatabase2D.h	/^		inline float getOriginX() { return _xOrigin; }$/;"	f	class:SteerLib::GridDatabase2D
getOriginZ	include/griddatabase/GridDatabase2D.h	/^		inline float getOriginZ() { return  _zOrigin; }$/;"	f	class:SteerLib::GridDatabase2D
getParameters	src/Behaviour.cpp	/^std::vector<BehaviourParameter> Behaviour::getParameters() const$/;"	f	class:Behaviour
getPassingCriteria	include/testcaseio/TestCaseIO.h	/^		inline const std::string & getPassingCriteria() { return _header.passingCriteria; }$/;"	f	class:SteerLib::TestCaseReader
getPointerAtOffset	src/MemoryMapper.cpp	/^void * MemoryMapper::getPointerAtOffset(unsigned int offset)$/;"	f	class:MemoryMapper
getQtEngineController	include/interfaces/EngineControllerInterface.h	/^		virtual void* getQtEngineController() { return NULL; }$/;"	f	class:SteerLib::EngineControllerInterface
getQtMainWindow	include/interfaces/EngineControllerInterface.h	/^		virtual void* getQtMainWindow() { return NULL; }$/;"	f	class:SteerLib::EngineControllerInterface
getRealDt	include/simulation/Clock.h	/^		inline float getRealDt() { return _counterTicksToSeconds(_realDt); }$/;"	f	class:SteerLib::Clock
getRealFps	include/simulation/Clock.h	/^		inline float getRealFps() { return _measuredFps; }$/;"	f	class:SteerLib::Clock
getRootTag	include/util/XMLParser.h	/^		XMLTag * getRootTag() { return _rootTag; }$/;"	f	class:Util::XMLParser
getScores	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		virtual void getScores ( std::vector<float> & scores )$/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
getScores	include/benchmarking/CompositeTechnique01.h	/^		virtual void getScores ( std::vector<float> & scores )$/;"	f	class:SteerLib::CompositeBenchmarkTechnique01
getScores	include/benchmarking/CompositeTechnique02.h	/^		void getScores ( std::vector<float> & scores )$/;"	f	class:SteerLib::CompositeBenchmarkTechnique02
getScores	include/benchmarking/CompositeTechniqueGraph.h	/^		void getScores ( std::vector<float> & scores )$/;"	f	class:SteerLib::CompositeBenchmarkTechniqueGraph
getScores	include/benchmarking/CompositeTechniquePLE.h	/^		void getScores ( std::vector<float> & scores )$/;"	f	class:SteerLib::CompositeBenchmarkTechniquePLE
getScores	include/benchmarking/EnergyEfficiencyTechnique.h	/^		virtual void getScores ( std::vector<float> & scores )$/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
getSelectedAgents	include/simulation/SimulationEngine.h	/^		virtual const std::set<SteerLib::AgentInterface*> & getSelectedAgents() { return _selectedAgents; }$/;"	f	class:SteerLib::SimulationEngine
getSimulationDt	include/simulation/Clock.h	/^		inline float getSimulationDt() { return _counterTicksToSeconds(_simulationDt); }$/;"	f	class:SteerLib::Clock
getSimulationMetrics	include/modules/MetricsCollectorModule.h	/^		inline SteerLib::SimulationMetricsCollector * getSimulationMetrics() { return _simulationMetrics; }$/;"	f	class:SteerLib::MetricsCollectorModule
getSimulationMetricsCollector	include/benchmarking/BenchmarkEngine.h	/^		SteerLib::SimulationMetricsCollector * getSimulationMetricsCollector() { return _simulationMetricsCollector; }$/;"	f	class:SteerLib::BenchmarkEngine
getSpatialDatabase	include/simulation/SimulationEngine.h	/^		virtual SteerLib::GridDatabase2D * getSpatialDatabase() { return _spatialDatabase; }$/;"	f	class:SteerLib::SimulationEngine
getSteeringAlg	src/Behaviour.cpp	/^std::string Behaviour::getSteeringAlg() const$/;"	f	class:Behaviour
getSymbol	src/DynamicLibrary.cpp	/^void* DynamicLibrary::getSymbol( const std::string & symbolName, bool throwIfNotFound )$/;"	f	class:DynamicLibrary
getTagName	include/util/XMLParser.h	/^		std::string getTagName() { return _tagName; }$/;"	f	class:Util::XMLTag
getTestCaseName	include/recfileio/RecFileIO.h	/^		const std::string & getTestCaseName() { return _testCaseName; }$/;"	f	class:SteerLib::RecFileReader
getTestCaseName	include/testcaseio/TestCaseIO.h	/^		inline const std::string & getTestCaseName() const { return _header.name; }$/;"	f	class:SteerLib::TestCaseReader
getTestCaseSearchPath	include/simulation/SimulationEngine.h	/^		virtual std::string getTestCaseSearchPath() { return _options->engineOptions.testCaseSearchPath; }$/;"	f	class:SteerLib::SimulationEngine
getTickFrequency	src/PerformanceProfiler.cpp	/^float PerformanceProfiler::getTickFrequency()$/;"	f	class:PerformanceProfiler
getTimeStampForFrame	src/RecFileReader.cpp	/^float RecFileReader::getTimeStampForFrame( unsigned int frameNumber )$/;"	f	class:RecFileReader
getTotalBenchmarkScore	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		float getTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
getTotalBenchmarkScore	include/benchmarking/EnergyEfficiencyTechnique.h	/^		float getTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
getTotalBenchmarkScore	include/modules/SteerBenchModule.h	/^		float getTotalBenchmarkScore ()$/;"	f	class:SteerLib::SteerBenchModule
getTotalBenchmarkScore	src/BenchmarkEngine.cpp	/^float BenchmarkEngine::getTotalBenchmarkScore()$/;"	f	class:BenchmarkEngine
getTotalBenchmarkScore	src/CompositeTechnique01.cpp	/^float CompositeBenchmarkTechnique01::getTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:CompositeBenchmarkTechnique01
getTotalBenchmarkScore	src/CompositeTechnique02.cpp	/^float CompositeBenchmarkTechnique02::getTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:CompositeBenchmarkTechnique02
getTotalBenchmarkScore	src/CompositeTechniquePLE.cpp	/^float CompositeBenchmarkTechniquePLE::getTotalBenchmarkScore(SimulationMetricsCollector * simulationMetrics) { $/;"	f	class:CompositeBenchmarkTechniquePLE
getTotalElapsedTime	src/RecFileReader.cpp	/^float RecFileReader::getTotalElapsedTime()$/;"	f	class:RecFileReader
getTotalTicksAccumulated	src/PerformanceProfiler.cpp	/^long long PerformanceProfiler::getTotalTicksAccumulated()$/;"	f	class:PerformanceProfiler
getTotalTime	src/PerformanceProfiler.cpp	/^float PerformanceProfiler::getTotalTime()$/;"	f	class:PerformanceProfiler
getTraversalCost	include/griddatabase/GridDatabase2D.h	/^		inline float getTraversalCost( unsigned int cellIndex ) { return _cells[cellIndex]._traversalCost; }$/;"	f	class:SteerLib::GridDatabase2D
getTraversalCost	include/griddatabase/GridDatabase2D.h	/^		inline float getTraversalCost( unsigned int x, unsigned int z ) { return _cells[getCellIndexFromGridCoords(x,z)]._traversalCost; }$/;"	f	class:SteerLib::GridDatabase2D
getTraversalCost	include/interfaces/AgentInterface.h	/^		virtual float getTraversalCost() { return 0; }$/;"	f	class:SteerLib::AgentInterface
getTraversalCost	include/obstacles/BoxObstacle.h	/^		float getTraversalCost() { return _traversalCost; }$/;"	f	class:SteerLib::BoxObstacle
getTraversalCost	include/obstacles/CircleObstacle.h	/^		float getTraversalCost() { return _traversalCost; }$/;"	f	class:SteerLib::CircleObstacle
getTraversalCost	include/obstacles/OrientedBoxObstacle.h	/^		float getTraversalCost() { return _traversalCost; }$/;"	f	class:SteerLib::OrientedBoxObstacle
getTraversalCost	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float getTraversalCost() { return 0.0f; }$/;"	f	class:SteerLib::RawAgentInfo
getTraversalCost	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float getTraversalCost() { return 0.0f; }$/;"	f	class:SteerLib::RawBoxObstacleInfo
getTraversalCost	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float getTraversalCost() { return 0.0f; }$/;"	f	class:SteerLib::RawCircleObstacleInfo
getTraversalCost	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float getTraversalCost() { return 0.0f; }$/;"	f	class:SteerLib::RawObstacleInfo
getTraversalCost	include/testcaseio/TestCaseIOPrivate.h	/^		virtual float getTraversalCost() { return 0.0f; }$/;"	f	class:SteerLib::RawOrientedBoxObstacleInfo
getType	include/util/Curve.h	/^			int getType() { return type; }$/;"	f	class:Util::Curve
getVersion	include/recfileio/RecFileIO.h	/^		unsigned int getVersion() { return _version; }$/;"	f	class:SteerLib::RecFileReader
getVersion	include/recfileio/RecFileIO.h	/^		unsigned int getVersion() { return _version; }$/;"	f	class:SteerLib::RecFileWriter
getVersion	include/testcaseio/TestCaseIO.h	/^		inline const std::string & getVersion() { return _header.version; }$/;"	f	class:SteerLib::TestCaseReader
getWorldBounds	include/testcaseio/TestCaseIO.h	/^		inline const Util::AxisAlignedBox & getWorldBounds() const { return _header.worldBounds; }$/;"	f	class:SteerLib::TestCaseReader
glColor	include/util/DrawLib.h	/^		static inline void glColor(const Color & color) { glColor3f(color.r, color.g, color.b); }$/;"	f	class:Util::DrawLib
glNormal	include/util/DrawLib.h	/^		static inline void glNormal(const Vector & normal) { glNormal3f(normal.x, normal.y, normal.z); }$/;"	f	class:Util::DrawLib
glTranslate	include/util/DrawLib.h	/^		static inline void glTranslate(const Point & pos) { glTranslatef(pos.x, pos.y, pos.z); }$/;"	f	class:Util::DrawLib
glVertex	include/util/DrawLib.h	/^		static inline void glVertex(const Point & vertex) { glVertex3f(vertex.x, vertex.y, vertex.z); }$/;"	f	class:Util::DrawLib
glfwEngineDriverOptions	include/simulation/SimulationOptions.h	/^		GLFWEngineDriverOptions   glfwEngineDriverOptions;$/;"	m	class:SteerLib::SimulationOptions
globalOptions	include/simulation/SimulationOptions.h	/^		GlobalOptions   globalOptions;$/;"	m	class:SteerLib::SimulationOptions
goal	include/recfileio/RecFileIOPrivate.h	/^		RecFilePointData goal;$/;"	m	struct:SteerLib::RecFileAgentInfo
goalType	include/testcaseio/AgentInitialConditions.h	/^		AgentGoalTypeEnum goalType;$/;"	m	struct:SteerLib::AgentGoalInfo
goals	include/testcaseio/AgentInitialConditions.h	/^		std::vector<AgentGoalInfo> goals;$/;"	m	struct:SteerLib::AgentInitialConditions
goals	include/testcaseio/TestCaseIOPrivate.h	/^		std::vector<AgentGoalInfo> goals;$/;"	m	class:SteerLib::RawAgentInfo
gridDatabaseOptions	include/simulation/SimulationOptions.h	/^		GridDatabaseOptions   gridDatabaseOptions;$/;"	m	class:SteerLib::SimulationOptions
gridSizeX	include/simulation/SimulationOptions.h	/^			float gridSizeX;$/;"	m	struct:SteerLib::SimulationOptions::GridDatabaseOptions
gridSizeZ	include/simulation/SimulationOptions.h	/^			float gridSizeZ;$/;"	m	struct:SteerLib::SimulationOptions::GridDatabaseOptions
guiOptions	include/simulation/SimulationOptions.h	/^		GUIOptions   guiOptions;$/;"	m	class:SteerLib::SimulationOptions
handleUnknownTransition	include/util/StateMachine.h	/^		virtual unsigned int handleUnknownTransition(unsigned int currentState, unsigned int requestedNewState) {$/;"	f	class:Util::StateMachineCallbackInterface
handleUnknownTransition	src/SimulationEngine.cpp	/^unsigned int SimulationEngine::EngineStateMachineCallback::handleUnknownTransition(unsigned int currentState, unsigned int requestedNewState)$/;"	f	class:SimulationEngine::EngineStateMachineCallback
hasAnyItems	include/griddatabase/GridDatabase2D.h	/^		inline bool hasAnyItems( unsigned int cellIndex ) { return (_cells[cellIndex]._numItems != 0); }$/;"	f	class:SteerLib::GridDatabase2D
hasAnyItems	include/griddatabase/GridDatabase2D.h	/^		inline bool hasAnyItems( unsigned int x, unsigned int z ) { return (_cells[getCellIndexFromGridCoords(x,z)]._numItems != 0); }$/;"	f	class:SteerLib::GridDatabase2D
hasCommand	src/SimulationEngine.cpp	/^bool SimulationEngine::hasCommand(const std::string & commandName)$/;"	f	class:SimulationEngine
hasLineOfSight	src/GridDatabase2D.cpp	/^bool GridDatabase2D::hasLineOfSight(const Point & p1, const Point & p2, SpatialDatabaseItemPtr exclude1, SpatialDatabaseItemPtr exclude2)$/;"	f	class:GridDatabase2D
hasLineOfSight	src/GridDatabase2D.cpp	/^bool GridDatabase2D::hasLineOfSight(const Ray & r, SpatialDatabaseItemPtr exclude1, SpatialDatabaseItemPtr exclude2)$/;"	f	class:GridDatabase2D
headerSize	include/recfileio/RecFileIOPrivate.h	/^		unsigned int headerSize;$/;"	m	struct:SteerLib::RecFileHeader
height	include/testcaseio/ObstacleInitialConditions.h	/^		float height;$/;"	m	struct:SteerLib::CircleObstacleInitialConditions
height	include/testcaseio/ObstacleInitialConditions.h	/^		float lengthX, lengthZ, height, thetaY;$/;"	m	struct:SteerLib::OrientedBoxObstacleInitialConditions
height	include/testcaseio/TestCaseIOPrivate.h	/^		float height;$/;"	m	class:SteerLib::RawBoxObstacleInfo
height	include/testcaseio/TestCaseIOPrivate.h	/^		float height;$/;"	m	class:SteerLib::RawCircleObstacleInfo
hermiteCurve	build/win32/AnimationCurve.cpp	/^bool CurveAgent::hermiteCurve(const std::vector<SteerLib::AgentGoalInfo>& controlPoints, Util::Point& curvePosition, float time)$/;"	f	class:CurveAgent
hermiteCurve	include/util/Curve.h	/^	static const int hermiteCurve = 0;$/;"	m	namespace:Util
hilbert	include/util/dmatrix.h	/^inline Matrix hilbert(size_t size) {$/;"	f
id	include/benchmarking/BenchmarkEnginePrivate.h	/^		size_t id() const { return 0;}$/;"	f	class:SteerLib::BenchmarkAgent
id	include/modules/DummyAIModule.h	/^		size_t id() const { return 0;}$/;"	f	class:SteerLib::DummyAgent
id	include/modules/RecFilePlayerModule.h	/^		size_t id() const { return 0;}$/;"	f	class:SteerLib::ReplayAgent
init	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) {init();}$/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
init	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void init() {$/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
init	include/benchmarking/CompositeTechnique01.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) {init();}$/;"	f	class:SteerLib::CompositeBenchmarkTechnique01
init	include/benchmarking/CompositeTechnique02.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo )$/;"	f	class:SteerLib::CompositeBenchmarkTechnique02
init	include/benchmarking/CompositeTechniquePLE.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo )$/;"	f	class:SteerLib::CompositeBenchmarkTechniquePLE
init	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) {init();}$/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
init	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void init() {$/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
init	include/griddatabase/GridCell.h	/^		void init( unsigned int maxNumItems, SpatialDatabaseItemPtr * localBasePtr, float initialTraversalCost) {$/;"	f	class:SteerLib::GridCell
init	include/interfaces/ObstacleInterface.h	/^		virtual void init() { }$/;"	f	class:SteerLib::ObstacleInterface
init	include/modules/DummyAIModule.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) { }$/;"	f	class:SteerLib::DummyAIModule
init	include/modules/MetricsCollectorModule.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) {$/;"	f	class:SteerLib::MetricsCollectorModule
init	include/modules/SteerBenchModule.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) {$/;"	f	class:SteerLib::SteerBenchModule
init	include/modules/SteerBugModule.h	/^		void init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) {$/;"	f	class:SteerLib::SteerBugModule
init	include/planning/BestFirstSearchPlanner.h	/^		void init(PlanningDomain * newPlanningDomain, unsigned int maxNumNodesToExpand ) {$/;"	f	class:SteerLib::BestFirstSearchPlanner
init	include/simulation/SimulationOptions.h	/^		void init(ModuleOptionsDatabase * moduleOptionsDatabasePtr) { _modOpts = moduleOptionsDatabasePtr; }$/;"	f	class:SteerLib::ModuleOptionsXMLParser
init	include/simulation/SimulationOptions.h	/^		void init(std::set< std::string > * startupModules) { _startupModules = startupModules; }$/;"	f	class:SteerLib::StartupModulesXMLParser
init	src/CompositeTechnique01.cpp	/^void CompositeBenchmarkTechnique01::init() {$/;"	f	class:CompositeBenchmarkTechnique01
init	src/CompositeTechnique02.cpp	/^void CompositeBenchmarkTechnique02::init() {$/;"	f	class:CompositeBenchmarkTechnique02
init	src/CompositeTechniquePLE.cpp	/^void CompositeBenchmarkTechniquePLE::init() {$/;"	f	class:CompositeBenchmarkTechniquePLE
init	src/DrawLib.cpp	/^void DrawLib::init() {$/;"	f	class:DrawLib
init	src/RecFilePlayerModule.cpp	/^void RecFilePlayerModule::init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo )$/;"	f	class:RecFilePlayerModule
init	src/SimulationEngine.cpp	/^void SimulationEngine::init(SimulationOptions * options, SteerLib::EngineControllerInterface * engineController)$/;"	f	class:SimulationEngine
init	src/SimulationRecorderModule.cpp	/^void SimulationRecorderModule::init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) {$/;"	f	class:SimulationRecorderModule
init	src/TestCasePlayerModule.cpp	/^void TestCasePlayerModule::init( const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo ) {$/;"	f	class:TestCasePlayerModule
initAction	include/griddatabase/GridDatabasePlanningDomain.h	/^		inline SteerLib::DefaultAction<unsigned int> & initAction(unsigned int newState, float f) {$/;"	f	class:SteerLib::GridDatabasePlanningDomain
initGL	src/SimulationEngine.cpp	/^void SimulationEngine::initGL()$/;"	f	class:SimulationEngine
initWithLengthInterval	include/util/Geometry.h	/^		void initWithLengthInterval(Point newPos, Vector newDir) { pos = newPos; dir = newDir; mint = _UTIL_GEOMETRY_EPSILON; maxt = dir.length(); dir = dir\/maxt; }$/;"	f	class:Util::Ray
initWithUnitInterval	include/util/Geometry.h	/^		void initWithUnitInterval(Point newPos, Vector newDir) { pos = newPos; dir = newDir; mint = _UTIL_GEOMETRY_EPSILON; maxt = 1.0f; } \/\/ if all else is equal, use this one, because it initializes faster.$/;"	f	class:Util::Ray
initializeRecorder	include/modules/SimulationRecorderModule.h	/^		void initializeRecorder ( std::string & recFileName )$/;"	f	class:SteerLib::SimulationRecorderModule
initializeSimulation	include/interfaces/ModuleInterface.h	/^		virtual void initializeSimulation() { }$/;"	f	class:SteerLib::ModuleInterface
initializeSimulation	src/RecFilePlayerModule.cpp	/^void RecFilePlayerModule::initializeSimulation()$/;"	f	class:RecFilePlayerModule
initializeSimulation	src/SimulationEngine.cpp	/^void SimulationEngine::initializeSimulation()$/;"	f	class:SimulationEngine
initializeSimulation	src/TestCasePlayerModule.cpp	/^void TestCasePlayerModule::initializeSimulation() {$/;"	f	class:TestCasePlayerModule
initializeSimulationMetrics	include/modules/MetricsCollectorModule.h	/^		void initializeSimulationMetrics () $/;"	f	class:SteerLib::MetricsCollectorModule
insert	include/util/dmatrix.h	/^  inline void insert(size_t row, size_t column, const Matrix& q) {$/;"	f	class:Matrix
insertAgentNeighbor	include/benchmarking/BenchmarkEnginePrivate.h	/^		void insertAgentNeighbor(const SteerLib::AgentInterface *agent, float &rangeSq) { throw Util::GenericException("insertAgentNeighbor not implemented yet for BenchmarkAgent"); }$/;"	f	class:SteerLib::BenchmarkAgent
insertAgentNeighbor	include/modules/DummyAIModule.h	/^		void insertAgentNeighbor(const SteerLib::AgentInterface *agent, float &rangeSq) { throw Util::GenericException("insertAgentNeighbor not implemented yet for BenchmarkAgent"); }$/;"	f	class:SteerLib::DummyAgent
insertAgentNeighbor	include/modules/RecFilePlayerModule.h	/^		void insertAgentNeighbor(const SteerLib::AgentInterface *agent, float &rangeSq) { throw Util::GenericException("insertAgentNeighbor not implemented yet for BenchmarkAgent"); }$/;"	f	class:SteerLib::ReplayAgent
instantaneousAcceleration	include/benchmarking/MetricsData.h	/^		Util::Vector instantaneousAcceleration;$/;"	m	class:SteerLib::AgentMetrics
instantaneousAngularSpeed	include/benchmarking/MetricsData.h	/^		float instantaneousAngularSpeed;$/;"	m	class:SteerLib::AgentMetrics
instantaneousChangeInSpeed	include/benchmarking/MetricsData.h	/^		float instantaneousChangeInSpeed;$/;"	m	class:SteerLib::AgentMetrics
instantaneousKineticEnergy	include/benchmarking/MetricsData.h	/^		float instantaneousKineticEnergy;  \/\/ units: Kg * (m\/s)^2 (mass assumed to be 1.0)$/;"	m	class:SteerLib::AgentMetrics
instantaneousSpeed	include/benchmarking/MetricsData.h	/^		float instantaneousSpeed;     \/\/ units: meters\/second$/;"	m	class:SteerLib::AgentMetrics
integralOfKineticEnergy	include/benchmarking/MetricsData.h	/^		float integralOfKineticEnergy;$/;"	m	class:SteerLib::AgentMetrics
intersect2Lines2D	include/util/Geometry.h	/^	static inline bool intersect2Lines2D(const Point & l1Start, const Point & l1End, const Point & l2Start, const Point & l2End,$/;"	f	namespace:Util
intersectTwoRays2D	include/util/Geometry.h	/^	static inline bool intersectTwoRays2D( const Point & pos1, const Vector & dir1, float & t1, const Point & pos2, const Vector & dir2, float & t2 )$/;"	f	namespace:Util
intersects	include/benchmarking/BenchmarkEnginePrivate.h	/^		bool intersects(const Util::Ray &r, float &t) { return Util::rayIntersectsCircle2D(_position, _radius, r, t); }$/;"	f	class:SteerLib::BenchmarkAgent
intersects	include/modules/DummyAIModule.h	/^		bool intersects(const Util::Ray &r, float &t) { return Util::rayIntersectsCircle2D(_position, _radius, r, t); }$/;"	f	class:SteerLib::DummyAgent
intersects	include/modules/RecFilePlayerModule.h	/^		bool intersects(const Util::Ray &r, float &t) { return Util::rayIntersectsCircle2D(_position, _radius, r, t); }$/;"	f	class:SteerLib::ReplayAgent
intersects	include/obstacles/BoxObstacle.h	/^		virtual bool intersects(const Util::Ray &r, float &t) { return Util::rayIntersectsBox2D(_bounds.xmin, _bounds.xmax, _bounds.zmin, _bounds.zmax, r, t); }$/;"	f	class:SteerLib::BoxObstacle
intersects	include/obstacles/CircleObstacle.h	/^		virtual bool intersects(const Util::Ray &r, float &t) { return Util::rayIntersectsCircle2D(_centerPosition,_radius, r, t); }$/;"	f	class:SteerLib::CircleObstacle
intersects	include/obstacles/OrientedBoxObstacle.h	/^		virtual bool intersects(const Util::Ray &r, float &t) $/;"	f	class:SteerLib::OrientedBoxObstacle
intersects	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool intersects(const Util::Ray &r, float &t) { return Util::rayIntersectsBox2D(obstacleBounds.xmin, obstacleBounds.xmax, obstacleBounds.zmin, obstacleBounds.zmax, r, t); }$/;"	f	class:SteerLib::RawBoxObstacleInfo
intersects	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool intersects(const Util::Ray &r, float &t) { return Util::rayIntersectsCircle2D(position, radius, r, t); }$/;"	f	class:SteerLib::RawAgentInfo
intersects	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool intersects(const Util::Ray &r, float &t) { return Util::rayIntersectsCircle2D(position, radius, r, t); }$/;"	f	class:SteerLib::RawCircleObstacleInfo
intersects	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool intersects(const Util::Ray &r, float &t) { return false; }$/;"	f	class:SteerLib::RawObstacleInfo
intersects	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool intersects(const Util::Ray &r, float &t) {$/;"	f	class:SteerLib::RawOrientedBoxObstacleInfo
inverseDistance	include/util/Geometry.h	/^	static inline Vector inverseDistance(std::vector<Point> points, Point point)$/;"	f	namespace:Util
isAGoalState	include/griddatabase/GridDatabasePlanningDomain.h	/^		inline bool isAGoalState( const unsigned int & state, const unsigned int & idealGoalState) {$/;"	f	class:SteerLib::GridDatabasePlanningDomain
isAValidRecFile	src/RecFileReader.cpp	/^bool RecFileReader::isAValidRecFile(const std::string & filename)$/;"	f	class:RecFileReader
isAgent	include/interfaces/AgentInterface.h	/^		virtual bool isAgent() { return true; }$/;"	f	class:SteerLib::AgentInterface
isAgent	include/obstacles/BoxObstacle.h	/^		virtual bool isAgent() { return false; }$/;"	f	class:SteerLib::BoxObstacle
isAgent	include/obstacles/CircleObstacle.h	/^		virtual bool isAgent() { return false; }$/;"	f	class:SteerLib::CircleObstacle
isAgent	include/obstacles/OrientedBoxObstacle.h	/^		virtual bool isAgent() { return false; }$/;"	f	class:SteerLib::OrientedBoxObstacle
isAgent	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool isAgent() { return false; }$/;"	f	class:SteerLib::RawBoxObstacleInfo
isAgent	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool isAgent() { return false; }$/;"	f	class:SteerLib::RawCircleObstacleInfo
isAgent	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool isAgent() { return false; }$/;"	f	class:SteerLib::RawObstacleInfo
isAgent	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool isAgent() { return false; }$/;"	f	class:SteerLib::RawOrientedBoxObstacleInfo
isAgent	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool isAgent() { return true; }$/;"	f	class:SteerLib::RawAgentInfo
isAgentEnabledAtFrame	src/RecFileReader.cpp	/^bool RecFileReader::isAgentEnabledAtFrame( unsigned int agentIndex, unsigned int frameNumber )$/;"	f	class:RecFileReader
isAgentEnabledAtTime	src/RecFileReader.cpp	/^bool RecFileReader::isAgentEnabledAtTime( unsigned int agentIndex, float time )$/;"	f	class:RecFileReader
isAgentSelected	include/simulation/SimulationEngine.h	/^		virtual bool isAgentSelected(SteerLib::AgentInterface * agent) { return (_selectedAgents.find(agent) != _selectedAgents.end()); }$/;"	f	class:SteerLib::SimulationEngine
isBackSlash	src/Misc.cpp	/^bool Util::isBackSlash(char ch)$/;"	f	class:Util
isColorRandom	include/testcaseio/TestCaseIOPrivate.h	/^		bool isColorRandom;$/;"	m	class:SteerLib::RawAgentInfo
isDirectionRandom	include/testcaseio/TestCaseIOPrivate.h	/^		bool isDirectionRandom;$/;"	m	class:SteerLib::RawAgentInfo
isDone	include/benchmarking/BenchmarkEngine.h	/^		bool isDone() { return _done; }$/;"	f	class:SteerLib::BenchmarkEngine
isExistingDirectory	src/Misc.cpp	/^bool Util::isExistingDirectory( const std::string & pathname )$/;"	f	class:Util
isExistingFile	src/Misc.cpp	/^bool Util::isExistingFile( const std::string & pathname )$/;"	f	class:Util
isForwardSlash	src/Misc.cpp	/^bool Util::isForwardSlash(char ch)$/;"	f	class:Util
isInitialized	include/interfaces/EngineInterface.h	/^		bool isInitialized;$/;"	m	struct:SteerLib::ModuleMetaInformation
isLoaded	include/interfaces/EngineInterface.h	/^		bool isLoaded;$/;"	m	struct:SteerLib::ModuleMetaInformation
isLoaded	include/util/DynamicLibrary.h	/^	    bool isLoaded() { return _isLoaded; }$/;"	f	class:Util::DynamicLibrary
isModuleLoaded	include/simulation/SimulationEngine.h	/^		virtual bool isModuleLoaded(const std::string & moduleName) { return (_moduleMetaInfoByName.find(moduleName) != _moduleMetaInfoByName.end()); }$/;"	f	class:SteerLib::SimulationEngine
isObstacleRandom	include/testcaseio/TestCaseIOPrivate.h	/^		bool isObstacleRandom;$/;"	m	class:SteerLib::RawObstacleInfo
isOpen	include/recfileio/RecFileIO.h	/^		bool isOpen() { return _opened; }$/;"	f	class:SteerLib::RecFileReader
isOpen	include/recfileio/RecFileIO.h	/^		bool isOpen() { return _opened; }$/;"	f	class:SteerLib::RecFileWriter
isOpen	include/util/MemoryMapper.h	/^		bool isOpen() { return _opened; }$/;"	f	class:Util::MemoryMapper
isPositionRandom	include/testcaseio/TestCaseIOPrivate.h	/^		bool isPositionRandom;$/;"	m	class:SteerLib::RawAgentInfo
isQtEngineDriver	include/interfaces/EngineControllerInterface.h	/^		virtual bool isQtEngineDriver() { return false; }$/;"	f	class:SteerLib::EngineControllerInterface
isRecording	include/recfileio/RecFileIO.h	/^		bool isRecording() { return _opened; }$/;"	f	class:SteerLib::RecFileWriter
isSimulationDone	include/simulation/SimulationEngine.h	/^		virtual bool isSimulationDone() { return _simulationDone; }$/;"	f	class:SteerLib::SimulationEngine
isSimulationLoaded	include/simulation/SimulationEngine.h	/^		virtual bool isSimulationLoaded() { return _simulationLoaded; }$/;"	f	class:SteerLib::SimulationEngine
isSimulationRunning	include/simulation/SimulationEngine.h	/^		virtual bool isSimulationRunning() { return _simulationRunning; }$/;"	f	class:SteerLib::SimulationEngine
isStopped	include/util/PerformanceProfiler.h	/^		bool isStopped;$/;"	m	class:Util::PerformanceProfiler
isValidTestCaseSimulation	src/BenchmarkEngine.cpp	/^bool BenchmarkEngine::isValidTestCaseSimulation(const std::string & testCaseDirectory)$/;"	f	class:BenchmarkEngine
isWritingFrame	include/recfileio/RecFileIO.h	/^		bool isWritingFrame() { return _writingFrame; }$/;"	f	class:SteerLib::RecFileWriter
jacobi	include/util/dmatrix.h	/^inline void jacobi(const Matrix& q, Matrix& V, Matrix& D) {$/;"	f
jacobian1	include/benchmarking/BayesianFilter.h	/^inline Matrix jacobian1(const Matrix& a, const Matrix& b, const Matrix& c, size_t yDim,$/;"	f
jacobian1	include/benchmarking/BayesianFilter.h	/^inline Matrix jacobian1(const Matrix& a, const Matrix& b, size_t yDim,$/;"	f
jacobian1	include/benchmarking/BayesianFilter.h	/^inline Matrix jacobian1(const Matrix& a, size_t yDim, Matrix (*f)(const Matrix&), double jStep = DEFAULTSTEPSIZE) $/;"	f
jacobian2	include/benchmarking/BayesianFilter.h	/^inline Matrix jacobian2(const Matrix& a, const Matrix& b, const Matrix& c, size_t yDim,$/;"	f
jacobian2	include/benchmarking/BayesianFilter.h	/^inline Matrix jacobian2(const Matrix& a, const Matrix& b, size_t yDim, Matrix (*f)(const Matrix&, const Matrix&), double jStep = DEFAULTSTEPSIZE) $/;"	f
jacobian3	include/benchmarking/BayesianFilter.h	/^inline Matrix jacobian3(const Matrix& a, const Matrix& b, const Matrix& c, size_t yDim,$/;"	f
kalmanFilter	include/benchmarking/BayesianFilter.h	/^inline void kalmanFilter(Matrix& xHat, Matrix& Sigma, const Matrix& u, const Matrix& z, $/;"	f
key	include/testcaseio/BehaviourParameter.h	/^		std::string key;$/;"	m	class:SteerLib::BehaviourParameter
keyboardBindings	include/simulation/SimulationOptions.h	/^		KeyboardBindings   keyboardBindings;$/;"	m	class:SteerLib::SimulationOptions
kfControlUpdate	include/benchmarking/BayesianFilter.h	/^inline void kfControlUpdate(Matrix& xHat, Matrix& Sigma, const Matrix& u, const Matrix& A, const Matrix& B, const Matrix& M) $/;"	f
kfMeasurementUpdate	include/benchmarking/BayesianFilter.h	/^inline void kfMeasurementUpdate(Matrix& xHat, Matrix& Sigma, const Matrix& z, const Matrix& H, const Matrix& N) $/;"	f
length	include/util/Geometry.h	/^		float length() const { return sqrtf(x*x + y*y + z*z); }$/;"	f	class:Util::Vector
lengthSquared	include/util/Geometry.h	/^		float lengthSquared() const { return x*x + y*y + z*z; }$/;"	f	class:Util::Vector
lengthX	include/testcaseio/ObstacleInitialConditions.h	/^		float lengthX, lengthZ, height, thetaY;$/;"	m	struct:SteerLib::OrientedBoxObstacleInitialConditions
lengthZ	include/testcaseio/ObstacleInitialConditions.h	/^		float lengthX, lengthZ, height, thetaY;$/;"	m	struct:SteerLib::OrientedBoxObstacleInitialConditions
lineWidth	include/simulation/SimulationOptions.h	/^			float lineWidth;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
load	src/DynamicLibrary.cpp	/^void DynamicLibrary::load( const std::string & libraryName )$/;"	f	class:DynamicLibrary
loadModule	src/SimulationEngine.cpp	/^void SimulationEngine::loadModule(const std::string & moduleName, const std::string & searchPath, const std::string & options)$/;"	f	class:SimulationEngine
loadOptionsFromConfigFile	src/SimulationOptions.cpp	/^void SimulationOptions::loadOptionsFromConfigFile( const std::string & filename )$/;"	f	class:SimulationOptions
lock	include/util/Mutex.h	/^		inline void lock() throw() {$/;"	f	class:Util::Mutex
logpdf	include/benchmarking/BayesianFilter.h	/^inline double logpdf(const Matrix& var, const Matrix& x) {$/;"	f
lookat	include/recfileio/RecFileIOPrivate.h	/^		RecFilePointData lookat;$/;"	m	struct:SteerLib::RecFileCameraInfo
lookat	include/simulation/Camera.h	/^			Util::Point lookat;$/;"	m	class:SteerLib::CameraView
lookat	src/Camera.cpp	/^Point Camera::lookat()$/;"	f	class:Camera
mPair	include/util/dmatrix.h	/^struct mPair$/;"	s
m_currentPoi	include/simulation/Camera.h	/^			int m_currentPoi;$/;"	m	class:SteerLib::Camera
m_currentView	include/simulation/Camera.h	/^			CameraView m_currentView;$/;"	m	class:SteerLib::Camera
m_frameCount	include/util/FrameSaver.h	/^	int m_frameCount ;$/;"	m	class:Util::FrameSaver
m_identity	include/util/dmatrix.h	/^inline Matrix m_identity(size_t size) {$/;"	f
m_interpolationTime	include/simulation/Camera.h	/^			float m_interpolationTime;$/;"	m	class:SteerLib::Camera
m_isInterpolating	include/simulation/Camera.h	/^			bool m_isInterpolating;$/;"	m	class:SteerLib::Camera
m_pixels	include/util/FrameSaver.h	/^	unsigned char *m_pixels;$/;"	m	class:Util::FrameSaver
m_pois	include/simulation/Camera.h	/^			std::vector<CameraView> m_pois;$/;"	m	class:SteerLib::Camera
m_record	include/util/FrameSaver.h	/^	int m_record ;$/;"	m	class:Util::FrameSaver
m_targetView	include/simulation/Camera.h	/^			CameraView m_targetView;$/;"	m	class:SteerLib::Camera
magic	include/recfileio/RecFileIOPrivate.h	/^		unsigned int magic;$/;"	m	struct:SteerLib::RecFileHeader
maxAcceleration	include/benchmarking/MetricsData.h	/^		float maxAcceleration;        \/\/ units: meters\/(second^2)$/;"	m	class:SteerLib::AgentMetrics
maxAccelerationOverWindow	include/benchmarking/MetricsData.h	/^		float maxAccelerationOverWindow;  \/\/ units: $/;"	m	class:SteerLib::AgentMetrics
maxAngularSpeed	include/benchmarking/MetricsData.h	/^		float maxAngularSpeed;     \/\/ units: degrees\/second$/;"	m	class:SteerLib::AgentMetrics
maxChangeInSpeed	include/benchmarking/MetricsData.h	/^		float maxChangeInSpeed;       \/\/ units: meters\/(second^2)$/;"	m	class:SteerLib::AgentMetrics
maxChangeInSpeedOverWindow	include/benchmarking/MetricsData.h	/^		float maxChangeInSpeedOverWindow; \/\/ units: meters\/second$/;"	m	class:SteerLib::AgentMetrics
maxCollisionPenetration	include/benchmarking/MetricsData.h	/^		float maxCollisionPenetration;$/;"	m	class:SteerLib::AgentMetrics
maxDegreesTurnedOverWindow	include/benchmarking/MetricsData.h	/^		float maxDegreesTurnedOverWindow;    \/\/ units: degrees$/;"	m	class:SteerLib::AgentMetrics
maxDistanceTraveledOverWindow	include/benchmarking/MetricsData.h	/^		float maxDistanceTraveledOverWindow;      \/\/ units: meters$/;"	m	class:SteerLib::AgentMetrics
maxInstantaneousSpeed	include/benchmarking/MetricsData.h	/^		float maxInstantaneousSpeed;  \/\/ units: meters\/second$/;"	m	class:SteerLib::AgentMetrics
maxItemsPerGridCell	include/simulation/SimulationOptions.h	/^			unsigned int maxItemsPerGridCell;$/;"	m	struct:SteerLib::SimulationOptions::GridDatabaseOptions
maxPenetration	include/benchmarking/MetricsData.h	/^		float maxPenetration;$/;"	m	struct:SteerLib::CollisionInfo
maxTimeSpentInCollision	include/benchmarking/MetricsData.h	/^		float maxTimeSpentInCollision;$/;"	m	class:SteerLib::AgentMetrics
maxVariableDt	include/simulation/SimulationOptions.h	/^			float maxVariableDt;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
maxt	include/util/Geometry.h	/^		float mint, maxt;$/;"	m	class:Util::Ray
mergeModuleOptions	src/SimulationOptions.cpp	/^void SimulationOptions::mergeModuleOptions( const std::string & moduleName, const std::string & options)$/;"	f	class:SimulationOptions
minAccelerationOverWindow	include/benchmarking/MetricsData.h	/^		float minAccelerationOverWindow;$/;"	m	class:SteerLib::AgentMetrics
minChangeInSpeedOverWindow	include/benchmarking/MetricsData.h	/^		float minChangeInSpeedOverWindow;$/;"	m	class:SteerLib::AgentMetrics
minDegreesTurnedOverWindow	include/benchmarking/MetricsData.h	/^		float minDegreesTurnedOverWindow;$/;"	m	class:SteerLib::AgentMetrics
minDistanceTraveledOverWindow	include/benchmarking/MetricsData.h	/^		float minDistanceTraveledOverWindow;      \/\/ units: meters$/;"	m	class:SteerLib::AgentMetrics
minVariableDt	include/simulation/SimulationOptions.h	/^			float minVariableDt;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
mint	include/util/Geometry.h	/^		float mint, maxt;$/;"	m	class:Util::Ray
module	include/interfaces/EngineInterface.h	/^		SteerLib::ModuleInterface * module;$/;"	m	struct:SteerLib::ModuleMetaInformation
moduleName	include/interfaces/EngineInterface.h	/^		std::string moduleName;$/;"	m	struct:SteerLib::ModuleMetaInformation
moduleOptionsDatabase	include/simulation/SimulationOptions.h	/^		SteerLib::ModuleOptionsDatabase   moduleOptionsDatabase;$/;"	m	class:SteerLib::SimulationOptions
moduleSearchPath	include/simulation/SimulationOptions.h	/^			std::string moduleSearchPath;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
modulesDependentOnThis	include/interfaces/EngineInterface.h	/^		std::set<ModuleMetaInformation*> modulesDependentOnThis;$/;"	m	struct:SteerLib::ModuleMetaInformation
mouseBindings	include/simulation/SimulationOptions.h	/^		MouseBindings   mouseBindings;$/;"	m	class:SteerLib::SimulationOptions
mouseMovementFactor	include/simulation/SimulationOptions.h	/^			float mouseMovementFactor;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
mouseRotationFactor	include/simulation/SimulationOptions.h	/^			float mouseRotationFactor;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
mouseZoomFactor	include/simulation/SimulationOptions.h	/^			float mouseZoomFactor;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
moveCamera	include/simulation/SimulationOptions.h	/^			int moveCamera;$/;"	m	struct:SteerLib::SimulationOptions::MouseBindings
mrandom	include/benchmarking/BayesianFilter.h	/^inline double mrandom() {$/;"	f
name	include/testcaseio/AgentInitialConditions.h	/^		std::string name;$/;"	m	struct:SteerLib::AgentInitialConditions
name	include/testcaseio/TestCaseIOPrivate.h	/^		std::string name;$/;"	m	class:SteerLib::RawAgentInfo
name	include/testcaseio/TestCaseIOPrivate.h	/^		std::string name;$/;"	m	class:SteerLib::TestCaseHeader
nextPointOfInterestView	src/Camera.cpp	/^CameraView Camera::nextPointOfInterestView()$/;"	f	class:Camera
noTweakBar	include/simulation/SimulationOptions.h	/^			bool noTweakBar;$/;"	m	struct:SteerLib::SimulationOptions::GlobalOptions
norm	include/util/dmatrix.h	/^inline double norm(const Matrix& q) {$/;"	f
normal	include/benchmarking/BayesianFilter.h	/^inline double normal() {$/;"	f
normal	include/util/Geometry.h	/^		Vector normal;$/;"	m	class:Util::Plane
normalize	include/util/Geometry.h	/^	static inline Vector normalize(const Vector &vec) { float lengthInv = 1.0f \/ sqrtf(vec.x*vec.x + vec.y*vec.y + vec.z*vec.z);  return Vector(lengthInv * vec.x, lengthInv * vec.y, lengthInv * vec.z); }$/;"	f	namespace:Util
normalizedInverseDistance	include/util/Geometry.h	/^	static inline Vector normalizedInverseDistance(std::vector<Point> points, Point point)$/;"	f	namespace:Util
nudgePosition	src/Camera.cpp	/^void Camera::nudgePosition(float xNudge, float yNudge)$/;"	f	class:Camera
nudgeRotate	src/Camera.cpp	/^void Camera::nudgeRotate(float tilt, float swivel)$/;"	f	class:Camera
nudgeZoom	src/Camera.cpp	/^void Camera::nudgeZoom(float zoom)$/;"	f	class:Camera
numAgents	include/benchmarking/BenchmarkEngine.h	/^		size_t numAgents() { return _agents.size(); }$/;"	f	class:SteerLib::BenchmarkEngine
numAgents	include/recfileio/RecFileIOPrivate.h	/^		unsigned int numAgents;$/;"	m	struct:SteerLib::RecFileHeader
numArgs	include/util/CommandLineParser.h	/^			unsigned int numArgs;$/;"	m	struct:Util::CommandLineParser::OptionInfo
numCameraViews	include/recfileio/RecFileIOPrivate.h	/^		unsigned int numCameraViews;$/;"	m	struct:SteerLib::RecFileHeader
numColumns	include/util/dmatrix.h	/^  inline size_t numColumns() const { $/;"	f	class:Matrix
numFrames	include/recfileio/RecFileIOPrivate.h	/^		unsigned int numFrames;$/;"	m	struct:SteerLib::RecFileHeader
numFramesToSimulate	include/simulation/SimulationOptions.h	/^			unsigned int numFramesToSimulate;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
numGridCellsX	include/simulation/SimulationOptions.h	/^			unsigned int numGridCellsX;$/;"	m	struct:SteerLib::SimulationOptions::GridDatabaseOptions
numGridCellsZ	include/simulation/SimulationOptions.h	/^			unsigned int numGridCellsZ;$/;"	m	struct:SteerLib::SimulationOptions::GridDatabaseOptions
numObstacles	include/recfileio/RecFileIOPrivate.h	/^		unsigned int numObstacles;$/;"	m	struct:SteerLib::RecFileHeader
numRows	include/util/dmatrix.h	/^  inline size_t numRows() const { $/;"	f	class:Matrix
numThreads	include/simulation/SimulationOptions.h	/^			unsigned int numThreads;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
numTimesAccelerationChangedSignOverWindow	include/benchmarking/MetricsData.h	/^		unsigned int numTimesAccelerationChangedSignOverWindow;$/;"	m	class:SteerLib::AgentMetrics
numTimesVelocityChangedSignOverWindow	include/benchmarking/MetricsData.h	/^		unsigned int numTimesVelocityChangedSignOverWindow;$/;"	m	class:SteerLib::AgentMetrics
numUniqueCollisions	include/benchmarking/MetricsData.h	/^		unsigned int numUniqueCollisions;$/;"	m	class:SteerLib::AgentMetrics
obstacleBounds	include/testcaseio/TestCaseIOPrivate.h	/^		Util::AxisAlignedBox obstacleBounds;$/;"	m	class:SteerLib::RawObstacleInfo
obstacleListOffset	include/recfileio/RecFileIOPrivate.h	/^		unsigned int obstacleListOffset;$/;"	m	struct:SteerLib::RecFileHeader
obstacleListSize	include/recfileio/RecFileIOPrivate.h	/^		unsigned int obstacleListSize;$/;"	m	struct:SteerLib::RecFileHeader
one	include/util/Geometry.h	/^		void one() { x = 1.0f; y = 1.0f; z = 1.0f; }$/;"	f	class:Util::Vector
open	src/MemoryMapper.cpp	/^void MemoryMapper::open( std::string filename )$/;"	f	class:MemoryMapper
open	src/RecFileReader.cpp	/^void RecFileReader::open(const std::string & filename)$/;"	f	class:RecFileReader
operator !	include/util/dmatrix.h	/^inline Matrix operator!(const Matrix& q) {$/;"	f
operator !=	include/util/Geometry.h	/^		bool operator!=(const Point &pt) const { return ((x != pt.x) || (y != pt.y) || (z != pt.z)); }$/;"	f	class:Util::Point
operator !=	include/util/Geometry.h	/^		bool operator!=(const Vector &vec) const { return ((x != vec.x) || (y != vec.y) || (z != vec.z)); }$/;"	f	class:Util::Vector
operator !=	include/util/Geometry.h	/^		bool operator!=(const float c) const { return ((x != c) && (y != c) && (z != c)); }$/;"	f	class:Util::Vector
operator !=	include/util/dmatrix.h	/^  inline bool operator!=(const Matrix& q) const {$/;"	f	class:Matrix
operator %	include/util/dmatrix.h	/^  inline Matrix operator%(const Matrix& q) const {$/;"	f	class:Matrix
operator ()	include/planning/BestFirstSearchPlanner.h	/^		bool operator () (const BestFirstSearchNode<PlanningState, PlanningAction> & n1, const BestFirstSearchNode<PlanningState, PlanningAction> & n2) const { $/;"	f	class:SteerLib::CompareCosts
operator ()	include/util/dmatrix.h	/^  inline double  operator () (size_t row, size_t column) const {$/;"	f	class:Matrix
operator ()	include/util/dmatrix.h	/^  inline double& operator () (size_t row, size_t column) {$/;"	f	class:Matrix
operator *	include/util/Color.h	/^		Color operator*( float c ) const { return Color(c*r, c*g, c*b); }$/;"	f	class:Util::Color
operator *	include/util/Color.h	/^	static inline Util::Color operator*( float f, const Util::Color & c) { return c*f; }$/;"	f	namespace:Util
operator *	include/util/Geometry.h	/^		Point operator* (float c) const { return Point(c*x, c*y, c*z); }$/;"	f	class:Util::Point
operator *	include/util/Geometry.h	/^		Vector operator*(float c) const { return Vector(c*x, c*y, c*z); }$/;"	f	class:Util::Vector
operator *	include/util/Geometry.h	/^		float operator*( const Vector &vec2) const { return x * vec2.x + y * vec2.y + z * vec2.z; }$/;"	f	class:Util::Vector
operator *	include/util/Geometry.h	/^	static inline Point operator*(float c, const Point &pt) { return Point(c*pt.x, c*pt.y, c*pt.z); }$/;"	f	namespace:Util
operator *	include/util/Geometry.h	/^	static inline Vector operator*(float c, const Vector &vec) { return Vector(c*vec.x, c*vec.y, c*vec.z); }$/;"	f	namespace:Util
operator *	include/util/dmatrix.h	/^  inline Matrix operator*(const Matrix& q) const {$/;"	f	class:Matrix
operator *	include/util/dmatrix.h	/^  inline Matrix operator*(double a) const { $/;"	f	class:Matrix
operator *	include/util/dmatrix.h	/^inline Matrix operator*(double a, const Matrix& q) { return q*a; }$/;"	f
operator *=	include/util/Geometry.h	/^		void operator*=(float c) { x *= c; y *= c; z *= c; }$/;"	f	class:Util::Vector
operator *=	include/util/dmatrix.h	/^  inline const Matrix& operator*=(const Matrix& q) { $/;"	f	class:Matrix
operator *=	include/util/dmatrix.h	/^  inline const Matrix& operator*=(double a) { $/;"	f	class:Matrix
operator +	include/util/Color.h	/^		Color operator+( const Color & col ) const { return Color(r + col.r, g + col.g, b + col.b); }$/;"	f	class:Util::Color
operator +	include/util/Geometry.h	/^		Point operator+(const Point &pt)   const { return Point(x + pt.x,  y + pt.y,  z + pt.z);  }$/;"	f	class:Util::Point
operator +	include/util/Geometry.h	/^		Point operator+(const Vector &vec) const { return Point(x + vec.x, y + vec.y, z + vec.z); }$/;"	f	class:Util::Point
operator +	include/util/Geometry.h	/^		Vector operator+(const Vector &vec) const { return Vector(x + vec.x, y + vec.y, z + vec.z); }$/;"	f	class:Util::Vector
operator +	include/util/Geometry.h	/^		Vector operator+(const float &f) const { return Vector(x + f, y + f, z + f); }$/;"	f	class:Util::Vector
operator +	include/util/dmatrix.h	/^  inline Matrix operator+(const Matrix& q) const {$/;"	f	class:Matrix
operator +	include/util/dmatrix.h	/^  inline const Matrix& operator+() const { $/;"	f	class:Matrix
operator +=	include/util/Geometry.h	/^		void operator+=(const Vector &vec) { x += vec.x; y += vec.y; z += vec.z; }$/;"	f	class:Util::Vector
operator +=	include/util/dmatrix.h	/^  inline const Matrix& operator+=(const Matrix& q) { $/;"	f	class:Matrix
operator -	include/util/Color.h	/^		Color operator-( const Color & col ) const { return Color(r - col.r, g - col.g, b - col.b); }$/;"	f	class:Util::Color
operator -	include/util/Geometry.h	/^		Point operator-(const Vector &vec) const { return Point(x - vec.x, y - vec.y, z - vec.z); }$/;"	f	class:Util::Point
operator -	include/util/Geometry.h	/^		Vector operator-() const { return Vector(-x, -y, -z); }$/;"	f	class:Util::Vector
operator -	include/util/Geometry.h	/^		Vector operator-(const Point &pt)  const {return Vector(x - pt.x,  y - pt.y,  z - pt.z);  }$/;"	f	class:Util::Point
operator -	include/util/Geometry.h	/^		Vector operator-(const Vector &vec) const { return Vector(x - vec.x, y - vec.y, z - vec.z); }$/;"	f	class:Util::Vector
operator -	include/util/dmatrix.h	/^  inline Matrix operator-() const {$/;"	f	class:Matrix
operator -	include/util/dmatrix.h	/^  inline Matrix operator-(const Matrix& q) const { $/;"	f	class:Matrix
operator -=	include/util/Geometry.h	/^		void operator-=(const Vector &vec) { x -= vec.x; y -= vec.y; z -= vec.z; }$/;"	f	class:Util::Vector
operator -=	include/util/dmatrix.h	/^  inline const Matrix& operator-=(const Matrix& q) { $/;"	f	class:Matrix
operator /	include/util/Color.h	/^		Color operator\/( float c ) const { assert(c!=0); float cInverse = 1.0f \/ c; return Color(r * cInverse, g * cInverse, b * cInverse); }$/;"	f	class:Util::Color
operator /	include/util/Geometry.h	/^		Point operator\/ (float c) const { float cInverse = 1.0f \/ c; return Point(cInverse*x, cInverse*y, cInverse*z); }$/;"	f	class:Util::Point
operator /	include/util/Geometry.h	/^		Vector operator\/(float c) const { float cInverse = 1.0f \/ c; return Vector(cInverse*x, cInverse*y, cInverse*z); }$/;"	f	class:Util::Vector
operator /	include/util/dmatrix.h	/^  inline Matrix operator\/(const Matrix& q) const {$/;"	f	class:Matrix
operator /	include/util/dmatrix.h	/^  inline Matrix operator\/(double a) const { $/;"	f	class:Matrix
operator /=	include/util/Geometry.h	/^		void operator\/=(float c) { float cInverse = 1.0f \/ c; (*this) *= cInverse; }$/;"	f	class:Util::Vector
operator /=	include/util/dmatrix.h	/^  inline const Matrix& operator\/=(double a) { $/;"	f	class:Matrix
operator <	include/util/Geometry.h	/^		bool operator<(const Point &pt) const { return x*x + y*y + z*z < pt.x*pt.x + pt.y*pt.y + pt.z*pt.z; }$/;"	f	class:Util::Point
operator <<	include/interfaces/AgentInterface.h	/^	inline std::ostream &operator<<(std::ostream &out, const AgentInterface &a)$/;"	f	namespace:SteerLib
operator <<	include/util/Color.h	/^	static inline std::ostream &operator<<(std::ostream &out, const Color &col) { out << "(" << col.r << "," << col.g << "," << col.b << ")"; return out; }$/;"	f	namespace:Util
operator <<	include/util/Geometry.h	/^	static inline std::ostream &operator<<(std::ostream &out, const AxisAlignedBox &bb) { out << "(xmin: " << bb.xmin << ", xmax: " << bb.xmax << ", ymin: " << bb.ymin << ", ymax: " << bb.ymax << ", zmin: " << bb.zmin << ", zmax: " << bb.zmax << ")"; return out; }$/;"	f	namespace:Util
operator <<	include/util/Geometry.h	/^	static inline std::ostream &operator<<(std::ostream &out, const Point &pt) { out << "(" << pt.x << "," << pt.y << "," << pt.z << ")"; return out; }$/;"	f	namespace:Util
operator <<	include/util/Geometry.h	/^	static inline std::ostream &operator<<(std::ostream &out, const Ray &r) { out << "pos: " << r.pos << "dir: " << r.dir << " range [" << r.mint << "," << r.maxt << "]"; return out; }$/;"	f	namespace:Util
operator <<	include/util/Geometry.h	/^	static inline std::ostream &operator<<(std::ostream &out, const Vector &vec) { out << "(" << vec.x << "," << vec.y << "," << vec.z << ")"; return out; }$/;"	f	namespace:Util
operator <<	include/util/dmatrix.h	/^inline std::ostream& operator<<(std::ostream& os, const Matrix& q) {$/;"	f
operator =	include/util/dmatrix.h	/^  Matrix& operator = (const Matrix& q) {$/;"	f	class:Matrix
operator ==	include/util/Geometry.h	/^		bool operator==(const Point &pt) const { return ((x == pt.x) && (y == pt.y) && (z == pt.z)); }$/;"	f	class:Util::Point
operator ==	include/util/Geometry.h	/^		bool operator==(const Vector &vec) const { return ((x == vec.x) && (y == vec.y) && (z == vec.z)); }$/;"	f	class:Util::Vector
operator ==	include/util/Geometry.h	/^		bool operator==(const float c) const { return ((x == c) && (y == c) && (z == c)); }$/;"	f	class:Util::Vector
operator ==	include/util/Geometry.h	/^		bool operator==(float c) const { float epsilon = 0.001f; return ((c <= y+epsilon) && (c >= y-epsilon));}$/;"	f	class:Util::Point
operator ==	include/util/dmatrix.h	/^  inline bool operator==(const Matrix& q) const {$/;"	f	class:Matrix
operator >>	include/util/dmatrix.h	/^inline std::istream& operator>>(std::istream& is, Matrix& q) {$/;"	f
operator []	include/benchmarking/MetricsData.h	/^		T& operator[] (int index) { $/;"	f	class:SteerLib::windowArray
operator []	include/util/Geometry.h	/^		float &operator[](unsigned int i) { assert(i<3); return (&x)[i]; }$/;"	f	class:Util::Point
operator []	include/util/Geometry.h	/^		float &operator[](unsigned int i) { assert(i<3); return (&x)[i]; }$/;"	f	class:Util::Vector
operator []	include/util/Geometry.h	/^		float operator[](unsigned int i) const { assert(i<3); return (&x)[i]; }$/;"	f	class:Util::Point
operator []	include/util/Geometry.h	/^		float operator[](unsigned int i) const { assert(i<3); return (&x)[i]; }$/;"	f	class:Util::Vector
operator []	include/util/dmatrix.h	/^  inline double  operator [] (size_t elt) const$/;"	f	class:Matrix
operator []	include/util/dmatrix.h	/^  inline double& operator [] (size_t elt) {$/;"	f	class:Matrix
operator ~	include/util/dmatrix.h	/^  inline Matrix operator~() const {$/;"	f	class:Matrix
optimalParticleFilter	include/benchmarking/BayesianFilter.h	/^inline void optimalParticleFilter(std::vector<Matrix>& X, std::vector<double>& W, const Matrix& u, const Matrix& z, $/;"	f
optimalParticleFilter	include/benchmarking/BayesianFilter.h	/^inline void optimalParticleFilter(std::vector<Matrix>& X, std::vector<double>& W, const Matrix& u, const Matrix& z, size_t mDim, $/;"	f
origin	include/recfileio/RecFileIOPrivate.h	/^		RecFilePointData origin;$/;"	m	struct:SteerLib::RecFileCameraInfo
outputFormattedXML	include/util/XMLParser.h	/^		virtual void outputFormattedXML(std::ostream &out, const std::string & indentation) { }$/;"	f	class:Util::XMLParserCallbackInterface
outputFormattedXML	src/SimulationOptions.cpp	/^void ModuleOptionsXMLParser::outputFormattedXML(std::ostream &out, const std::string & indentation)$/;"	f	class:ModuleOptionsXMLParser
outputFormattedXML	src/SimulationOptions.cpp	/^void StartupModulesXMLParser::outputFormattedXML(std::ostream &out, const std::string & indentation)$/;"	f	class:StartupModulesXMLParser
outputFormattedXML	src/XMLParser.cpp	/^void XMLTag::outputFormattedXML(std::ostream & out, const std::string & indentation )$/;"	f	class:XMLTag
overlaps	include/benchmarking/BenchmarkEnginePrivate.h	/^		bool overlaps(const Util::Point & p, float radius) { return Util::circleOverlapsCircle2D( _position, _radius, p, radius); }$/;"	f	class:SteerLib::BenchmarkAgent
overlaps	include/modules/DummyAIModule.h	/^		bool overlaps(const Util::Point & p, float radius) { return Util::circleOverlapsCircle2D( _position, _radius, p, radius); }$/;"	f	class:SteerLib::DummyAgent
overlaps	include/modules/RecFilePlayerModule.h	/^		bool overlaps(const Util::Point & p, float radius) { return Util::circleOverlapsCircle2D( _position, _radius, p, radius); }$/;"	f	class:SteerLib::ReplayAgent
overlaps	include/obstacles/BoxObstacle.h	/^		virtual bool overlaps(const Util::Point & p, float radius) { return Util::boxOverlapsCircle2D(_bounds.xmin, _bounds.xmax, _bounds.zmin, _bounds.zmax,p, radius); }$/;"	f	class:SteerLib::BoxObstacle
overlaps	include/obstacles/CircleObstacle.h	/^		virtual bool overlaps(const Util::Point & p, float radius) { return Util::circleOverlapsCircle2D(_centerPosition,_radius,p, radius); }$/;"	f	class:SteerLib::CircleObstacle
overlaps	include/obstacles/OrientedBoxObstacle.h	/^		virtual bool overlaps(const Util::Point & p, float radius) $/;"	f	class:SteerLib::OrientedBoxObstacle
overlaps	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool overlaps(const Util::Point & p, float radius) { return Util::boxOverlapsCircle2D(obstacleBounds.xmin, obstacleBounds.xmax, obstacleBounds.zmin, obstacleBounds.zmax,p, radius); }$/;"	f	class:SteerLib::RawBoxObstacleInfo
overlaps	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool overlaps(const Util::Point & p, float radius) { return Util::circleOverlapsCircle2D( position, this->radius, p, radius); }$/;"	f	class:SteerLib::RawAgentInfo
overlaps	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool overlaps(const Util::Point & p, float radius) { return Util::circleOverlapsCircle2D(this->position, this->radius, p, radius); }$/;"	f	class:SteerLib::RawCircleObstacleInfo
overlaps	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool overlaps(const Util::Point & p, float radius) { return false; }$/;"	f	class:SteerLib::RawObstacleInfo
overlaps	include/testcaseio/TestCaseIOPrivate.h	/^		virtual bool overlaps(const Util::Point & p, float radius) {$/;"	f	class:SteerLib::RawOrientedBoxObstacleInfo
parameterDemo	include/simulation/SimulationOptions.h	/^			bool parameterDemo;$/;"	m	struct:SteerLib::SimulationOptions::GlobalOptions
parameters	include/testcaseio/Behaviour.h	/^		std::vector<BehaviourParameter > parameters;$/;"	m	class:SteerLib::Behaviour
parse	src/CommandLineParser.cpp	/^void CommandLineParser::parse( int argc, char** argv, bool skipFirstArg, bool throwExceptionIfUnrecognizedArgs)$/;"	f	class:CommandLineParser
parse	src/CommandLineParser.cpp	/^void CommandLineParser::parse( int argc, char** argv, bool skipFirstArg, std::vector<char*> &leftoverArgs )$/;"	f	class:CommandLineParser
parse	src/XMLParser.cpp	/^void XMLTag::parse(const ticpp::Element * subRoot, bool throwIfUnrecognizedTag )$/;"	f	class:XMLTag
parseXMLFile	src/XMLParser.cpp	/^void XMLParser::parseXMLFile(const std::string & filename, bool throwIfUnrecognizedTag )$/;"	f	class:XMLParser
particleFilter	include/benchmarking/BayesianFilter.h	/^inline void particleFilter(std::vector<Matrix>& X, std::vector<double>& W, const Matrix& u, const Matrix& z, $/;"	f
passingCriteria	include/testcaseio/TestCaseIOPrivate.h	/^		std::string passingCriteria;$/;"	m	class:SteerLib::TestCaseHeader
pathExists	src/Misc.cpp	/^bool Util::pathExists( const std::string & pathname )$/;"	f	class:Util
pause	include/simulation/SimulationOptions.h	/^			int pause;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
pausedOnStart	include/simulation/SimulationOptions.h	/^			bool pausedOnStart;$/;"	m	struct:SteerLib::SimulationOptions::GLFWEngineDriverOptions
pdf	include/benchmarking/BayesianFilter.h	/^inline double pdf(const Matrix& var, const Matrix& x) {$/;"	f
pfControlUpdate	include/benchmarking/BayesianFilter.h	/^inline void pfControlUpdate(std::vector<Matrix>& X, const Matrix& u, size_t mDim, Matrix (*f)(const Matrix&, const Matrix&, const Matrix&)) {$/;"	f
pfMeasurementUpdate	include/benchmarking/BayesianFilter.h	/^inline void pfMeasurementUpdate(std::vector<Matrix>& X, std::vector<double>& W, const Matrix& z, Matrix (*h)(const Matrix&), const Matrix& N) $/;"	f
pfMeasurementUpdate	include/benchmarking/BayesianFilter.h	/^inline void pfMeasurementUpdate(std::vector<Matrix>& X, std::vector<double>& W, const Matrix& z, size_t nDim, Matrix (*h)(const Matrix&, const Matrix&), double jStep = DEFAULTSTEPSIZE) $/;"	f
planPath	src/GridDatabase2D.cpp	/^bool GridDatabase2D::planPath(unsigned int startLocation, unsigned int goalLocation, std::stack<unsigned int> & outputPlan) { $/;"	f	class:GridDatabase2D
planPath	src/GridDatabase2D.cpp	/^bool GridDatabase2D::planPath(unsigned int startLocation, unsigned int goalLocation, std::stack<unsigned int> & outputPlan, unsigned int maxNodes) { $/;"	f	class:GridDatabase2D
pleEnergy	include/benchmarking/MetricsData.h	/^		float pleEnergy;$/;"	m	class:SteerLib::AgentMetrics
point	include/util/Geometry.h	/^		Point point;$/;"	m	class:Util::Plane
pos	include/recfileio/RecFileIOPrivate.h	/^		RecFilePointData pos;$/;"	m	struct:SteerLib::RecFileAgentInfo
pos	include/util/Geometry.h	/^		Point pos;$/;"	m	class:Util::Ray
position	include/benchmarking/BenchmarkEnginePrivate.h	/^		Util::Point position() const { return _position; }$/;"	f	class:SteerLib::BenchmarkAgent
position	include/modules/DummyAIModule.h	/^		Util::Point position() const { return _position; }$/;"	f	class:SteerLib::DummyAgent
position	include/modules/RecFilePlayerModule.h	/^		Util::Point position() const { return _position; }$/;"	f	class:SteerLib::ReplayAgent
position	include/simulation/Camera.h	/^			Util::Point position;$/;"	m	class:SteerLib::CameraView
position	include/testcaseio/AgentInitialConditions.h	/^		Util::Point position;$/;"	m	struct:SteerLib::AgentInitialConditions
position	include/testcaseio/ObstacleInitialConditions.h	/^		Util::Point position;$/;"	m	struct:SteerLib::CircleObstacleInitialConditions
position	include/testcaseio/ObstacleInitialConditions.h	/^		Util::Point position;$/;"	m	struct:SteerLib::OrientedBoxObstacleInitialConditions
position	include/testcaseio/TestCaseIOPrivate.h	/^		Util::Point position;$/;"	m	class:SteerLib::RawAgentInfo
position	include/testcaseio/TestCaseIOPrivate.h	/^		Util::Point position;$/;"	m	class:SteerLib::RawCircleObstacleInfo
position	include/testcaseio/TestCaseIOPrivate.h	/^		Util::Point position;$/;"	m	class:SteerLib::RawOrientedBoxObstacleInfo
position	include/util/Curve.h	/^			Point position;$/;"	m	class:Util::CurvePoint
position	src/Camera.cpp	/^Point Camera::position()$/;"	f	class:Camera
positionLights	src/DrawLib.cpp	/^void DrawLib::positionLights()$/;"	f	class:DrawLib
positions	build/win32/AnimationCurve.h	/^		std::vector<Point> positions;$/;"	m	class:Util::Curve
postprocessFrame	include/interfaces/ModuleInterface.h	/^		virtual void postprocessFrame(float timeStamp, float dt, unsigned int frameNumber) { }$/;"	f	class:SteerLib::ModuleInterface
postprocessFrame	include/modules/MetricsCollectorModule.h	/^		void postprocessFrame(float timeStamp, float dt, unsigned int frameNumber) {$/;"	f	class:SteerLib::MetricsCollectorModule
postprocessFrame	include/modules/SteerBenchModule.h	/^		void postprocessFrame(float timeStamp, float dt, unsigned int frameNumber) {$/;"	f	class:SteerLib::SteerBenchModule
postprocessFrame	src/SimulationRecorderModule.cpp	/^void SimulationRecorderModule::postprocessFrame(float timeStamp, float dt, unsigned int frameNumber) {$/;"	f	class:SimulationRecorderModule
postprocessFrame	src/TestCasePlayerModule.cpp	/^void TestCasePlayerModule::postprocessFrame(float timeStamp, float dt, unsigned int frameNumber) {$/;"	f	class:TestCasePlayerModule
postprocessSimulation	include/interfaces/ModuleInterface.h	/^		virtual void postprocessSimulation() { }$/;"	f	class:SteerLib::ModuleInterface
postprocessSimulation	include/modules/SteerBenchModule.h	/^		void postprocessSimulation() {$/;"	f	class:SteerLib::SteerBenchModule
postprocessSimulation	src/SimulationEngine.cpp	/^void SimulationEngine::postprocessSimulation()$/;"	f	class:SimulationEngine
postprocessSimulation	src/SimulationRecorderModule.cpp	/^void SimulationRecorderModule::postprocessSimulation() {$/;"	f	class:SimulationRecorderModule
preprocessFrame	include/interfaces/ModuleInterface.h	/^		virtual void preprocessFrame(float timeStamp, float dt, unsigned int frameNumber) { }$/;"	f	class:SteerLib::ModuleInterface
preprocessFrame	include/modules/SteerBenchModule.h	/^		void preprocessFrame(float timeStamp, float dt, unsigned int frameNumber)$/;"	f	class:SteerLib::SteerBenchModule
preprocessFrame	src/RecFilePlayerModule.cpp	/^void RecFilePlayerModule::preprocessFrame(float timeStamp, float dt, unsigned int frameNumber)$/;"	f	class:RecFilePlayerModule
preprocessSimulation	include/interfaces/ModuleInterface.h	/^		virtual void preprocessSimulation() { }$/;"	f	class:SteerLib::ModuleInterface
preprocessSimulation	include/modules/MetricsCollectorModule.h	/^		void preprocessSimulation() {$/;"	f	class:SteerLib::MetricsCollectorModule
preprocessSimulation	include/modules/SteerBenchModule.h	/^		void preprocessSimulation() {$/;"	f	class:SteerLib::SteerBenchModule
preprocessSimulation	src/SimulationEngine.cpp	/^void SimulationEngine::preprocessSimulation()$/;"	f	class:SimulationEngine
preprocessSimulation	src/SimulationRecorderModule.cpp	/^void SimulationRecorderModule::preprocessSimulation() {$/;"	f	class:SimulationRecorderModule
prevTime_used_in_getFramesForTimeFunction	include/recfileio/RecFileIOPrivate.h	/^		float prevTime_used_in_getFramesForTimeFunction;$/;"	m	class:SteerLib::RecFileReaderPrivate
previousState	include/planning/BestFirstSearchPlanner.h	/^		PlanningState previousState;$/;"	m	class:SteerLib::BestFirstSearchNode
printAgentScoreCSV	include/interfaces/BenchmarkTechniqueInterface.h	/^		virtual void printAgentScoreCSV(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics, std::ostream & out)  { throw Util::GenericException("printAgentScoreCSV not implemented for this class"); }$/;"	f	class:SteerLib::BenchmarkTechniqueInterface
printAgentScoreDetails	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void printAgentScoreDetails(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics, std::ostream & out) { $/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
printAgentScoreDetails	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void printAgentScoreDetails(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics, std::ostream & out) { $/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
printAgentScoreDetails	src/BenchmarkEngine.cpp	/^void BenchmarkEngine::printAgentScoreDetails(unsigned int agentIndex, std::ostream & out)$/;"	f	class:BenchmarkEngine
printAgentScoreDetails	src/CompositeTechnique01.cpp	/^void CompositeBenchmarkTechnique01::printAgentScoreDetails(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics, std::ostream & out) {$/;"	f	class:CompositeBenchmarkTechnique01
printAgentScoreDetails	src/CompositeTechnique02.cpp	/^void CompositeBenchmarkTechnique02::printAgentScoreDetails(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics, std::ostream & out) {$/;"	f	class:CompositeBenchmarkTechnique02
printAgentScoreDetails	src/CompositeTechniquePLE.cpp	/^void CompositeBenchmarkTechniquePLE::printAgentScoreDetails(unsigned int agentIndex, SimulationMetricsCollector * simulationMetrics, std::ostream & out) {$/;"	f	class:CompositeBenchmarkTechniquePLE
printCameraInfo	include/simulation/SimulationOptions.h	/^			int printCameraInfo;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
printCurrentMetrics	src/BenchmarkEngine.cpp	/^void BenchmarkEngine::printCurrentMetrics(unsigned int agentIndex, std::ostream & out)$/;"	f	class:BenchmarkEngine
printCurrentMetrics	src/SimulationMetricsCollector.cpp	/^void SimulationMetricsCollector::printCurrentMetrics(unsigned int agentIndex, std::ostream & out)$/;"	f	class:SimulationMetricsCollector
printFormattedCurrentStatistics	src/AgentMetricsCollector.cpp	/^void AgentMetricsCollector::printFormattedCurrentStatistics(std::ostream & out)$/;"	f	class:AgentMetricsCollector
printFormattedOverallStatistics	src/AgentMetricsCollector.cpp	/^void AgentMetricsCollector::printFormattedOverallStatistics(std::ostream & out)$/;"	f	class:AgentMetricsCollector
printTotalScoreCSV	include/interfaces/BenchmarkTechniqueInterface.h	/^		virtual void printTotalScoreCSV(SimulationMetricsCollector * simulationMetrics, std::ostream & out) { throw Util::GenericException("printTotalScoreCSV not implemented for this class"); }$/;"	f	class:SteerLib::BenchmarkTechniqueInterface
printTotalScoreDetails	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void printTotalScoreDetails(SimulationMetricsCollector * simulationMetrics, std::ostream & out) {$/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
printTotalScoreDetails	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void printTotalScoreDetails(SimulationMetricsCollector * simulationMetrics, std::ostream & out) {$/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
printTotalScoreDetails	src/BenchmarkEngine.cpp	/^void BenchmarkEngine::printTotalScoreDetails(std::ostream & out)$/;"	f	class:BenchmarkEngine
printTotalScoreDetails	src/CompositeTechnique01.cpp	/^void CompositeBenchmarkTechnique01::printTotalScoreDetails(SimulationMetricsCollector * simulationMetrics, std::ostream & out) {$/;"	f	class:CompositeBenchmarkTechnique01
printTotalScoreDetails	src/CompositeTechnique02.cpp	/^void CompositeBenchmarkTechnique02::printTotalScoreDetails(SimulationMetricsCollector * simulationMetrics, std::ostream & out) {$/;"	f	class:CompositeBenchmarkTechnique02
printTotalScoreDetails	src/CompositeTechniquePLE.cpp	/^void CompositeBenchmarkTechniquePLE::printTotalScoreDetails(SimulationMetricsCollector * simulationMetrics, std::ostream & out) {$/;"	f	class:CompositeBenchmarkTechniquePLE
processKeyboardInput	include/interfaces/ModuleInterface.h	/^		virtual void processKeyboardInput(int key, int action ) { }$/;"	f	class:SteerLib::ModuleInterface
processKeyboardInput	src/RecFilePlayerModule.cpp	/^void RecFilePlayerModule::processKeyboardInput(int key, int action )$/;"	f	class:RecFilePlayerModule
processKeyboardInput	src/SimulationEngine.cpp	/^void SimulationEngine::processKeyboardInput(int key, int action)$/;"	f	class:SimulationEngine
pseudoInverse	include/util/dmatrix.h	/^inline Matrix pseudoInverse(const Matrix& q) { $/;"	f
qtEngineDriverOptions	include/simulation/SimulationOptions.h	/^		QtEngineDriverOptions   qtEngineDriverOptions;$/;"	m	class:SteerLib::SimulationOptions
quit	include/simulation/SimulationOptions.h	/^			int quit;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
r	include/util/Color.h	/^		float r, g, b;$/;"	m	class:Util::Color
r	include/util/Geometry.h	/^		float x, z, r;$/;"	m	class:Util::Circle
radius	include/benchmarking/BenchmarkEnginePrivate.h	/^		float radius() const { return _radius; }$/;"	f	class:SteerLib::BenchmarkAgent
radius	include/modules/DummyAIModule.h	/^		float radius() const { return _radius; }$/;"	f	class:SteerLib::DummyAgent
radius	include/modules/RecFilePlayerModule.h	/^		float radius() const { return _radius; }$/;"	f	class:SteerLib::ReplayAgent
radius	include/recfileio/RecFileIOPrivate.h	/^		float radius;$/;"	m	struct:SteerLib::RecFileAgentInfo
radius	include/testcaseio/AgentInitialConditions.h	/^		float radius;$/;"	m	struct:SteerLib::AgentInitialConditions
radius	include/testcaseio/ObstacleInitialConditions.h	/^		float radius;$/;"	m	struct:SteerLib::CircleObstacleInitialConditions
radius	include/testcaseio/TestCaseIOPrivate.h	/^		float radius;$/;"	m	class:SteerLib::RawAgentInfo
radius	include/testcaseio/TestCaseIOPrivate.h	/^		float radius;$/;"	m	class:SteerLib::RawCircleObstacleInfo
randBox	include/testcaseio/AgentInitialConditions.h	/^		Util::AxisAlignedBox randBox;$/;"	m	struct:SteerLib::AgentInitialConditions
randomPositionInRegion	src/GridDatabase2D.cpp	/^Util::Point GridDatabase2D::randomPositionInRegion(const Util::AxisAlignedBox & region, float radius,MTRand & randomNumberGenerator)$/;"	f	class:GridDatabase2D
randomPositionInRegionWithoutCollisions	src/GridDatabase2D.cpp	/^Point GridDatabase2D::randomPositionInRegionWithoutCollisions(const AxisAlignedBox & region, float radius, bool excludeAgents)$/;"	f	class:GridDatabase2D
randomPositionInRegionWithoutCollisions	src/GridDatabase2D.cpp	/^Point GridDatabase2D::randomPositionInRegionWithoutCollisions(const AxisAlignedBox & region, float radius, bool excludeAgents,  MTRand & randomNumberGenerator)$/;"	f	class:GridDatabase2D
randomPositionWithoutCollisions	src/GridDatabase2D.cpp	/^Point GridDatabase2D::randomPositionWithoutCollisions(float radius, bool excludeAgents)$/;"	f	class:GridDatabase2D
rayIntersectsBox2D	include/util/Geometry.h	/^	static inline bool rayIntersectsBox2D(float xmin, float xmax, float zmin, float zmax, const Ray &r, float &t)$/;"	f	namespace:Util
rayIntersectsCircle2D	include/util/Geometry.h	/^	static inline bool rayIntersectsCircle2D(const Point & circleCenter, float radius, const Ray &r, float &t)$/;"	f	namespace:Util
readTestCaseFromFile	src/TestCaseReader.cpp	/^void TestCaseReader::readTestCaseFromFile( const std::string & testCaseFilename )$/;"	f	class:TestCaseReader
regionBounds	include/testcaseio/TestCaseIOPrivate.h	/^		Util::AxisAlignedBox regionBounds;$/;"	m	class:SteerLib::RawAgentInfo
regionBounds	include/testcaseio/TestCaseIOPrivate.h	/^		Util::AxisAlignedBox regionBounds;$/;"	m	class:SteerLib::RawBoxObstacleInfo
remove	include/griddatabase/GridCell.h	/^		inline void remove(SpatialDatabaseItemPtr entry, unsigned int maxItems, float traversalCostToSubtract) {$/;"	f	class:SteerLib::GridCell
removeAgent	src/SimulationEngine.cpp	/^void SimulationEngine::removeAgent(SteerLib::AgentInterface * agentToRemove)$/;"	f	class:SimulationEngine
removeCommand	src/SimulationEngine.cpp	/^void SimulationEngine::removeCommand(const std::string & commandName)$/;"	f	class:SimulationEngine
removeObject	src/GridDatabase2D.cpp	/^void GridDatabase2D::removeObject( SpatialDatabaseItemPtr item, const AxisAlignedBox &oldBounds )$/;"	f	class:GridDatabase2D
removeObstacle	src/SimulationEngine.cpp	/^void SimulationEngine::removeObstacle(SteerLib::ObstacleInterface * obstacleToRemove)$/;"	f	class:SimulationEngine
reportBenchmarkResults	include/modules/SteerBenchModule.h	/^		void reportBenchmarkResults () $/;"	f	class:SteerLib::SteerBenchModule
resample	include/benchmarking/BayesianFilter.h	/^inline void resample(std::vector<Matrix>& X, std::vector<double>& W) $/;"	f
reset	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void reset () $/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
reset	include/benchmarking/BenchmarkEnginePrivate.h	/^		void reset(const SteerLib::AgentInitialConditions & initialConditions, SteerLib::EngineInterface * engineInfo) {$/;"	f	class:SteerLib::BenchmarkAgent
reset	include/benchmarking/CompositeTechnique01.h	/^		void reset () $/;"	f	class:SteerLib::CompositeBenchmarkTechnique01
reset	include/benchmarking/CompositeTechnique02.h	/^		void reset () $/;"	f	class:SteerLib::CompositeBenchmarkTechnique02
reset	include/benchmarking/CompositeTechniquePLE.h	/^		void reset () $/;"	f	class:SteerLib::CompositeBenchmarkTechniquePLE
reset	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void reset () $/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
reset	include/benchmarking/MetricsData.h	/^		void reset() { }$/;"	f	class:SteerLib::EnvironmentMetrics
reset	include/modules/DummyAIModule.h	/^		void reset(const SteerLib::AgentInitialConditions & initialConditions, SteerLib::EngineInterface * engineInfo) {$/;"	f	class:SteerLib::DummyAgent
reset	include/modules/RecFilePlayerModule.h	/^		void reset(const SteerLib::AgentInitialConditions & initialConditions, SteerLib::EngineInterface * engineInfo) { }$/;"	f	class:SteerLib::ReplayAgent
reset	include/util/dmatrix.h	/^  inline void reset() { $/;"	f	class:Matrix
reset	src/AgentMetricsCollector.cpp	/^void AgentMetrics::reset()$/;"	f	class:AgentMetrics
reset	src/AgentMetricsCollector.cpp	/^void AgentMetricsCollector::reset()$/;"	f	class:AgentMetricsCollector
reset	src/Camera.cpp	/^void Camera::reset()$/;"	f	class:Camera
reset	src/Clock.cpp	/^void Clock::reset()$/;"	f	class:Clock
reset	src/PerformanceProfiler.cpp	/^void PerformanceProfiler::reset()$/;"	f	class:PerformanceProfiler
reset	src/SimulationMetricsCollector.cpp	/^void SimulationMetricsCollector::reset()$/;"	f	class:SimulationMetricsCollector
resetBenchmarkModule	include/modules/SteerBenchModule.h	/^		void resetBenchmarkModule () $/;"	f	class:SteerLib::SteerBenchModule
resetPlaybackSpeed	include/simulation/SimulationOptions.h	/^			int resetPlaybackSpeed;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
resizeGL	src/SimulationEngine.cpp	/^void SimulationEngine::resizeGL(int width, int height)$/;"	f	class:SimulationEngine
restartPlayback	include/simulation/SimulationOptions.h	/^			int restartPlayback;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
rightSideInXZPlane	include/util/Geometry.h	/^	static inline Vector rightSideInXZPlane(const Vector & vec) { return Vector(-vec.z, vec.y, vec.x); }$/;"	f	namespace:Util
rotateCamera	include/simulation/SimulationOptions.h	/^			int rotateCamera;$/;"	m	struct:SteerLib::SimulationOptions::MouseBindings
rotateInXZPlane	include/util/Geometry.h	/^	static inline Point rotateInXZPlane(const Point & p, float angle) {$/;"	f	namespace:Util
rotateInXZPlane	include/util/Geometry.h	/^	static inline Vector rotateInXZPlane(const Vector & dir, float angle) {$/;"	f	namespace:Util
runCommand	src/SimulationEngine.cpp	/^void SimulationEngine::runCommand(const std::string & commandLine)$/;"	f	class:SimulationEngine
sampleGaussian	include/benchmarking/BayesianFilter.h	/^inline Matrix sampleGaussian(const Matrix& mean, const Matrix& var) {$/;"	f
sampleGaussian	include/benchmarking/BayesianFilter.h	/^inline Matrix sampleGaussian(size_t dim) {$/;"	f
scoot	include/simulation/SteeringCommand.h	/^		float scoot;$/;"	m	class:SteerLib::SteeringCommand
selectAgent	include/simulation/SimulationEngine.h	/^		virtual void selectAgent(SteerLib::AgentInterface * agent) { if (agent != NULL) _selectedAgents.insert(agent); }$/;"	f	class:SteerLib::SimulationEngine
selectAgent	include/simulation/SimulationOptions.h	/^			int selectAgent;$/;"	m	struct:SteerLib::SimulationOptions::MouseBindings
set	include/simulation/Camera.h	/^			inline void set(const Util::Point & newPos, const Util::Point & newLookat, const Util::Vector & newUp, const float newFovy) {$/;"	f	class:SteerLib::CameraView
setAgentInfoForCurrentFrame	include/recfileio/RecFileIO.h	/^		inline void setAgentInfoForCurrentFrame( unsigned int agentIndex, const Util::Point & pos, const Util::Vector & dir, const Util::Point & goal, float radius, bool enabled ) { setAgentInfoForCurrentFrame(agentIndex, pos.x, pos.y, pos.z, dir.x, dir.y, dir.z, goal.x, goal.y, goal.z, radius, enabled); }$/;"	f	class:SteerLib::RecFileWriter
setAgentInfoForCurrentFrame	src/RecFileWriter.cpp	/^void RecFileWriter::setAgentInfoForCurrentFrame( unsigned int index, float posx, float posy, float posz, float dirx, float diry, float dirz, float goalx, float goaly, float goalz, float radius, bool enabled )$/;"	f	class:RecFileWriter
setBackgroundColor	src/DrawLib.cpp	/^void DrawLib::setBackgroundColor(const Color& color)$/;"	f	class:DrawLib
setBenchmarkTechnique	include/modules/SteerBenchModule.h	/^		void setBenchmarkTechnique ( const std::string & techniqueName ) $/;"	f	class:SteerLib::SteerBenchModule
setBenchmarkTechnique	include/modules/SteerBenchModule.h	/^		void setBenchmarkTechnique ( const std::string & techniqueName,  const SteerLib::OptionDictionary & options, SteerLib::EngineInterface * engineInfo )$/;"	f	class:SteerLib::SteerBenchModule
setCallback	src/StateMachine.cpp	/^void StateMachine::setCallback( StateMachineCallbackInterface * callback )$/;"	f	class:StateMachine
setCameraViewTestCase	src/SimulationEngine.cpp	/^void SimulationEngine::setCameraViewTestCase(const SteerLib::CameraView& _camv)$/;"	f	class:SimulationEngine
setClockMode	src/Clock.cpp	/^void Clock::setClockMode(ClockModeEnum clockMode, float fixedFps, float minSimulationDt, float maxSimulationDt)$/;"	f	class:Clock
setColor	include/modules/RecFilePlayerModule.h	/^		void setColor(const Util::Color newColor) { _color = newColor; }$/;"	f	class:SteerLib::ReplayAgent
setCurrentGoal	include/benchmarking/BenchmarkEnginePrivate.h	/^		inline void setCurrentGoal(const SteerLib::AgentGoalInfo & newGoal) { _currentGoal = newGoal; }$/;"	f	class:SteerLib::BenchmarkAgent
setCurrentGoal	include/modules/RecFilePlayerModule.h	/^		void setCurrentGoal(const SteerLib::AgentGoalInfo & newGoal) { _currentGoal = newGoal; }$/;"	f	class:SteerLib::ReplayAgent
setEnabled	include/benchmarking/BenchmarkEnginePrivate.h	/^		inline void setEnabled(bool newEnabled) { _enabled = newEnabled; }$/;"	f	class:SteerLib::BenchmarkAgent
setEnabled	include/modules/RecFilePlayerModule.h	/^		void setEnabled(const bool newEnabled) { _enabled = newEnabled; }$/;"	f	class:SteerLib::ReplayAgent
setEngine	include/simulation/SimulationEngine.h	/^			void setEngine(SimulationEngine * newEngine) { _engine = newEngine; }$/;"	f	class:SteerLib::SimulationEngine::EngineStateMachineCallback
setEngineInterface	include/interfaces/BenchmarkTechniqueInterface.h	/^		void setEngineInterface(SteerLib::EngineInterface * engineInfo) { this->_engineInfo = engineInfo; }$/;"	f	class:SteerLib::BenchmarkTechniqueInterface
setForward	include/benchmarking/BenchmarkEnginePrivate.h	/^		inline void setForward(const Util::Vector & newForward) { _forward = newForward; }$/;"	f	class:SteerLib::BenchmarkAgent
setForward	include/modules/RecFilePlayerModule.h	/^		void setForward(const Util::Vector & newForward) { _forward = newForward; }$/;"	f	class:SteerLib::ReplayAgent
setLookat	src/Camera.cpp	/^Point Camera::setLookat(const Point & lookat)$/;"	f	class:Camera
setNewTarget	include/util/XMLParser.h	/^		void setNewTarget(void * newTarget) { _target = newTarget; }$/;"	f	class:Util::XMLTag
setParameters	include/benchmarking/BenchmarkEnginePrivate.h	/^		void setParameters(Behaviour behave)$/;"	f	class:SteerLib::BenchmarkAgent
setParameters	include/modules/DummyAIModule.h	/^		void setParameters(Behaviour behave)$/;"	f	class:SteerLib::DummyAgent
setParameters	include/modules/RecFilePlayerModule.h	/^		void setParameters(Behaviour behave)$/;"	f	class:SteerLib::ReplayAgent
setPosition	include/benchmarking/BenchmarkEnginePrivate.h	/^		inline void setPosition(const Util::Point & newPosition) { _position = newPosition; }$/;"	f	class:SteerLib::BenchmarkAgent
setPosition	include/modules/RecFilePlayerModule.h	/^		void setPosition(const Util::Point & newPosition) { _position = newPosition; }$/;"	f	class:SteerLib::ReplayAgent
setPosition	src/Camera.cpp	/^Point Camera::setPosition(const Point & pos)$/;"	f	class:Camera
setRadius	include/benchmarking/BenchmarkEnginePrivate.h	/^		inline void setRadius(float newRadius) { _radius = newRadius; }$/;"	f	class:SteerLib::BenchmarkAgent
setRadius	include/modules/RecFilePlayerModule.h	/^		void setRadius(const float newRadius) { _radius = newRadius; }$/;"	f	class:SteerLib::ReplayAgent
setStartState	src/StateMachine.cpp	/^void StateMachine::setStartState( unsigned int newState )$/;"	f	class:StateMachine
setSteeringAlg	src/Behaviour.cpp	/^void Behaviour::setSteeringAlg(std::string algName)$/;"	f	class:Behaviour
setType	include/util/Curve.h	/^			void setType(int curveType) { type = curveType; }$/;"	f	class:Util::Curve
setUp	src/Camera.cpp	/^Vector Camera::setUp(const Vector & up)$/;"	f	class:Camera
setVelocity	include/modules/RecFilePlayerModule.h	/^		void setVelocity(const Util::Vector & newVelocity)$/;"	f	class:SteerLib::ReplayAgent
setView	src/Camera.cpp	/^void Camera::setView(const CameraView & view)$/;"	f	class:Camera
setView	src/Camera.cpp	/^void Camera::setView(const Point & pos, const Point & lookat, const Vector & up, float fovy)$/;"	f	class:Camera
size	include/benchmarking/MetricsData.h	/^		int size() {$/;"	f	class:SteerLib::windowArray
size	include/testcaseio/TestCaseIOPrivate.h	/^		Util::Vector size;$/;"	m	class:SteerLib::RawOrientedBoxObstacleInfo
size	include/testcaseio/TestCaseIOPrivate.h	/^		float size;$/;"	m	class:SteerLib::RawBoxObstacleInfo
slowdownPlayback	include/simulation/SimulationOptions.h	/^			int slowdownPlayback;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
sortControlPoints	src/Curve.cpp	/^void Curve::sortControlPoints()$/;"	f	class:Curve
spawn_time	include/testcaseio/TestCaseIOPrivate.h	/^		float spawn_time, despawn_time;$/;"	m	class:SteerLib::RawAgentInfo
speed	include/testcaseio/AgentInitialConditions.h	/^		float speed;$/;"	m	struct:SteerLib::AgentInitialConditions
speed	include/testcaseio/TestCaseIOPrivate.h	/^		float speed;$/;"	m	class:SteerLib::RawAgentInfo
speedupPlayback	include/simulation/SimulationOptions.h	/^			int speedupPlayback;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
start	build/win32/AnimationCurve.h	/^		Point start;$/;"	m	class:Util::Curve
start	include/benchmarking/MetricsData.h	/^		unsigned int start, end;$/;"	m	class:SteerLib::windowArray
start	include/util/PerformanceProfiler.h	/^		inline void start() { isStopped = false; _startTick = getHighResCounterValue(); }$/;"	f	class:Util::PerformanceProfiler
start	src/StateMachine.cpp	/^void StateMachine::start()$/;"	f	class:StateMachine
startDumpingFrames	include/simulation/SimulationOptions.h	/^			int startDumpingFrames;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
startElement	include/util/XMLParser.h	/^		virtual void startElement( Util::XMLTag * tag, const ticpp::Element * subRoot ) { }$/;"	f	class:Util::XMLParserCallbackInterface
startElement	src/SimulationOptions.cpp	/^void ModuleOptionsXMLParser::startElement( Util::XMLTag * tag, const ticpp::Element * subRoot )$/;"	f	class:ModuleOptionsXMLParser
startElement	src/SimulationOptions.cpp	/^void StartupModulesXMLParser::startElement( Util::XMLTag * tag, const ticpp::Element * subRoot )$/;"	f	class:StartupModulesXMLParser
startFrame	src/RecFileWriter.cpp	/^void RecFileWriter::startFrame( float timeStamp, float timePassedSinceLastFrame )$/;"	f	class:RecFileWriter
startRecording	src/RecFileWriter.cpp	/^void RecFileWriter::startRecording(size_t numAgents, const std::string & filename, const std::string & testCaseName)$/;"	f	class:RecFileWriter
startTime	include/benchmarking/MetricsData.h	/^		float startTime;$/;"	m	struct:SteerLib::CollisionInfo
startupModules	include/simulation/SimulationOptions.h	/^			std::set<std::string> startupModules;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
state	include/planning/BestFirstSearchPlanner.h	/^		PlanningState state;$/;"	m	class:SteerLib::DefaultAction
steeringAlg	include/testcaseio/Behaviour.h	/^		std::string steeringAlg;$/;"	m	class:SteerLib::Behaviour
steeringMode	include/simulation/SteeringCommand.h	/^		LocomotionType steeringMode;$/;"	m	class:SteerLib::SteeringCommand
stepBackward	include/simulation/SimulationOptions.h	/^			int stepBackward;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
stepForward	include/simulation/SimulationOptions.h	/^			int stepForward;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
stepOneFrame	src/BenchmarkEngine.cpp	/^void BenchmarkEngine::stepOneFrame()$/;"	f	class:BenchmarkEngine
stereoMode	include/simulation/SimulationOptions.h	/^			std::string stereoMode;$/;"	m	struct:SteerLib::SimulationOptions::GLFWEngineDriverOptions
stop	include/util/PerformanceProfiler.h	/^		inline void stop() { _endTick = getHighResCounterValue();  _updateStatistics(); isStopped = true; }$/;"	f	class:Util::PerformanceProfiler
stop	src/SimulationEngine.cpp	/^void SimulationEngine::stop()$/;"	f	class:SimulationEngine
stop	src/StateMachine.cpp	/^void StateMachine::stop()$/;"	f	class:StateMachine
stopDumpingFrames	include/simulation/SimulationOptions.h	/^			int stopDumpingFrames;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
stopped	include/util/PerformanceProfiler.h	/^		inline bool stopped(void) { return isStopped; }$/;"	f	class:Util::PerformanceProfiler
subMatrix	include/util/dmatrix.h	/^  inline Matrix subMatrix(size_t row, size_t column, size_t numRows, size_t numColumns) const {$/;"	f	class:Matrix
sumTotalOfInstantaneousAcceleration	include/benchmarking/MetricsData.h	/^		float sumTotalOfInstantaneousAcceleration; \/\/ units: meters\/(second^2)   NOTE CAREFULLY: this value is not the integral of acceleration, i.e. not "time-independent".$/;"	m	class:SteerLib::AgentMetrics
sumTotalOfInstantaneousKineticEnergies	include/benchmarking/MetricsData.h	/^		float sumTotalOfInstantaneousKineticEnergies; \/\/ units:  Kg * (m\/s)^2   (mass is assumed to be 1.0 for all agents)$/;"	m	class:SteerLib::AgentMetrics
takeScreenshot	include/simulation/SimulationOptions.h	/^			int takeScreenshot;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
tangent	include/util/Curve.h	/^			Vector tangent;$/;"	m	class:Util::CurvePoint
tangents	build/win32/AnimationCurve.h	/^		std::vector<Point> tangents;$/;"	m	class:Util::Curve
target	include/util/CommandLineParser.h	/^			void * target;$/;"	m	struct:Util::CommandLineParser::OptionInfo
targetBehaviour	include/testcaseio/AgentInitialConditions.h	/^		Behaviour targetBehaviour;$/;"	m	struct:SteerLib::AgentGoalInfo
targetDirection	include/simulation/SteeringCommand.h	/^		Util::Vector targetDirection;$/;"	m	class:SteerLib::SteeringCommand
targetDirection	include/testcaseio/AgentInitialConditions.h	/^		Util::Vector targetDirection;$/;"	m	struct:SteerLib::AgentGoalInfo
targetIsRandom	include/testcaseio/AgentInitialConditions.h	/^		bool targetIsRandom;$/;"	m	struct:SteerLib::AgentGoalInfo
targetLocation	include/testcaseio/AgentInitialConditions.h	/^		Util::Point targetLocation;$/;"	m	struct:SteerLib::AgentGoalInfo
targetName	include/testcaseio/AgentInitialConditions.h	/^		std::string targetName;$/;"	m	struct:SteerLib::AgentGoalInfo
targetRegion	include/testcaseio/AgentInitialConditions.h	/^		Util::AxisAlignedBox targetRegion;$/;"	m	struct:SteerLib::AgentGoalInfo
targetSpeed	include/simulation/SteeringCommand.h	/^		float targetSpeed;$/;"	m	class:SteerLib::SteeringCommand
targetTangent	include/simulation/Camera.h	/^			Util::Vector targetTangent;$/;"	m	class:SteerLib::CameraView
targetTangent	include/testcaseio/AgentInitialConditions.h	/^		Util::Vector targetTangent;$/;"	m	struct:SteerLib::AgentGoalInfo
targetTime	include/simulation/Camera.h	/^			float targetTime;$/;"	m	class:SteerLib::CameraView
targetTime	include/testcaseio/AgentInitialConditions.h	/^		float targetTime;$/;"	m	struct:SteerLib::AgentGoalInfo
testCaseNameOffset	include/recfileio/RecFileIOPrivate.h	/^		unsigned int testCaseNameOffset;$/;"	m	struct:SteerLib::RecFileHeader
testCaseSearchPath	include/simulation/SimulationOptions.h	/^			std::string testCaseSearchPath;$/;"	m	struct:SteerLib::SimulationOptions::EngineOptions
thetaY	include/testcaseio/ObstacleInitialConditions.h	/^		float lengthX, lengthZ, height, thetaY;$/;"	m	struct:SteerLib::OrientedBoxObstacleInitialConditions
thetaY	include/testcaseio/TestCaseIOPrivate.h	/^		float thetaY;$/;"	m	class:SteerLib::RawOrientedBoxObstacleInfo
throwException	include/simulation/SimulationEngine.h	/^		virtual void throwException(const std::string & errorMessage) { throw Util::GenericException(errorMessage); }$/;"	f	class:SteerLib::SimulationEngine
time	include/util/Curve.h	/^			float time;$/;"	m	class:Util::CurvePoint
timeDuration	include/benchmarking/MetricsData.h	/^		float timeDuration;$/;"	m	struct:SteerLib::CollisionInfo
timeDuration	include/testcaseio/AgentInitialConditions.h	/^		float timeDuration;$/;"	m	struct:SteerLib::AgentGoalInfo
timeStamp	include/recfileio/RecFileIOPrivate.h	/^		float timeStamp;$/;"	m	struct:SteerLib::RecFileFrameInfo
times	build/win32/AnimationCurve.h	/^		std::vector<float> times;$/;"	m	class:Util::Curve
toLower	src/Misc.cpp	/^std::string Util::toLower (const std::string &s)$/;"	f	class:Util
toString	include/util/Misc.h	/^	static inline std::string toString( const T &value ) {$/;"	f	namespace:Util
toggleAntialiasing	include/simulation/SimulationOptions.h	/^			int toggleAntialiasing;$/;"	m	struct:SteerLib::SimulationOptions::KeyboardBindings
totalAcceleration	include/benchmarking/MetricsData.h	/^		float totalAcceleration;      \/\/ units: meters\/second    NOTE CAREFULLY:  this is the estimate of integral of acceleration over an interval.$/;"	m	class:SteerLib::AgentMetrics
totalAccelerationOverWindow	include/benchmarking/MetricsData.h	/^		float totalAccelerationOverWindow;$/;"	m	class:SteerLib::AgentMetrics
totalChangeInSpeed	include/benchmarking/MetricsData.h	/^		float totalChangeInSpeed;     \/\/ units: meters\/second$/;"	m	class:SteerLib::AgentMetrics
totalChangeInSpeedOverWindow	include/benchmarking/MetricsData.h	/^		float totalChangeInSpeedOverWindow;$/;"	m	class:SteerLib::AgentMetrics
totalDegreesTurned	include/benchmarking/MetricsData.h	/^		float totalDegreesTurned;  \/\/ units: degrees$/;"	m	class:SteerLib::AgentMetrics
totalDegreesTurnedOverWindow	include/benchmarking/MetricsData.h	/^		float totalDegreesTurnedOverWindow;$/;"	m	class:SteerLib::AgentMetrics
totalDistanceTraveled	include/benchmarking/MetricsData.h	/^		float totalDistanceTraveled;  \/\/ units: meters$/;"	m	class:SteerLib::AgentMetrics
totalDistanceTraveledOverWindow	include/benchmarking/MetricsData.h	/^		float totalDistanceTraveledOverWindow;$/;"	m	class:SteerLib::AgentMetrics
totalNumFramesEnabled	include/benchmarking/MetricsData.h	/^		unsigned int totalNumFramesEnabled;$/;"	m	class:SteerLib::AgentMetrics
totalPlaybackTime	include/recfileio/RecFileIOPrivate.h	/^		float totalPlaybackTime;$/;"	m	struct:SteerLib::RecFileHeader
totalTimeEnabled	include/benchmarking/MetricsData.h	/^		float totalTimeEnabled;$/;"	m	class:SteerLib::AgentMetrics
tr	include/util/dmatrix.h	/^inline double tr(const Matrix& q) {$/;"	f
trace	src/GridDatabase2D.cpp	/^bool GridDatabase2D::trace(const Ray & r, float & t, SpatialDatabaseItemPtr &hitObject, SpatialDatabaseItemPtr exclude, bool excludeAgents)$/;"	f	class:GridDatabase2D
transitionToState	src/StateMachine.cpp	/^void StateMachine::transitionToState(unsigned int newState)$/;"	f	class:StateMachine
transitioned	include/util/StateMachine.h	/^		virtual void transitioned(unsigned int previousState, unsigned int currentState) { }$/;"	f	class:Util::StateMachineCallbackInterface
transitioned	src/SimulationEngine.cpp	/^void SimulationEngine::EngineStateMachineCallback::transitioned(unsigned int previousState, unsigned int currentState)$/;"	f	class:SimulationEngine::EngineStateMachineCallback
turningAmount	include/simulation/SteeringCommand.h	/^		float turningAmount;$/;"	m	class:SteerLib::SteeringCommand
type	include/util/Curve.h	/^			int type;$/;"	m	class:Util::Curve
ukfControlUpdate	include/benchmarking/BayesianFilter.h	/^inline void ukfControlUpdate(Matrix& xHat, Matrix& Sigma, const Matrix& u, size_t mDim, Matrix (*f)(const Matrix&, const Matrix&, const Matrix&), $/;"	f
ukfMeasurementUpdate	include/benchmarking/BayesianFilter.h	/^inline void ukfMeasurementUpdate(Matrix& xHat, Matrix& Sigma, const Matrix& z, size_t nDim, $/;"	f
unload	src/DynamicLibrary.cpp	/^void DynamicLibrary::unload( )$/;"	f	class:DynamicLibrary
unloadModule	src/SimulationEngine.cpp	/^void SimulationEngine::unloadModule( SteerLib::ModuleInterface * moduleToDestroy, bool recursivelyUnloadDependencies )$/;"	f	class:SimulationEngine
unlock	include/util/Mutex.h	/^		inline void unlock() throw() {$/;"	f	class:Util::Mutex
unscentedKalmanFilter	include/benchmarking/BayesianFilter.h	/^inline void unscentedKalmanFilter(Matrix& xHat, Matrix& Sigma, const Matrix& u, const Matrix& z, $/;"	f
unselectAgent	include/simulation/SimulationEngine.h	/^		virtual void unselectAgent(SteerLib::AgentInterface * agent) { if (agent != NULL) _selectedAgents.erase(agent); }$/;"	f	class:SteerLib::SimulationEngine
unselectAllAgents	include/simulation/SimulationEngine.h	/^		virtual void unselectAllAgents() { _selectedAgents.clear(); }$/;"	f	class:SteerLib::SimulationEngine
up	include/recfileio/RecFileIOPrivate.h	/^		RecFileVectorData up;$/;"	m	struct:SteerLib::RecFileCameraInfo
up	include/simulation/Camera.h	/^			Util::Vector up;$/;"	m	class:SteerLib::CameraView
up	src/Camera.cpp	/^Vector Camera::up()$/;"	f	class:Camera
update	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void update(SimulationMetricsCollector * simulationMetrics, float timeStamp, float dt) { $/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
update	include/benchmarking/AccelerationEfficiencyTechnique.h	/^		void update(SteerLib::EngineInterface * engineInterface, float currentTimeStamp, float timePassedSinceLastFrame, unsigned int frameNumber) {}$/;"	f	class:SteerLib::AccelerationEfficiencyBenchmarkTechnique
update	include/benchmarking/CompositeTechnique01.h	/^		void update(SimulationMetricsCollector * simulationMetrics, float timeStamp, float dt) { }$/;"	f	class:SteerLib::CompositeBenchmarkTechnique01
update	include/benchmarking/CompositeTechnique01.h	/^		void update(SteerLib::EngineInterface * engineInterface, float currentTimeStamp, float timePassedSinceLastFrame, unsigned int frameNumber) {}$/;"	f	class:SteerLib::CompositeBenchmarkTechnique01
update	include/benchmarking/CompositeTechnique02.h	/^		void update(SimulationMetricsCollector * simulationMetrics, float timeStamp, float dt)$/;"	f	class:SteerLib::CompositeBenchmarkTechnique02
update	include/benchmarking/CompositeTechnique02.h	/^		void update(SteerLib::EngineInterface * engineInterface, float currentTimeStamp, float timePassedSinceLastFrame, unsigned int frameNumber) {}$/;"	f	class:SteerLib::CompositeBenchmarkTechnique02
update	include/benchmarking/CompositeTechniquePLE.h	/^		void update(SimulationMetricsCollector * simulationMetrics, float timeStamp, float dt) { }$/;"	f	class:SteerLib::CompositeBenchmarkTechniquePLE
update	include/benchmarking/CompositeTechniquePLE.h	/^		void update(SteerLib::EngineInterface * engineInterface, float currentTimeStamp, float timePassedSinceLastFrame, unsigned int frameNumber) {}$/;"	f	class:SteerLib::CompositeBenchmarkTechniquePLE
update	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void update(SimulationMetricsCollector * simulationMetrics, float timeStamp, float dt) { $/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
update	include/benchmarking/EnergyEfficiencyTechnique.h	/^		void update(SteerLib::EngineInterface * engineInterface, float currentTimeStamp, float timePassedSinceLastFrame, unsigned int frameNumber) {}$/;"	f	class:SteerLib::EnergyEfficiencyBenchmarkTechnique
update	include/interfaces/ObstacleInterface.h	/^		virtual void update(float timeStamp, float dt, unsigned int frameNumber) { }$/;"	f	class:SteerLib::ObstacleInterface
update	src/AgentMetricsCollector.cpp	/^void AgentMetricsCollector::update(SteerLib::GridDatabase2D * gridDB, SteerLib::AgentInterface * updatedAgent, float currentTimeStamp, float timePassedSinceLastFrame)$/;"	f	class:AgentMetricsCollector
update	src/Camera.cpp	/^void Camera::update(float totalTime, float elapsedTime)$/;"	f	class:Camera
update	src/SimulationEngine.cpp	/^bool SimulationEngine::update( bool advanceRealTimeOnly )$/;"	f	class:SimulationEngine
update	src/SimulationMetricsCollector.cpp	/^void SimulationMetricsCollector::update(SteerLib::GridDatabase2D * gridDB, const std::vector<SteerLib::AgentInterface*> & updatedAgents, float currentTimeStamp, float timePassedSinceLastFrame)$/;"	f	class:SimulationMetricsCollector
updateAI	include/benchmarking/BenchmarkEnginePrivate.h	/^		void updateAI(float timeStamp, float dt, unsigned int frameNumber) {$/;"	f	class:SteerLib::BenchmarkAgent
updateAI	include/modules/DummyAIModule.h	/^		void updateAI(float timeStamp, float dt, unsigned int frameNumber) { }$/;"	f	class:SteerLib::DummyAgent
updateAI	include/modules/RecFilePlayerModule.h	/^		void updateAI(float timeStamp, float dt, unsigned int frameNumber) { }$/;"	f	class:SteerLib::ReplayAgent
updateObject	src/GridDatabase2D.cpp	/^void GridDatabase2D::updateObject( SpatialDatabaseItemPtr item, const AxisAlignedBox & oldBounds, const AxisAlignedBox & newBounds )$/;"	f	class:GridDatabase2D
updateRealTime	include/simulation/Clock.h	/^		inline void updateRealTime() {$/;"	f	class:SteerLib::Clock
useAntialiasing	include/simulation/SimulationOptions.h	/^			bool useAntialiasing;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
useCatmullCurve	src/Curve.cpp	/^Point Curve::useCatmullCurve(const unsigned int nextPoint, const float time)$/;"	f	class:Curve
useHermiteCurve	src/Curve.cpp	/^Point Curve::useHermiteCurve(const unsigned int nextPoint, const float time)$/;"	f	class:Curve
useNextPointOfInterest	src/Camera.cpp	/^void Camera::useNextPointOfInterest()$/;"	f	class:Camera
useVsync	include/simulation/SimulationOptions.h	/^			bool useVsync;$/;"	m	struct:SteerLib::SimulationOptions::GUIOptions
value	include/testcaseio/BehaviourParameter.h	/^		std::string value;$/;"	m	class:SteerLib::BehaviourParameter
value	include/util/HighResCounter.h	/^		static inline unsigned long long value() { $/;"	f	class:Util::CounterFrequencyEstimator
values	include/benchmarking/MetricsData.h	/^		T values[WINDOW_SIZE];$/;"	m	class:SteerLib::windowArray
vector	include/util/Geometry.h	/^		Vector vector()$/;"	f	class:Util::Point
velocity	include/benchmarking/BenchmarkEnginePrivate.h	/^		Util::Vector velocity() const { throw Util::GenericException("velocity() not implemented yet"); }$/;"	f	class:SteerLib::BenchmarkAgent
velocity	include/modules/DummyAIModule.h	/^		Util::Vector velocity() const { throw Util::GenericException("velocity() not implemented yet"); }$/;"	f	class:SteerLib::DummyAgent
velocity	include/modules/RecFilePlayerModule.h	/^		Util::Vector velocity() const { return _velocity; }$/;"	f	class:SteerLib::ReplayAgent
version	include/recfileio/RecFileIOPrivate.h	/^		unsigned int version;$/;"	m	struct:SteerLib::RecFileHeader
version	include/testcaseio/TestCaseIOPrivate.h	/^		std::string version;$/;"	m	class:SteerLib::TestCaseHeader
waitForAllTasksToComplete	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::waitForAllTasksToComplete()$/;"	f	class:ThreadedTaskManager
wakeUpAllSleepingWorkerThreads	src/ThreadedTaskManager.cpp	/^void ThreadedTaskManager::wakeUpAllSleepingWorkerThreads() throw()$/;"	f	class:ThreadedTaskManager
what	include/util/GenericException.h	/^		virtual const char * what() const throw() { return _errorMessage.c_str(); }$/;"	f	class:Util::GenericException
windowArray	include/benchmarking/MetricsData.h	/^		windowArray() {$/;"	f	class:SteerLib::windowArray
windowArray	include/benchmarking/MetricsData.h	/^	template <class T> class STEERLIB_API windowArray {$/;"	c	namespace:SteerLib
windowPositionX	include/simulation/SimulationOptions.h	/^			unsigned int windowPositionX;$/;"	m	struct:SteerLib::SimulationOptions::GLFWEngineDriverOptions
windowPositionY	include/simulation/SimulationOptions.h	/^			unsigned int windowPositionY;$/;"	m	struct:SteerLib::SimulationOptions::GLFWEngineDriverOptions
windowSizeX	include/simulation/SimulationOptions.h	/^			unsigned int windowSizeX;$/;"	m	struct:SteerLib::SimulationOptions::GLFWEngineDriverOptions
windowSizeY	include/simulation/SimulationOptions.h	/^			unsigned int windowSizeY;$/;"	m	struct:SteerLib::SimulationOptions::GLFWEngineDriverOptions
windowTitle	include/simulation/SimulationOptions.h	/^			std::string windowTitle;$/;"	m	struct:SteerLib::SimulationOptions::GLFWEngineDriverOptions
worldBounds	include/testcaseio/TestCaseIOPrivate.h	/^		Util::AxisAlignedBox worldBounds;$/;"	m	class:SteerLib::TestCaseHeader
writeTestCaseToFile	src/TestCaseWriter.cpp	/^void TestCaseWriter::writeTestCaseToFile($/;"	f	class:TestCaseWriter
writeTestCaseToFile	src/TestCaseWriter.cpp	/^void TestCaseWriter::writeTestCaseToFile(FILE *fp,$/;"	f	class:TestCaseWriter
writeXMLFile	src/XMLParser.cpp	/^void XMLParser::writeXMLFile(const std::string & filename)$/;"	f	class:XMLParser
x	include/recfileio/RecFileIOPrivate.h	/^		float x, y, z;$/;"	m	struct:SteerLib::RecFilePointData
x	include/recfileio/RecFileIOPrivate.h	/^		float x, y, z;$/;"	m	struct:SteerLib::RecFileVectorData
x	include/util/Geometry.h	/^		float x, y, z;$/;"	m	class:Util::Point
x	include/util/Geometry.h	/^		float x, y, z;$/;"	m	class:Util::Vector
x	include/util/Geometry.h	/^		float x, z, r;$/;"	m	class:Util::Circle
x	include/util/dmatrix.h	/^	double x;$/;"	m	struct:mPair
xmax	include/recfileio/RecFileIOPrivate.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::RecFileBoxData
xmax	include/testcaseio/ObstacleInitialConditions.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::BoxObstacleInitialConditions
xmax	include/util/Geometry.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:Util::AxisAlignedBox
xmin	include/recfileio/RecFileIOPrivate.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::RecFileBoxData
xmin	include/testcaseio/ObstacleInitialConditions.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::BoxObstacleInitialConditions
xmin	include/util/Geometry.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:Util::AxisAlignedBox
y	include/recfileio/RecFileIOPrivate.h	/^		float x, y, z;$/;"	m	struct:SteerLib::RecFilePointData
y	include/recfileio/RecFileIOPrivate.h	/^		float x, y, z;$/;"	m	struct:SteerLib::RecFileVectorData
y	include/util/Geometry.h	/^		float x, y, z;$/;"	m	class:Util::Point
y	include/util/Geometry.h	/^		float x, y, z;$/;"	m	class:Util::Vector
y	include/util/dmatrix.h	/^	double y;$/;"	m	struct:mPair
ymax	include/recfileio/RecFileIOPrivate.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::RecFileBoxData
ymax	include/testcaseio/ObstacleInitialConditions.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::BoxObstacleInitialConditions
ymax	include/util/Geometry.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:Util::AxisAlignedBox
ymin	include/recfileio/RecFileIOPrivate.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::RecFileBoxData
ymin	include/testcaseio/ObstacleInitialConditions.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::BoxObstacleInitialConditions
ymin	include/util/Geometry.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:Util::AxisAlignedBox
z	include/recfileio/RecFileIOPrivate.h	/^		float x, y, z;$/;"	m	struct:SteerLib::RecFilePointData
z	include/recfileio/RecFileIOPrivate.h	/^		float x, y, z;$/;"	m	struct:SteerLib::RecFileVectorData
z	include/util/Geometry.h	/^		float x, y, z;$/;"	m	class:Util::Point
z	include/util/Geometry.h	/^		float x, y, z;$/;"	m	class:Util::Vector
z	include/util/Geometry.h	/^		float x, z, r;$/;"	m	class:Util::Circle
zero	include/util/Geometry.h	/^		void zero() { x = 0.0f; y = 0.0f; z = 0.0f; }$/;"	f	class:Util::Vector
zeros	include/util/dmatrix.h	/^inline Matrix zeros(size_t numRows) {$/;"	f
zeros	include/util/dmatrix.h	/^inline Matrix zeros(size_t numRows, size_t numColumns) {$/;"	f
zmax	include/recfileio/RecFileIOPrivate.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::RecFileBoxData
zmax	include/testcaseio/ObstacleInitialConditions.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::BoxObstacleInitialConditions
zmax	include/util/Geometry.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:Util::AxisAlignedBox
zmin	include/recfileio/RecFileIOPrivate.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::RecFileBoxData
zmin	include/testcaseio/ObstacleInitialConditions.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	struct:SteerLib::BoxObstacleInitialConditions
zmin	include/util/Geometry.h	/^		float xmin, xmax, ymin, ymax, zmin, zmax;$/;"	m	class:Util::AxisAlignedBox
zoomCamera	include/simulation/SimulationOptions.h	/^			int zoomCamera;$/;"	m	struct:SteerLib::SimulationOptions::MouseBindings
~AgentInterface	include/interfaces/AgentInterface.h	/^		virtual ~AgentInterface() { }$/;"	f	class:SteerLib::AgentInterface
~AutomaticFunctionProfiler	include/util/PerformanceProfiler.h	/^		~AutomaticFunctionProfiler() { _pp->stop(); }$/;"	f	class:Util::AutomaticFunctionProfiler
~Behaviour	src/Behaviour.cpp	/^Behaviour::~Behaviour()$/;"	f	class:Behaviour
~BehaviourParameter	src/BehaviorParameter.cpp	/^BehaviourParameter::~BehaviourParameter()$/;"	f	class:BehaviourParameter
~BenchmarkTechniqueInterface	include/interfaces/BenchmarkTechniqueInterface.h	/^		virtual ~BenchmarkTechniqueInterface() { }$/;"	f	class:SteerLib::BenchmarkTechniqueInterface
~Clock	src/Clock.cpp	/^Clock::~Clock()$/;"	f	class:Clock
~Curve	build/win32/AnimationCurve.h	/^		~Curve() {};$/;"	f	class:Util::Curve
~Curve	include/util/Curve.h	/^			~Curve() {}$/;"	f	class:Util::Curve
~DrawLib	include/util/DrawLib.h	/^		~DrawLib() {}$/;"	f	class:Util::DrawLib
~EngineControllerInterface	include/interfaces/EngineControllerInterface.h	/^		virtual ~EngineControllerInterface() { }$/;"	f	class:SteerLib::EngineControllerInterface
~EngineInterface	include/interfaces/EngineInterface.h	/^		virtual ~EngineInterface() { }$/;"	f	class:SteerLib::EngineInterface
~GenericException	include/util/GenericException.h	/^		~GenericException() throw() { }$/;"	f	class:Util::GenericException
~GridDatabase2D	src/GridDatabase2D.cpp	/^GridDatabase2D::~GridDatabase2D()$/;"	f	class:GridDatabase2D
~Matrix	include/util/dmatrix.h	/^  inline ~Matrix() { $/;"	f	class:Matrix
~MemoryMapper	src/MemoryMapper.cpp	/^MemoryMapper::~MemoryMapper()$/;"	f	class:MemoryMapper
~ModuleInterface	include/interfaces/ModuleInterface.h	/^		virtual ~ModuleInterface() { }$/;"	f	class:SteerLib::ModuleInterface
~Mutex	include/util/Mutex.h	/^		~Mutex() {$/;"	f	class:Util::Mutex
~ObstacleInterface	include/interfaces/ObstacleInterface.h	/^		virtual ~ObstacleInterface() { }$/;"	f	class:SteerLib::ObstacleInterface
~RecFileReader	src/RecFileReader.cpp	/^RecFileReader::~RecFileReader()$/;"	f	class:RecFileReader
~RecFileWriter	src/RecFileWriter.cpp	/^RecFileWriter::~RecFileWriter()$/;"	f	class:RecFileWriter
~SimulationEngine	include/simulation/SimulationEngine.h	/^		~SimulationEngine() { }$/;"	f	class:SteerLib::SimulationEngine
~SimulationMetricsCollector	src/SimulationMetricsCollector.cpp	/^SimulationMetricsCollector::~SimulationMetricsCollector()$/;"	f	class:SimulationMetricsCollector
~SpatialDatabaseItem	include/interfaces/SpatialDatabaseItem.h	/^		virtual ~SpatialDatabaseItem() {}$/;"	f	class:SteerLib::SpatialDatabaseItem
~StateMachineCallbackInterface	include/util/StateMachine.h	/^		virtual ~StateMachineCallbackInterface() { }$/;"	f	class:Util::StateMachineCallbackInterface
~ThreadedTaskManager	src/ThreadedTaskManager.cpp	/^ThreadedTaskManager::~ThreadedTaskManager()$/;"	f	class:ThreadedTaskManager
~XMLParserCallbackInterface	include/util/XMLParser.h	/^		virtual ~XMLParserCallbackInterface() { }$/;"	f	class:Util::XMLParserCallbackInterface
